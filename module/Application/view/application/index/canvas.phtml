
<script id="slotTemplate" type="text/x-kendo-template">

      #var scheduler = target.closest("[data-role=scheduler]").data("kendoScheduler");#
      #var slot = scheduler.slotByElement(target);#
#console.log(slot);#
      #if(slot) {#
          <strong>slot start:</strong> #=kendo.format('{0:d}',slot.startDate)#<br />
          <strong>slot end:</strong> #=kendo.format('{0:d}',slot.endDate)#<br />
          <strong>slot group index:</strong> #=slot.groupIndex#<br />
          <strong>slot isDay:</strong> #=slot.isDaySlot#<br />
      #} else {#
          <strong>No slot data is available</strong>
      #}#
  </script>
  


<script type="text/javascript">

function loadScript() {
	var myKey = "AIzaSyCaYWKEFYLuVUKnzViTgdBtlc42vIDrzpk";
	if (!document.getElementById('script')) {
		console.log("adding MAP API");
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = "https://maps.googleapis.com/maps/api/js?key=" + myKey + "&callback=initialize";
       // document.body.appendChild(script);
	}
}


var oldSelection = 0;
var configGrid;

$().w2layout({
    name: 'layoutRight<?php echo $this->viewId;?>',
    padding: 4,
    panels: [
        { type: 'top', size: '50%', resizable: true},
        { type: 'bottom', size: '50%', resizable: true}
    ]

});

 var config = {
	        layout: {
	       	 name: 'layout<?php echo $this->viewId;?>',
	         padding: 0,
	         panels: [
	             /*{ type: 'top', size: '1%', resizable: true, minSize: 50 },*/
	         
	             { type: 'top',  resizable: true,size: '70%' },
	          
	             { type: 'left', size: '30%' ,resizable: true },
	             { type: 'right', size: '30%' ,resizable: true },
	             { type: 'main', size: '50%' ,resizable: true },
	             { type: 'preview', size: '50%' ,resizable: true },
	             { type: 'bottom', size: '30%' ,resizable: true }
	         ]
	        },
	        layoutPopup: {
                name: 'layoutPopup',
                padding: 4,
                panels: [
                    { type: 'right', size: '50%', resizable: true},
                    { type: 'main', minSize: 300 },
                    { type: 'preview',size: '50%' }
                ]
            },
            grid: {
                name: 'grid<?php echo $this->viewId;?>',
                show: {
                    toolbar    : true,                
                    header : true,
                    selectColumn: true,
                    footer    : true,
                    lineNumbers : true,
                    //expandColumn: this.expandChildren,
                },
                multiSearch : true,
                searches: [{ field: 'recid', caption: 'ID ', type: 'int' }],
                reorderColumns: true,
                //onExpand: function (event) {
                //    console.log(event);
                //    createTempChildGrid(event,this,  this.objectTypeRef , this.expandDefinition);

                //},
                toolbar: {
                    items: [
                        {
                            type :  'menu', id:'menu', caption:  '<?php echo $this->translate('Menu'); ?>', icon: 'fa-table'
                        }
                    ],
                    onClick: function (event) {
                        if (event.target == 'menu:add') {
                            //w2ui.grid.add({ recid: '' });
                        	openAddPopup(w2ui['grid<?php echo $this->viewId;?>'].objectType,'<?php echo $this->parentType; ?>','<?php echo $this->parentId; ?>', 'grid','<?php echo $this->parentId; ?>','<?php echo $this->parentType; ?>',"new");
                        
                        }
                        else if (event.target == 'menu:delete') {
                        	w2confirm('<?php echo $this->translate('are_you_sure'); ?>', function btn(answer) { 
                            	if(answer=='Yes')
                                { // Yes or No -- case-sensative
                                w2ui['grid<?php echo $this->viewId;?>'].lock('Loading...', true);
                                $.ajax({
                                    type : 'POST',
                                    url: $('#urlAjax').val()+"/deleteobjects",
                                    data :  {
                                       	"parentId" : "<?php echo $this->parentId; ?>",
                                    	"parentType" : ""+"<?php echo $this->parentType; ?>",
                                        "objectType" : w2ui['grid<?php echo $this->viewId;?>'].objectType,
                                        "data" : w2ui['grid<?php echo $this->viewId;?>'].getSelection()
                                    },
                                    success:$.proxy(function(result){
                                        w2ui['grid<?php echo $this->viewId;?>'].unlock();
                                        if(result.success) {
                                            
                                            selectedItems = [];
                                            refreshAll();
                                        }
                                    }, this),
                                    dataType : 'json'
                                });
                                }
                        	});
                                            
                        }
                        else if (event.target == 'menu:add-field') {
                            
                            openPopup(w2ui['grid<?php echo $this->viewId;?>'].objectType);
                        }
                        else if (event.target == 'menu:export') {
                         	 
                       	    var serachString= JSON.stringify(w2ui['grid<?php echo $this->viewId;?>'].searchData);
                          	 var searchField= JSON.stringify(w2ui['grid<?php echo $this->viewId;?>'].searchField);
                          	 var sortData= JSON.stringify(w2ui['grid<?php echo $this->viewId;?>'].sortData);
                             window.location = $('#urlAjax').val()+
                            "/export?object=get"+w2ui['grid<?php echo $this->viewId;?>'].objectType+
                            "&viewId="+"<?php echo $this->viewId?>"+
                            "&gridId="+'grid'+
                            "&parentObject="+ "<?php echo $this->parentType; ?>"+
                            "&parentId="+ "<?php echo $this->parentId; ?>"+
                            "&searchData="+serachString+
                            "&searchField="+searchField+
                            "&sortData="+sortData;
                        }
                        else if (event.target == 'menu:undo') {  
                        	undoGrid(parentType , parentId, "grid");
                        }
                        else if (event.target == 'menu:print') {
                       	    var serachString= JSON.stringify(w2ui['grid<?php echo $this->viewId;?>'].searchData);
                            var searchField= JSON.stringify(w2ui['grid<?php echo $this->viewId;?>'].searchField);
                            var sortData= JSON.stringify(w2ui['grid<?php echo $this->viewId;?>'].sortData);
                            $.ajax({
                                type : 'GET',
                                url: $('#urlAjax').val()+
                                "/exportprint?object=get"+w2ui['grid<?php echo $this->viewId;?>'].objectType+
                                "&viewId="+"<?php echo $this->viewId?>"+
                                "&gridId="+'grid'+
                                "&parentObject="+ "<?php echo $this->parentType; ?>"+
                                "&parentId="+ "<?php echo $this->parentId; ?>"+
                                "&searchData="+serachString+
                                "&searchField="+searchField+
                                "&sortData="+sortData,
                                success:$.proxy(function(result){
                                    if(result.success) {
                                        window.open(result.url, '_blank');

                                    }
                                }, this),
                                dataType : 'json'
                            });
                        }
                        else {
                            console.log(event);
                            //id = event.recid
                            var idTo = '<?php echo $this->parentId; ?>';
                            if( event.subItem != undefined ){
                                event.menuItem = [];
                             	event.menuItem = event.subItem;
                                event.menuItem.parentId = '<?php echo $this->parentId; ?>';
                           	    event.menuItem.objectType = '<?php echo $this->parentType; ?>';
                           	    event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                            	var nameG = 'grid';
                                executeMenuActivity( event.menuItem, idTo , nameG);
                             }
                          }
                    }
                },
                menu: [],
                records: [],
                onSearch : function (event) {               
                    event.onComplete = function () {
                       console.log("on search"+event);
                       w2ui['grid<?php echo $this->viewId;?>'].searchData =event.searchData ;
                       w2ui['grid<?php echo $this->viewId;?>'].searchField =event.searchField ;
                        w2ui['gridRef3<?php echo $this->viewId;?>'].clear() ;
                    }
                },
                onRequest: function(event) {
                    //console.log('-- server call --');
                    //console.log(event);
                },
                onMenuClick: function(event) {
                	if (event.menuItem.id == 1) {
                		console.log('-- Edit call --' + w2ui['grid<?php echo $this->viewId;?>'].objectType);
                		console.log('-- Edit call --' , w2ui['grid<?php echo $this->viewId;?>']);
                		console.log('-- Edit call --' , '<?php echo $this->parentType; ?>');
                    	openAddPopup(
                            w2ui['grid<?php echo $this->viewId;?>'].objectTypeRef,
                            '<?php echo $this->parentType; ?>',
                            '<?php echo $this->parentId; ?>',
                            'grid',
                            event.recid,
                            w2ui['grid<?php echo $this->viewId;?>'].objectTypeRef,
                            'edit');
                    	     
                    }  else if (event.menuItem.id != '') {
                        if( event.menuItem.action == "popup"){
                            //
                        	//console.log('start popup'+event.menuItem.viewId+" -- "+parentId);
                            //popup(""+event.menuItem.viewId, ""+event.menuItem.parentType, ""+event.menuItem.objectType,""+event.menuItem.method,""+parentId);    
                            popup(""+event.menuItem.viewId, '<?php echo $this->id; ?>', event.recid, ""+event.menuItem.parentType,""+event.menuItem.objectType,""+event.menuItem.method);     
                                                      
                        } else if( event.menuItem.actionExecution == "changereference"){
                        	console.log( event);
                        	var nwgridId = ''+event.menuItem.method+'<?php echo $this->viewId;?>';
                        	console.log( "reg"+nwgridId);
                            w2ui[nwgridId].objectTypeRef = event.menuItem.objectType;
                            console.log(' -- changeref '+ event.menuItem.objectType);
                            refreshGrid(event.menuItem.method);
                        }
                         else if( event.menuItem.actionExecution == "inputform"){
                            var objectTypeRef = w2ui['grid<?php echo $this->viewId;?>'].objectTypeRef;
                            console.log(' ---------------------------------------- ',objectTypeRef);
                            console.log(' ---------------------------------------- ',event.menuItem);
                            openAddPopup(
                                event.menuItem.method,
                                event.menuItem.parentType,
                                event.recid,
                                'grid',
                                event.recid,
                                event.menuItem.objectType,
                                'inputForm'
                            );
                        }
                        else if( event.menuItem.actionExecution == "service" || event.menuItem.actionExecution == "method"){
                        	//console.log(event);
                        	event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                            executeMenuAction(event, w2ui['grid<?php echo $this->viewId;?>'].getSelection(), '<?php echo $this->parentId; ?>');

                        }else if (event.menuItem.id != '') {
                     	   var objectTypeRef = w2ui.grid.objectTypeRef;
                    	    //console.log("menu load= "+event );
                    	    w2ui['layoutMain'].load(
                    	    	    'main',
                    	    	      $('#urlAjax').val()+"/view/"+result.items[0].link+
                    	    	      "?layout=layoutMain&parentType="+"<?php echo $this->parentType;?>"+
                    	    	      "\\"+objectTypeRef+"&parentId="+objectTypeRef+
                    	    	      "&viewId="+event.menuItem.id+"&objectId="+event.recid
                    	    	      );
                    	    }
                    }
                },         
                onClick : function (event){
                	//w2ui['grid<?php echo $this->viewId;?>'].lock('Loading...', true); 
                 	event.onComplete = function () {
                  	var sel = w2ui['grid<?php echo $this->viewId;?>'].getSelection();
                  	if(sel.length == 1){             	
                  	        if(STORAGE["<?php echo $this->viewId;?>"].MAP == true){
                  	        	//var row = w2ui['grid<?php echo $this->viewId;?>'].get(sel);
                  		        makeMapSelection(w2ui['grid<?php echo $this->viewId;?>'], sel);
                      	    }
                     	    var sel = w2ui['grid<?php echo $this->viewId;?>'].getSelection();
                     	    
                     	    if( sel == oldSelection ) {}
                         	else{
                             	console.log(STORAGE['grid<?php echo $this->viewId;?>']);
                   	          simpleReloadGridData('gridRef',  w2ui['gridRef<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef, true ); 
                      	      if(STORAGE['grid<?php echo $this->viewId;?>'].link == "2" ){
                     	    	   simpleReloadGridData('gridRef2',  w2ui['gridRef2<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef, true );
                      	    	   w2ui['gridRef2<?php echo $this->viewId;?>'].parentId =event.recid; 
                      	      }
                   	          oldSelection = sel;     
                              w2ui['gridRef<?php echo $this->viewId;?>'].parentId =event.recid; 
                              if( w2ui['gridRef3<?php echo $this->viewId;?>'] != undefined  )
                            	  w2ui['gridRef3<?php echo $this->viewId;?>'].clear() ;
                              if( w2ui['gridRef4<?php echo $this->viewId;?>'] != undefined  )
                                  w2ui['gridRef4<?php echo $this->viewId;?>'].clear() ;
                         	}      	                	
                                
                   	 }else {
                     	  oldSelection = 0;
                      }
                  	  w2ui['grid<?php echo $this->viewId;?>'].unlock();   
                    } 
                  },
                onDblClick: function (event){ 
                	//console.log('dblclick');
                	event.onComplete = function () {     
                	 openAddPopup('<?php echo $this->id; ?>','<?php echo $this->parentType; ?>','<?php echo $this->parentId; ?>', 'grid',event.recid,'<?php echo $this->id; ?>', 'edit');   
                	}
                },

                onRefresh: function(event) {
                
              	  if( w2ui['grid<?php echo $this->viewId;?>'].mainObjectTypeRef != undefined){
                	   w2ui['grid<?php echo $this->viewId;?>'].objectTypeRef = w2ui['grid<?php echo $this->viewId;?>'].mainObjectTypeRef ;
                	   w2ui['grid<?php echo $this->viewId;?>'].url = w2ui['grid<?php echo $this->viewId;?>'].backupUrl;
              	  }
                  event.onComplete = function () {
                        w2ui['grid<?php echo $this->viewId;?>'].select(w2ui['grid<?php echo $this->viewId;?>'].last.click_recid);
                        w2ui['grid<?php echo $this->viewId;?>'].scrollIntoView(w2ui['grid<?php echo $this->viewId;?>'].getSelection(true));
                   }
                },
                onSelect: function (event) {
                 event.onComplete = function () {
               	     var sel = w2ui['grid<?php echo $this->viewId;?>'].getSelection();
                	 //console.log('select '+sel);
                  	 if( sel.length > 1 ){
               		    var sel = w2ui['grid<?php echo $this->viewId;?>'].getSelection();
                         //console.log('select1 ');
                 		simpleReloadGridData('gridRef',w2ui['gridRef<?php echo $this->viewId;?>'].parentType, sel, w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef, false);
                         //console.log('select2 ');
                         if(STORAGE['grid<?php echo $this->viewId;?>'].link == "2" ){
                             //console.log('select3 ');
                 	    	   simpleReloadGridData('gridRef2',  w2ui['gridRef2<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef, true );
                  	    	   w2ui['gridRef2<?php echo $this->viewId;?>'].parentId =event.recid; 
                  	      }
               	          oldSelection = sel;     
                          w2ui['gridRef<?php echo $this->viewId;?>'].parentId =event.recid; 
                          if( w2ui['gridRef3<?php echo $this->viewId;?>'] != undefined  )
                        	  w2ui['gridRef3<?php echo $this->viewId;?>'].clear() ;      		    
                  	
               	    }
               	 }
                },
                onUnselect : function (event) {
               	 event.onComplete = function () {
                 	var sel = w2ui['grid<?php echo $this->viewId;?>'].getSelection();
                  	selection1= w2ui['grid<?php echo $this->viewId;?>'].getSelection();
                   	if( sel.length > 0 ){
                	      //console.log('unselect...');
                	      var sel = w2ui['grid<?php echo $this->viewId;?>'].getSelection();   
                     		simpleReloadGridData('gridRef',w2ui['gridRef<?php echo $this->viewId;?>'].parentType, w2ui['gridRef<?php echo $this->viewId;?>'].parentId,w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef, false);
                    		 if(STORAGE['grid<?php echo $this->viewId;?>'].link == "2" ){
                     	    	   simpleReloadGridData('gridRef2',  w2ui['gridRef2<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef, true );
                      	    	   w2ui['gridRef2<?php echo $this->viewId;?>'].parentId =event.recid; 
                      	      }
                   	          oldSelection = sel;     
                              w2ui['gridRef<?php echo $this->viewId;?>'].parentId =event.recid; 
                              if( w2ui['gridRef3<?php echo $this->viewId;?>'] != undefined  )
                            	  w2ui['gridRef3<?php echo $this->viewId;?>'].clear() ;      		    
                      	
               	       }
                   	}
                },
                onStateSave : function (event) {
                    //console.log(event);
                    $.ajax({
                        type : 'POST',
                        url: $('#urlAjax').val()+"/savestate",
                        data :  {
                            "view" : "<?php echo $this->viewId;?>",
                            "grid": 'grid',
                            "data" : event.state,
                            "columns" : event.columns
                        },
                        success:$.proxy(function(result){

                        }, this),
                        dataType : 'json'
                    });

                }
            },
            gridRef: {
                name: 'gridRef<?php echo $this->viewId;?>',
                show: {
                    toolbar            : true,
                    header : true,
                    selectColumn: true,
                    footer    : true,
                    lineNumbers : true,
                   // expandColumn: this.expandChildren,
                },
                //onExpand: function (event) {
                //    console.log(event);
                //    createTempChildGrid(event,this,  this.objectTypeRef , this.expandDefinition);

                //},
                //autoload: true,
                reorderColumns: true,
                multiSearch : true,
                searches: [{ field: 'recid', caption: 'ID ', type: 'int' }],
                toolbar: {
                    items: [
                        {
                            type :  'menu', id:'menu', caption:  '<?php echo $this->translate('Menu'); ?>', icon: 'fa-table'
                        }
                    ],
                    onClick: function (event) {
                        var objectTypeRef = w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef;
                        var parentType = w2ui['gridRef<?php echo $this->viewId;?>'].parentType;
                        var parentId  =w2ui['gridRef<?php echo $this->viewId;?>'].parentId;
                        if (event.target == 'menu:add') {
                            //console.log(parentType );
                            //todo check if parent id - if not then error must select first
                            if( !parentType ){
                            	$('#form').w2overlay(
                            	     '<div class="w2ui-centered"><div style="padding: 10px;">'+
                            	             '        No selection  '+
                            	             '</div></div>'
                            	);
                            }else
                            {
                               openAddPopup(objectTypeRef,parentType,parentId,'gridRef',parentId,parentType, "new");
                            }
                        }
                        else if (event.target == 'menu:delete') {    
                        	w2confirm('<?php echo $this->translate('are_you_sure'); ?>', function btn(answer) { 
                            	if(answer=='Yes')
                                { // Yes or No -- case-sensative

                             w2ui['gridRef<?php echo $this->viewId;?>'].lock('Loading...', true);
                             var objectTypeRef = w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef;
                             //console.log(objectTypeRef);

                             $.ajax({
                                 type : 'POST',
                                 url: $('#urlAjax').val()+"/deleteobjects",
                                 data :  {
                                     "objectType" : ""+objectTypeRef,
                                     "data" : w2ui['gridRef<?php echo $this->viewId;?>'].getSelection(),
                                     "parentId": w2ui['gridRef<?php echo $this->viewId;?>'].parentId,
                                     "parentType" : ""+w2ui['gridRef<?php echo $this->viewId;?>'].parentType
                                 },
                                 success:$.proxy(function(result){
                                     w2ui['gridRef<?php echo $this->viewId;?>'].unlock();
                                     if(result.success) {
                                         selectedRefItems = [];                                  
                                         //refresh the page after delete the field
                                         simpleReloadGridData('gridRef',w2ui['gridRef<?php echo $this->viewId;?>'].parentType, w2ui['gridRef<?php echo $this->viewId;?>'].parentId,w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef, true);
                                         //window.location = window.location;
                                         simpleReloadGridData('gridRef2',w2ui['gridRef2<?php echo $this->viewId;?>'].parentType, w2ui['gridRef2<?php echo $this->viewId;?>'].parentId,w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef, true);
                                               
                                     }
                                 }, this),
                                 dataType : 'json'
                             });     
                                }
                        	});              
                        }
                        else if (event.target == 'menu:add-field') {
                            openPopup(objectTypeRef);
                        }
                        else if (event.target == 'menu:export') {
                       	 
                       	    var serachString= JSON.stringify(w2ui['gridRef<?php echo $this->viewId;?>'].searchData);
                          	 var searchField= JSON.stringify(w2ui['gridRef<?php echo $this->viewId;?>'].searchField);
                          	 var sortData= JSON.stringify(w2ui['gridRef<?php echo $this->viewId;?>'].sortData);
                             window.location = $('#urlAjax').val()+
                            "/export?object=get"+objectTypeRef+
                            "&viewId="+"<?php echo $this->viewId?>"+
                            "&gridId="+'gridRef'+
                            "&parentObject="+parentType+
                            "&parentId="+parentId+
                            "&searchData="+serachString+
                            "&searchField="+searchField+
                            "&sortData="+sortData;
                        }
                        else if (event.target == 'menu:undo') {  
                        	undoGrid(parentType , parentId, "gridRef");
                        }
                        else if (event.target == 'menu:print') {
                       	    var serachString= JSON.stringify(w2ui['gridRef<?php echo $this->viewId;?>'].searchData);
                            var searchField= JSON.stringify(w2ui['gridRef<?php echo $this->viewId;?>'].searchField);
                            var sortData= JSON.stringify(w2ui['gridRef<?php echo $this->viewId;?>'].sortData);
                            $.ajax({
                                type : 'GET',
                                url: $('#urlAjax').val()+
                                "/exportprint?object=get"+objectTypeRef+
                                "&viewId="+"<?php echo $this->viewId?>"+
                                "&gridId="+'gridRef'+
                                "&parentObject="+parentType+
                                "&parentId="+parentId+
                                "&searchData="+serachString+
                                "&searchField="+searchField+
                                "&sortData="+sortData,
                                success:$.proxy(function(result){
                                    if(result.success) {
                                        window.open(result.url, '_blank');

                                    }
                                }, this),
                                dataType : 'json'
                            });
                        } else {
                            //console.log(event);
                            //id = event.recid
                            var idTo = w2ui['gridRef<?php echo $this->viewId;?>'].parentId;
                            if( event.subItem != undefined ){
                                event.menuItem = [];
                             	event.menuItem = event.subItem;
                                event.menuItem.parentId = parentType;
                           	    event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                            	var nameG = 'gridRef';

                            	console.log(" IN MENUACT" );
                                executeMenuActivity( event.menuItem, idTo , nameG);
                             }
                          }
                    }
                },
                menu: [
                ],
                onMenuClick: function(event) {
                    var objectTypeRef = w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef;
                    var parentType = w2ui['gridRef<?php echo $this->viewId;?>'].parentType;
                    var parentId  =w2ui['gridRef<?php echo $this->viewId;?>'].parentId;
                    //console.log(event);
                    if (event.menuItem.id == 1) {
                        openAddPopup(objectTypeRef, parentType,parentId, 'gridRef', event.recid,objectTypeRef, 'edit');
                        
                    }  else if (event.menuItem.id != '') {
                        if( event.menuItem.actionExecution == "popup"){
                            //
                        	//console.log('start popup'+event.menuItem.viewId+" -- "+parentId);
                            //popup(""+event.menuItem.viewId, ""+event.menuItem.parentType, ""+event.menuItem.objectType,""+event.menuItem.method,""+parentId);    
                            popup(""+event.menuItem.viewId, objectTypeRef, event.recid, ""+event.menuItem.parentType,""+event.menuItem.objectType,""+event.menuItem.method);     
                                                        
                        } else if( event.menuItem.actionExecution == "changereference"){
                        	console.log( event);
                        	var nwgridId = ''+event.menuItem.method+'<?php echo $this->viewId;?>';
                        	console.log( "ref "+nwgridId);
                            w2ui[nwgridId].objectTypeRef = event.menuItem.objectType;
                            console.log(' -- changeref '+ event.menuItem.objectType);
                            refreshGrid(event.menuItem.method);
                        } else if( event.menuItem.actionExecution == "inputform"){
                            openAddPopup(event.menuItem.method, objectTypeRef,event.recid, 'gridRef', event.recid,objectTypeRef, 'inputForm');
                        }else if( event.menuItem.actionExecution == "service" ||  event.menuItem.actionExecution == "method"){
                        	//console.log(event);
                        	event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                        	
                            executeMenuAction(event,   w2ui['gridRef<?php echo $this->viewId;?>'].getSelection(), parentId); 
                        }
                        else{
                       	 var objectTypeRef = w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef;
                      	    //console.log(event );
                            w2ui['layoutMain'].load(
                                'main',
                                $('#urlAjax').val()+"/view/"+event.menuItem.text+
                                "?layout=layoutMain&parentType="+parentType+
                                "&parentId="+parentId+
                                "&viewId="+event.menuItem.id+"&objectId="+event.recid
                            );
                        }
                        
                    }
                },
                onClick : function (event){
                	w2ui['gridRef<?php echo $this->viewId;?>'].lock('Loading...', true); 
                 	event.onComplete = function () {
                  	var sel = w2ui['gridRef<?php echo $this->viewId;?>'].getSelection();
                  	if(sel.length == 1){   
                      	//console.log(STORAGE["<?php echo $this->viewId;?>"].MAP)  ;     
                  		if(STORAGE["<?php echo $this->viewId;?>"].MAP == true){
                  			//var row = w2ui['gridRef<?php echo $this->viewId;?>'].get(sel);
                 			 makeMapSelection(w2ui['gridRef<?php echo $this->viewId;?>'], sel);
              		        //makeMapSelection(row);
                  	    }   	
                  		    //console.log(STORAGE);
                     	    var sel = w2ui['gridRef<?php echo $this->viewId;?>'].getSelection();
                     	    if( sel == oldSelection ) {}
                         	else{
                   	         // simpleReloadGridData('gridRef',  w2ui['gridRef<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef, true ); 
                      	      if(STORAGE['gridRef<?php echo $this->viewId;?>'].link == "2" ){
                     	    	   simpleReloadGridData('gridRef2',  w2ui['gridRef2<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef, true );
                      	    	   w2ui['gridRef2<?php echo $this->viewId;?>'].parentId =event.recid; 
                      	      }
                   	          oldSelection = sel;     
                              //w2ui['gridRef<?php echo $this->viewId;?>'].parentId =event.recid;
                                if(STORAGE['gridRef<?php echo $this->viewId;?>'].link == "3" ){
                                    if(w2ui['gridRef3<?php echo $this->viewId;?>'] != undefined){
                                        simpleReloadGridData('gridRef3',  w2ui['gridRef3<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef3<?php echo $this->viewId;?>'].objectTypeRef, true );
                                        w2ui['gridRef3<?php echo $this->viewId;?>'].parentId =event.recid;
                                    }
                                }
                         	}      	                	
                                
                   	 }else {
                     	  oldSelection = 0;
                      }
                  	  w2ui['gridRef<?php echo $this->viewId;?>'].unlock();   
                    } 
                  },
                onDblClick: function(event){   
               	 event.onComplete = function () {     
               	  var objectTypeRef = w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef;
                  var parentType = w2ui['gridRef<?php echo $this->viewId;?>'].parentType;
                  var parentId  =w2ui['gridRef<?php echo $this->viewId;?>'].parentId;
                  openAddPopup(objectTypeRef, parentType,parentId, 'gridRef', event.recid,objectTypeRef, 'edit');
               	 }      
                },
                onRefresh: function(event) {
              	  if( w2ui['gridRef<?php echo $this->viewId;?>'].mainObjectTypeRef != undefined)
              	  {
                	  w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef = w2ui['gridRef<?php echo $this->viewId;?>'].mainObjectTypeRef ;
                      w2ui['gridRef<?php echo $this->viewId;?>'].url =  w2ui['gridRef<?php echo $this->viewId;?>'].backupUrl ;
              	  }
                  event.onComplete = function () {
                        w2ui['gridRef<?php echo $this->viewId;?>'].select(w2ui['gridRef<?php echo $this->viewId;?>'].last.click_recid);
                        w2ui['gridRef<?php echo $this->viewId;?>'].scrollIntoView(w2ui['gridRef<?php echo $this->viewId;?>'].getSelection(true));
                   }
                },
                onStateSave : function (event) {
                    //console.log(event);
                    $.ajax({
                        type : 'POST',
                        url: $('#urlAjax').val()+"/savestate",
                        data :  {
                            "view" : "<?php echo $this->viewId;?>",
                            "grid": 'gridRef',
                            "data" : event.state,
                            "columns" : event.columns
                        },
                        success:$.proxy(function(result){

                        }, this),
                        dataType : 'json'
                    });

                },
                onSelect: function (event) {
                    event.onComplete = function () {
                 	    var sel = w2ui['gridRef<?php echo $this->viewId;?>'].getSelection();
                  	    //console.log('select '+sel.length);
                    	if( sel.length > 1 ){       
                   		   if(STORAGE['gridRef<?php echo $this->viewId;?>'].link == "3" ){
                                simpleReloadGridData('gridRef3',  w2ui['gridRef3<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef3<?php echo $this->viewId;?>'].objectTypeRef, true );
                                w2ui['gridRef3<?php echo $this->viewId;?>'].parentId =event.recid;
                            }    
                    		else {
                    			var sel = w2ui['gridRef<?php echo $this->viewId;?>'].getSelection();
                        		  simpleReloadGridData('gridRef2', w2ui['gridRef2<?php echo $this->viewId;?>'].parentType,  sel,w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef, true ); 
                                  w2ui['gridRef2<?php echo $this->viewId;?>'].parentId = 0; 
                    		}           		
                    		
                  		                          
                    	 }
                    }
                },
                
                onUnselect : function (event) {               
                    event.onComplete = function () {
                 	    var sel = w2ui['gridRef<?php echo $this->viewId;?>'].getSelection();
                  	    //console.log('select '+sel.length);
                        if( sel.length > 0 ){  
                       	 if(STORAGE['gridRef<?php echo $this->viewId;?>'].link == "3" ){
                                simpleReloadGridData('gridRef3',  w2ui['gridRef3<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef3<?php echo $this->viewId;?>'].objectTypeRef, true );
                                w2ui['gridRef3<?php echo $this->viewId;?>'].parentId =event.recid;
                            }    
                    		else {        
                  		      var sel = w2ui['gridRef<?php echo $this->viewId;?>'].getSelection();   
                    		   simpleReloadGridData('gridRef2', w2ui['gridRef2<?php echo $this->viewId;?>'].parentType,  sel,w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef, true ); 
                              w2ui['gridRef2<?php echo $this->viewId;?>'].parentId = 0;
                    		}
                    	}              	 
                  }
                },
                onSearch : function (event) {               
                    event.onComplete = function () {
                       //console.log(event);
                    	if(STORAGE['gridRef<?php echo $this->viewId;?>'].link == "3" ){
                       		 w2ui['gridRef<?php echo $this->viewId;?>'].searchData =event.searchData ;
                             w2ui['gridRef<?php echo $this->viewId;?>'].searchField =event.searchField ;
                             w2ui['gridRef3<?php echo $this->viewId;?>'].clear() ;
                        }    
                		else {
                             w2ui['gridRef<?php echo $this->viewId;?>'].searchData =event.searchData ;
                             w2ui['gridRef<?php echo $this->viewId;?>'].searchField =event.searchField ;
                             w2ui['gridRef2<?php echo $this->viewId;?>'].clear() ;
                		}
                    }
                },
            },
            gridRef2: {
                name: 'gridRef2<?php echo $this->viewId;?>',
                show: {
                    toolbar            : true,
                    header : true,
                    selectColumn: true,
                    footer    : true,
                    lineNumbers : true,
                    //expandColumn: this.expandChildren,
                },
                reorderColumns: true,
                multiSearch : true,
                searches: [{ field: 'recid', caption: 'ID ', type: 'int' }],
                //onExpand: function (event) {
                //    console.log(event);
                //    createTempChildGrid(event,this,  this.objectTypeRef , this.expandDefinition);

                //},
                toolbar: {
                    items: [
                        {
                            type :  'menu', id:'menu', caption:  '<?php echo $this->translate('Menu'); ?>', icon: 'fa-table'
                        }
                    ],
                    onClick: function (event) {
                        var objectTypeRef = w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef;
                        var parentType = w2ui['gridRef2<?php echo $this->viewId;?>'].parentType;
                        var parentId  =w2ui['gridRef2<?php echo $this->viewId;?>'].parentId;
                        if (event.target == 'menu:add') {
                            //console.log(parentType );
                            //todo check if parent id - if not then error must select first
                            if( !parentType ){
                            	$('#form').w2overlay(
                            	     '<div class="w2ui-centered"><div style="padding: 10px;">'+
                            	             '        No selection  '+
                            	             '</div></div>'
                            	);
                            }else
                            {
                               openAddPopup(objectTypeRef,parentType,parentId,'gridRef2', parentId,parentType, "new");
                            }
                        }
                        else if (event.target == 'menu:delete') { 
                        	w2confirm('<?php echo $this->translate('are_you_sure'); ?>', function btn(answer) { 
                            	if(answer=='Yes')
                                { // Yes or No -- case-sensative
                            w2ui['gridRef2<?php echo $this->viewId;?>'].lock('Loading...', true);
                            var objectTypeRef = w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef;
                            //console.log(objectTypeRef);
                            $.ajax({
                                type : 'POST',
                                url: $('#urlAjax').val()+"/deleteobjects",
                                data :  {
                                    "objectType" : ""+objectTypeRef,
                                    "data" : w2ui['gridRef2<?php echo $this->viewId;?>'].getSelection(),
                                    "parentId": w2ui['gridRef2<?php echo $this->viewId;?>'].parentId,
                                    "parentType" : ""+w2ui['gridRef2<?php echo $this->viewId;?>'].parentType
                                },
                                success:$.proxy(function(result){
                                    w2ui['gridRef2<?php echo $this->viewId;?>'].unlock();
                                    if(result.success) {
                                        //refresh the page after delete the field
                                        simpleReloadGridData('gridRef',w2ui['gridRef<?php echo $this->viewId;?>'].parentType, w2ui['gridRef<?php echo $this->viewId;?>'].parentId,w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef, true);                                   
                                        //refresh the page after delete the field
                                        simpleReloadGridData('gridRef2',w2ui['gridRef2<?php echo $this->viewId;?>'].parentType, w2ui['gridRef2<?php echo $this->viewId;?>'].parentId,objectTypeRef ,true);

                                    }
                                }, this),
                                dataType : 'json'
                            });     
                                }
                        	});              
                       }
                        else if (event.target == 'menu:add-field') {
                            openPopup(objectTypeRef);
                        }
                        else if (event.target == 'menu:undo') {  
                        	undoGrid(parentType , parentId, "gridRef2");
                        }
                        else if (event.target == 'menu:export') {
                     	   var serachString= JSON.stringify(w2ui['gridRef2<?php echo $this->viewId;?>'].searchData);
                      	   var searchField= JSON.stringify(w2ui['gridRef2<?php echo $this->viewId;?>'].searchField);
                      	   var sortData= JSON.stringify(w2ui['gridRef2<?php echo $this->viewId;?>'].sortData);
                            window.location = $('#urlAjax').val()+
                            "/export?object=get"+objectTypeRef+
                            "&viewId="+"<?php echo $this->viewId?>"+
                            "&gridId="+'gridRef2'+
                            "&parentObject="+parentType+
                            "&parentId="+parentId+
                            "&searchData="+serachString+
                            "&searchField="+searchField+
                            "&sortData="+sortData;
                        } else {
                            //console.log(event);
                            //id = event.recid
                            var idTo = parentId;
                            if( event.subItem != undefined ){
                                event.menuItem = [];
                             	event.menuItem = event.subItem;
                                event.menuItem.parentId = parentType;
                           	    event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                            	var nameG = 'gridRef2';
                                executeMenuActivity( event.menuItem, idTo , nameG);
                             }
                          }
                    }
                },
                onSearch : function (event) {               
                    event.onComplete = function () {
                       //console.log(event);
                       w2ui['gridRef2<?php echo $this->viewId;?>'].searchData =event.searchData ;
                       w2ui['gridRef2<?php echo $this->viewId;?>'].searchField =event.searchField ;
                    }
                },
                menu: [
                ],
                onMenuClick: function(event) {
                    var objectTypeRef = w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef;
                    var parentType = w2ui['gridRef2<?php echo $this->viewId;?>'].parentType;
                    var parentId  =w2ui['gridRef2<?php echo $this->viewId;?>'].parentId;
                    if (event.menuItem.id == 1) {
                        openAddPopup(objectTypeRef, parentType,parentId, 'gridRef2', event.recid,objectTypeRef,"edit");
                    }  else if (event.menuItem.id != '') { 
                    	if( event.menuItem.actionExecution == "popup"){
                            //
                        	//console.log('start popup'+event.menuItem.viewId+" -- "+parentId);
                            //popup(""+event.menuItem.viewId, ""+event.menuItem.parentType, ""+event.menuItem.objectType,""+event.menuItem.method,""+parentId);    
                            popup(""+event.menuItem.viewId, objectTypeRef, event.recid, ""+event.menuItem.parentType,""+event.menuItem.objectType,""+event.menuItem.method);     
                                                      
                        } else if( event.menuItem.actionExecution == "inputform"){
                            //console.log(" input form " + objectTypeRef);
                            //console.log(event);
                            openAddPopup(event.menuItem.method, objectTypeRef,event.recid, 'gridRef2', event.recid,objectTypeRef, 'inputForm');
                        } else if( event.menuItem.actionExecution == "service" ||  event.menuItem.actionExecution == "method"){
                        	//console.log('start service'+event);
                           	event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                            executeMenuAction(event, w2ui['gridRef2<?php echo $this->viewId;?>'].getSelection(), parentId);
                        }
                        else{                   
                       	 var objectTypeRef = w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef;
                      	    //console.log(event );
                            w2ui['layoutMain'].load(
                                'main',
                                $('#urlAjax').val()+"/view/"+event.menuItem.text+
                                "?layout=layoutMain&parentType="+parentType+
                                "&parentId="+parentId+
                                "&viewId="+event.menuItem.id+"&objectId="+event.recid
                            );  
                        }
                    }
                },
                onClick : function (event){
                    //      w2ui['gridRef<?php echo $this->viewId;?>'].lock('Loading...', true); 
                     	 event.onComplete = function () {
                        selection1= w2ui['gridRef2<?php echo $this->viewId;?>'].getSelection();
                  		//w2ui['gridRef<?php echo $this->viewId;?>'].lock('Loading...', true); 
                      	var sel = w2ui['gridRef2<?php echo $this->viewId;?>'].getSelection();
                      	var objectTypeRef = w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef;
                        var parentType = w2ui['gridRef2<?php echo $this->viewId;?>'].parentType;
                        var parentId  =w2ui['gridRef2<?php echo $this->viewId;?>'].parentId;
                      	if(sel.length == 1){           
                      		//console.log(STORAGE["<?php echo $this->viewId;?>"].MAP)  ;  	
                     		   
                         	    var sel = w2ui['gridRef2<?php echo $this->viewId;?>'].getSelection();
                          	   //console.log("SELEEL");
                         	    if( sel == oldSelection ) {}
                             	else{
                             		//console.log(STORAGE);
                                    if(STORAGE['gridRef2<?php echo $this->viewId;?>'].link == "4" ){
                                        simpleReloadGridData('gridRef4',  w2ui['gridRef4<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef4<?php echo $this->viewId;?>'].objectTypeRef, true );
                                        w2ui['gridRef4<?php echo $this->viewId;?>'].parentId =event.recid;
                                    }
                         	        var url= $('#urlAjax').val()+"/getMethodResult?objectType="+parentType+"&methodName=get"+objectTypeRef+"&id="+parentId+"&viewId="+"<?php echo $this->viewId; ?>";
                                   
                                    makeMapSelection(w2ui['gridRef2<?php echo $this->viewId;?>'], url , true, true);
                                	var itemO = w2ui['gridRef2<?php echo $this->viewId;?>'].get(sel);
                             		//console.log(itemO);
                                 	// Select the time range and resource slot.
                                    if(SCHEDULER_AP == false) {
                                        var currentView = getSchedulerView();
                                    }
                             		
                             		var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");

                             		if(itemO[0].startdate){
                             			//console.log("selecting..");
                                 		var sDate = moment(itemO[0].startdate, "DD-MM-YYYY");
                                 		//console.log(sDate);
                                 		
                                 		scheStartDate = scheduler.view().startDate() ;
                                 		scheEndDate = scheduler.view().endDate() ;
                                 		var timeout = 0;
                                 		var recId  = itemO[0].recid;
                                 		if(sDate <= scheEndDate && sDate >= scheStartDate ){
                                 			//console.log("no time out");
                                 			var sDate1 = moment(new Date(sDate)).format('YYYY/MM/DD');
                                      	//var sDate = moment(itemO[0].startdate, "DD-MM-YYYY");
                                      	//console.log(sDate1);
                                      	
                                      	//scheduler.date(new Date(sDate1));
                                      // Fire the mousedown event in order to select this specific event.
                                      	//console.log("searchng");
                                      	//var el =  $("#scheduler").data("kendoScheduler").filter( { field: "id", operator: "startswith", value: itemO[0].recid });
                                      	//console.log(el);
                                      	var el1   = scheduler.dataSource.get(recId);
                                      	//console.log(el1);
                                      
                                      //returnArray.data.CustomerId = options.models[0].CustomerId;
                                          var strEval = "el1."+ RESOURCE_DEF;
                                      	var valEval = eval("("+strEval+ ")");
                                      	
                                      	//console.log(el1.uid);
                                      	scheduler.select({
                                              start:  new Date(el1.start),
                                              //end: new Date(el1.end),
                                              isAllDay: true,
                                              resources: { RESOURCE_DEF: valEval },
                                             // events:[el1.uid]
                                          });
                                      	//$("#scheduler").data("kendoScheduler").select(el1.uid);
                                          //console.log('selecting '+ el1.uid);
                                      	scheduler.element.find("[data-uid='" + el1.uid + "']").trigger("mousedown");
                                      	
                                      	}else{
                                     		   //console.log("nav to ..");
                                        		timeout = 50;
                                       		 updateScheduler(sDate,currentView, itemO[0].recid);
                                        		scheduler.dataSource.sync().then(function () {
                                        		scheduler.dataSource.one("requestEnd", function (e) {
                                          		 
                                         	        if (e.type !== "read") return;
                                         	 
                                         	        scheduler.one("dataBound", function (e) {
                                         	 
                                            	    setTimeout(function() {
                                                  	//console.log("intime out");
                                                  	//var sDate1 = kendo.toString(new Date(sDate), "yyyy/MM/dd");
                                                  	var sDate1 = moment(new Date(sDate)).format('YYYY/MM/DD');
                                                  	
                                                  	//var sDate = moment(itemO[0].startdate, "DD-MM-YYYY");
                                                  	//console.log(sDate1);
                                                  	var d = new Date(sDate1);
                                                  	d.setHours(15);
                                                  	//console.log(d);
                                                  	$("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").date(d);
                                                  // Fire the mousedown event in order to select this specific event.
                                                  	//console.log("searchng");
                                                  	//var el =  $("#scheduler").data("kendoScheduler").filter( { field: "id", operator: "startswith", value: itemO[0].recid });
                                                  	//console.log(el);
                                                  	var el1   = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").dataSource.get(recId);
                                                  	//console.log("finding element");
                                                  	if(!el1) return;
                                                  	//console.log(el1);
                                                 	 var strEval = "el1."+ RESOURCE_DEF;
                                                	var valEval = eval("("+strEval+ ")");
                                                	
                                                  //returnArray.data.CustomerId = options.models[0].CustomerId;
                                                  	
                                                  	$("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").select({
                                                          start:  el1.start,
                                                          //end: el1.end,
                                                          isAllDay: true,
                                                          resources: { RESOURCE_DEF: valEval },//{ Customer: el1.Customer },
                                                         // events:[el1.uid]
                                                      });
                                                  	//$("#scheduler").data("kendoScheduler").select(el1.uid);
                                                  	$("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").element.find("[data-uid='" + el1.uid + "']").trigger("mousedown");
                                                  	//$("#scheduler").data("kendoScheduler").unbind("dataBound");
                                                      /*$("#scheduler").data("kendoScheduler").dataSource.fetch(function(MAINDATE) {
                                                      	console.log("ada");
                                                      	$("#scheduler").data("kendoScheduler").dataSource.read( e.date); // displays "77"
                                                    	})*/
                                                  	//console.log("end selecting..");
                                                    }, timeout);
                                         	        });
                                         		});
                                        		});
                                  		  
                                  		   
                                 		}
                                 		
                                 		
                                      
              					}
                              	
                              }      	                	
                             
                             oldSelection == sel;          
                       	 }else {
                         	  oldSelection = 0;
                           }
                      	//w2ui['gridRef<?php echo $this->viewId;?>'].unlock();
                        } 
                      },
                
                onDblClick: function(event){ 
                    
                   event.onComplete = function () {
              	     var objectTypeRef = w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef;
                     var parentType = w2ui['gridRef2<?php echo $this->viewId;?>'].parentType;
                     var parentId  =w2ui['gridRef2<?php echo $this->viewId;?>'].parentId;
                     openAddPopup(objectTypeRef, parentType,parentId, 'gridRef2', event.recid,objectTypeRef,"edit");     
                   }
                },
            
                onRefresh: function(event) {
              	  if( w2ui['gridRef2<?php echo $this->viewId;?>'].mainObjectTypeRef != undefined)
              	  {
                	  w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef = w2ui['gridRef2<?php echo $this->viewId;?>'].mainObjectTypeRef ;
                      w2ui['gridRef2<?php echo $this->viewId;?>'].url =  w2ui['gridRef2<?php echo $this->viewId;?>'].backupUrl ;
              	  }

               	 event.onComplete = function () {
                     w2ui['gridRef2<?php echo $this->viewId;?>'].select(w2ui['gridRef2<?php echo $this->viewId;?>'].last.click_recid);
                     w2ui['gridRef2<?php echo $this->viewId;?>'].scrollIntoView(w2ui['gridRef2<?php echo $this->viewId;?>'].getSelection(true));
                }
                },
                onSelect: function (event) {
              	  event.onComplete = function () {
                      var sel = w2ui['gridRef2<?php echo $this->viewId;?>'].getSelection();
                      //console.log('SELECT '+ STORAGE['gridRef2<?php echo $this->viewId;?>'].link + ' is refreshed');
                      if( sel.length > 1 ){
                    	  if(STORAGE['gridRef2<?php echo $this->viewId;?>'].link == "4" ){
                    		  //console.log('SELECT1 '+ STORAGE['gridRef2<?php echo $this->viewId;?>'].link + ' is refreshed');
                              simpleReloadGridData('gridRef4',  w2ui['gridRef4<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef4<?php echo $this->viewId;?>'].objectTypeRef, true );
                              w2ui['gridRef4<?php echo $this->viewId;?>'].parentId =event.recid;
                        }
                  	      makeMapSelection(w2ui['gridRef2<?php echo $this->viewId;?>'], sel, true, true);
                    	  
                      }
                    selectedRef2Items.push(event.recid);
              	  }
                },
                onUnselect : function (event) {
               	 event.onComplete = function () {
                	var sel = w2ui['gridRef2<?php echo $this->viewId;?>'].getSelection();
                    if( sel.length > 0 ){
                  	 
                	      makeMapSelection(w2ui['gridRef2<?php echo $this->viewId;?>'], sel);
                	      if(STORAGE['gridRef2<?php echo $this->viewId;?>'].link == "4" ){
                              simpleReloadGridData('gridRef4',  w2ui['gridRef4<?php echo $this->viewId;?>'].parentType, sel,w2ui['gridRef4<?php echo $this->viewId;?>'].objectTypeRef, true );
                              w2ui['gridRef4<?php echo $this->viewId;?>'].parentId =event.recid;
                          } 
                    }
               	 }
                },

                onSearch : function (event) {
               	    w2ui['gridRef2<?php echo $this->viewId;?>'].searchData =event.searchData ;
                    w2ui['gridRef2<?php echo $this->viewId;?>'].searchField =event.searchField ;
                   	 if(STORAGE['gridRef2<?php echo $this->viewId;?>'].link == "4" ){
                          w2ui['gridRef4<?php echo $this->viewId;?>'].clear();
                      } 
                },       
                onStateSave : function (event) {
                    //console.log(event);
                    $.ajax({
                        type : 'POST',
                        url: $('#urlAjax').val()+"/savestate",
                        data :  {
                            "view" : "<?php echo $this->viewId;?>",
                            "grid": 'gridRef2',
                            "data" : event.state,
                            "columns" : event.columns
                        },
                        success:$.proxy(function(result){

                        }, this),
                        dataType : 'json'
                    });

                }
            },
             gridRef3: {
                 name: 'gridRef3<?php echo $this->viewId;?>',
                 show: {
                     toolbar            : true,
                     header : true,
                     selectColumn: true,
                     footer    : true,
                     expandColumn: this.expandChildren
                 },
                 reorderColumns: true,
                 multiSearch : true,
                 searches: [{ field: 'recid', caption: 'ID ', type: 'int' }],
                // onExpand: function (event) {
                 //    console.log(event);
                 //    createTempChildGrid(event,this,  this.objectTypeRef , this.expandDefinition);
                 //},
                 toolbar: {
                     items: [
                         {
                             type :  'menu', id:'menu', caption:  '<?php echo $this->translate('Menu'); ?>', icon: 'fa-table'
                             
                         }
                     ],
                     onClick: function (event) {
                         var objectTypeRef = w2ui['gridRef3<?php echo $this->viewId;?>'].objectTypeRef;
                         var parentType = w2ui['gridRef3<?php echo $this->viewId;?>'].parentType;
                         var parentId  =w2ui['gridRef3<?php echo $this->viewId;?>'].parentId;
                         if (event.target == 'menu:add') {
                             //console.log(parentType );
                             //todo check if parent id - if not then error must select first
                             if( !parentType ){
                                 $('#form').w2overlay(
                                     '<div class="w2ui-centered"><div style="padding: 10px;">'+
                                     '        No selection  '+
                                     '</div></div>'
                                 );
                             }else
                             {
                                 openAddPopup(objectTypeRef,parentType,parentId,'gridRef3', parentId,parentType, "new");
                             }
                         }
                         else if (event.target == 'menu:delete') {
                             w2confirm('<?php echo $this->translate('are_you_sure'); ?>', function btn(answer) {
                                 if(answer=='Yes')
                                 { // Yes or No -- case-sensative
                                     w2ui['gridRef3<?php echo $this->viewId;?>'].lock('Loading...', true);
                                     var objectTypeRef = w2ui['gridRef3<?php echo $this->viewId;?>'].objectTypeRef;
                                     //console.log(objectTypeRef);
                                     $.ajax({
                                         type : 'POST',
                                         url: $('#urlAjax').val()+"/deleteobjects",
                                         data :  {
                                             "objectType" : ""+objectTypeRef,
                                             "data" : w2ui['gridRef3<?php echo $this->viewId;?>'].getSelection(),
                                             "parentId": w2ui['gridRef3<?php echo $this->viewId;?>'].parentId,
                                             "parentType" : ""+w2ui['gridRef3<?php echo $this->viewId;?>'].parentType
                                         },
                                         success:$.proxy(function(result){
                                             w2ui['gridRef3<?php echo $this->viewId;?>'].unlock();
                                             if(result.success) {
                                                 //refresh the page after delete the field
                                                 simpleReloadGridData('gridRef',w2ui['gridRef<?php echo $this->viewId;?>'].parentType, w2ui['gridRef<?php echo $this->viewId;?>'].parentId,w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef, true);
                                                 //refresh the page after delete the field
                                                 simpleReloadGridData('gridRef3',w2ui['gridRef3<?php echo $this->viewId;?>'].parentType, w2ui['gridRef3<?php echo $this->viewId;?>'].parentId,objectTypeRef ,true);

                                             }
                                         }, this),
                                         dataType : 'json'
                                     });
                                 }
                             });
                         }
                         else if (event.target == 'menu:add-field') {
                             openPopup(objectTypeRef);
                         }
                         else if (event.target == 'menu:undo') {  
                          	undoGrid(parentType , parentId, "gridRef3");
                         }
                         else if (event.target == 'menu:export') {
                             var serachString= JSON.stringify(w2ui['gridRef3<?php echo $this->viewId;?>'].searchData);
                             var searchField= JSON.stringify(w2ui['gridRef3<?php echo $this->viewId;?>'].searchField);
                             var sortData= JSON.stringify(w2ui['gridRef3<?php echo $this->viewId;?>'].sortData);
                             window.location = $('#urlAjax').val()+
                                 "/export?object=get"+objectTypeRef+
                                 "&viewId="+"<?php echo $this->viewId?>"+
                                 "&gridId="+'gridRef3'+
                                 "&parentObject="+parentType+
                                 "&parentId="+parentId+
                                 "&searchData="+serachString+
                                 "&searchField="+searchField+
                                 "&sortData="+sortData;
                         } else {
                             //console.log(event);
                             //id = event.recid
                             var idTo = parentId;
                             if( event.subItem != undefined ){
                                 event.menuItem = [];
                              	 event.menuItem = event.subItem;
                                 event.menuItem.parentId = parentType;
                            	 event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                             	 var nameG = 'gridRef3';
                                 executeMenuActivity( event.menuItem, idTo , nameG);
                              }
                           }
                     }
                 },
                 onSearch : function (event) {
                     event.onComplete = function () {
                         //console.log(event);
                         w2ui['gridRef3<?php echo $this->viewId;?>'].searchData =event.searchData ;
                         w2ui['gridRef3<?php echo $this->viewId;?>'].searchField =event.searchField ;
                     }
                 },
                 menu: [
                 ],
                 onMenuClick: function(event) {
                     var objectTypeRef = w2ui['gridRef3<?php echo $this->viewId;?>'].objectTypeRef;
                     var parentType = w2ui['gridRef3<?php echo $this->viewId;?>'].parentType;
                     var parentId  =w2ui['gridRef3<?php echo $this->viewId;?>'].parentId;
                     if (event.menuItem.id == 1) {
                         openAddPopup(objectTypeRef, parentType,parentId, 'gridRef3', event.recid,objectTypeRef,"edit");
                     }  else if (event.menuItem.id != '') {
                         if( event.menuItem.actionExecution == "popup"){
                             //
                             //console.log('start popup'+event.menuItem.viewId+" -- "+parentId);
                             //popup(""+event.menuItem.viewId, ""+event.menuItem.parentType, ""+event.menuItem.objectType,""+event.menuItem.method,""+parentId);
                             popup(""+event.menuItem.viewId, objectTypeRef, event.recid, ""+event.menuItem.parentType,""+event.menuItem.objectType,""+event.menuItem.method,""+event.menuItem.template);

                         } else if( event.menuItem.actionExecution == "inputform"){
                             openAddPopup(event.menuItem.method, parentType,event.recid, 'gridRef3', event.recid,objectTypeRef, 'inputForm');
                         } else if( event.menuItem.actionExecution == "service" ||  event.menuItem.actionExecution == "method"){
                             //console.log('start service'+event);
                             event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                             executeMenuAction(event, w2ui['gridRef3<?php echo $this->viewId;?>'].getSelection(), parentId);
                         }
                         else{
                             var objectTypeRef = w2ui['gridRef3<?php echo $this->viewId;?>'].objectTypeRef;
                             //console.log(event );
                             w2ui['layoutMain'].load(
                                 'main',
                                 $('#urlAjax').val()+"/view/"+event.menuItem.text+
                                 "?layout=layoutMain&parentType="+parentType+
                                 "&parentId="+parentId+
                                 "&viewId="+event.menuItem.id+"&objectId="+event.recid
                             );
                         }
                     }
                 },
                 onClick: function(event) {
                     event.onComplete = function () {
                         var sel = this.getSelection();
                     }
                 },

                 onDblClick: function(event){

                     event.onComplete = function () {
                         var objectTypeRef = w2ui['gridRef3<?php echo $this->viewId;?>'].objectTypeRef;
                         var parentType = w2ui['gridRef3<?php echo $this->viewId;?>'].parentType;
                         var parentId  =w2ui['gridRef3<?php echo $this->viewId;?>'].parentId;
                         openAddPopup(objectTypeRef, parentType,parentId, 'gridRef3', event.recid,objectTypeRef,"edit");
                     }
                 },

                 onRefresh: function(event) {
                	event.onComplete = function () {
                         w2ui['gridRef3<?php echo $this->viewId;?>'].select(w2ui['gridRef3<?php echo $this->viewId;?>'].last.click_recid);
                         w2ui['gridRef3<?php echo $this->viewId;?>'].scrollIntoView(w2ui['gridRef3<?php echo $this->viewId;?>'].getSelection(true));
                    }
                 },
                 onSelect: function (event) {
                    // selectedRef3Items.push(event.recid);
                 },
                 onUnselect : function (event) {

                 },

                 onSearch : function (event) {
                     //console.log(event);
                 },
                 onStateSave : function (event) {
                     //console.log(event);
                     $.ajax({
                         type : 'POST',
                         url: $('#urlAjax').val()+"/savestate",
                         data :  {
                             "view" : "<?php echo $this->viewId;?>",
                             "grid": 'gridRef3',
                             "data" : event.state,
                             "columns" : event.columns
                         },
                         success:$.proxy(function(result){

                         }, this),
                         dataType : 'json'
                     });

                 }
             },

             gridRef4: {
                 name: 'gridRef4<?php echo $this->viewId;?>',
                 show: {
                     toolbar            : true,
                     header : true,
                     selectColumn: true,
                     footer    : true,
                     expandColumn: this.expandChildren
                 },
                 reorderColumns: true,
                 multiSearch : true,
                 searches: [{ field: 'recid', caption: 'ID ', type: 'int' }],
                // onExpand: function (event) {
                //     console.log(event);
                //     createTempChildGrid(event,this,  this.objectTypeRef , this.expandDefinition);

                 //},
                 toolbar: {
                     items: [
                         {
                             type :  'menu', id:'menu', caption:  '<?php echo $this->translate('Menu'); ?>', icon: 'fa-table'
                         }
                     ],
                     onClick: function (event) {
                         var objectTypeRef = w2ui['gridRef4<?php echo $this->viewId;?>'].objectTypeRef;
                         var parentType = w2ui['gridRef4<?php echo $this->viewId;?>'].parentType;
                         var parentId  =w2ui['gridRef4<?php echo $this->viewId;?>'].parentId;
                         if (event.target == 'menu:add') {
                             //  console.log(parentType );
                             //todo check if parent id - if not then error must select first
                             if( !parentType ){
                                 $('#form').w2overlay(
                                     '<div class="w2ui-centered"><div style="padding: 10px;">'+
                                     '        No selection  '+
                                     '</div></div>'
                                 );
                             }else
                             {
                                 openAddPopup(objectTypeRef,parentType,parentId,'gridRef4', parentId,parentType, "new");
                             }
                         }
                         else if (event.target == 'menu:delete') {
                             w2confirm('<?php echo $this->translate('are_you_sure'); ?>', function btn(answer) {
                                 if(answer=='Yes')
                                 { // Yes or No -- case-sensative
                                     w2ui['gridRef4<?php echo $this->viewId;?>'].lock('Loading...', true);
                                     var objectTypeRef = w2ui['gridRef4<?php echo $this->viewId;?>'].objectTypeRef;
                                     //console.log(objectTypeRef);
                                     $.ajax({
                                         type : 'POST',
                                         url: $('#urlAjax').val()+"/deleteobjects",
                                         data :  {
                                             "objectType" : ""+objectTypeRef,
                                             "data" : w2ui['gridRef4<?php echo $this->viewId;?>'].getSelection(),
                                             "parentId": w2ui['gridRef4<?php echo $this->viewId;?>'].parentId,
                                             "parentType" : ""+w2ui['gridRef4<?php echo $this->viewId;?>'].parentType
                                         },
                                         success:$.proxy(function(result){
                                             w2ui['gridRef4<?php echo $this->viewId;?>'].unlock();
                                             if(result.success) {
                                                 //refresh the page after delete the field
                                                 simpleReloadGridData('gridRef',w2ui['gridRef<?php echo $this->viewId;?>'].parentType, w2ui['gridRef<?php echo $this->viewId;?>'].parentId,w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef, true);
                                                 //refresh the page after delete the field
                                                 simpleReloadGridData('gridRef4',w2ui['gridRef4<?php echo $this->viewId;?>'].parentType, w2ui['gridRef4<?php echo $this->viewId;?>'].parentId,objectTypeRef ,true);

                                             }
                                         }, this),
                                         dataType : 'json'
                                     });
                                 }
                             });
                         }
                         else if (event.target == 'menu:add-field') {
                             openPopup(objectTypeRef);
                         }
                         else if (event.target == 'menu:undo') {  
                          	undoGrid(parentType , parentId, "gridRef4");
                          }
                         else if (event.target == 'menu:export') {
                             var serachString= JSON.stringify(w2ui['gridRef4<?php echo $this->viewId;?>'].searchData);
                             var searchField= JSON.stringify(w2ui['gridRef4<?php echo $this->viewId;?>'].searchField);
                             var sortData= JSON.stringify(w2ui['gridRef4<?php echo $this->viewId;?>'].sortData);
                             window.location = $('#urlAjax').val()+
                                 "/export?object=get"+objectTypeRef+
                                 "&viewId="+"<?php echo $this->viewId?>"+
                                 "&gridId="+'gridRef4'+
                                 "&parentObject="+parentType+
                                 "&parentId="+parentId+
                                 "&searchData="+serachString+
                                 "&searchField="+searchField+
                                 "&sortData="+sortData;
                         } else {
                            // console.log(event);
                             //id = event.recid
                             var idTo = parentId;
                             if( event.subItem != undefined ){
                                 event.menuItem = [];
                              	 event.menuItem = event.subItem;
                                 event.menuItem.parentId = parentType;
                            	 event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                             	 var nameG = 'gridRef4';
                                 executeMenuActivity( event.menuItem, idTo , nameG);
                              }
                           }
                     }
                 },
                 onSearch : function (event) {
                     event.onComplete = function () {
                         // console.log(event);
                         w2ui['gridRef4<?php echo $this->viewId;?>'].searchData =event.searchData ;
                         w2ui['gridRef4<?php echo $this->viewId;?>'].searchField =event.searchField ;
                     }
                 },
                 menu: [
                 ],
                 onMenuClick: function(event) {
                     var objectTypeRef = w2ui['gridRef4<?php echo $this->viewId;?>'].objectTypeRef;
                     var parentType = w2ui['gridRef4<?php echo $this->viewId;?>'].parentType;
                     var parentId  =w2ui['gridRef4<?php echo $this->viewId;?>'].parentId;
                     if (event.menuItem.id == 1) {
                         openAddPopup(objectTypeRef, parentType,parentId, 'gridRef4', event.recid,objectTypeRef,"edit");
                     }  else if (event.menuItem.id != '') {
                         if( event.menuItem.actionExecution == "popup"){
                             //
                             //   console.log('start popup'+event.menuItem.viewId+" -- "+parentId);
                             //popup(""+event.menuItem.viewId, ""+event.menuItem.parentType, ""+event.menuItem.objectType,""+event.menuItem.method,""+parentId);
                             popup(""+event.menuItem.viewId, objectTypeRef, event.recid, ""+event.menuItem.parentType,""+event.menuItem.objectType,""+event.menuItem.method);

                         } else if( event.menuItem.actionExecution == "inputform"){
                             openAddPopup(event.menuItem.method, objectTypeRef,event.recid, 'gridRef4', event.recid,objectTypeRef, 'inputForm');
                         } else if( event.menuItem.actionExecution == "service" ||  event.menuItem.actionExecution == "method"){
                             //   console.log('start service'+event);
                             event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                             executeMenuAction(event, w2ui['gridRef4<?php echo $this->viewId;?>'].getSelection(), parentId);
                         }
                         else{
                             var objectTypeRef = w2ui['gridRef4<?php echo $this->viewId;?>'].objectTypeRef;
                             //  console.log(event );
                             w2ui['layoutMain'].load(
                                 'main',
                                 $('#urlAjax').val()+"/view/"+event.menuItem.text+
                                 "?layout=layoutMain&parentType="+parentType+
                                 "&parentId="+parentId+
                                 "&viewId="+event.menuItem.id+"&objectId="+event.recid
                             );
                         }
                     }
                 },
                 onClick : function (event){
                     w2ui['gridRef4<?php echo $this->viewId;?>'].lock('Loading...', true);
                     event.onComplete = function () {
                         var sel = w2ui['gridRef4<?php echo $this->viewId;?>'].getSelection();
                         if(sel.length == 1){
                             var sel = w2ui['gridRef4<?php echo $this->viewId;?>'].getSelection();

                             if( sel == oldSelection ) {}
                             else{
                             }

                         }else {
                             oldSelection = 0;
                         }
                         w2ui['gridRef4<?php echo $this->viewId;?>'].unlock();
                     }
                 },

                 onDblClick: function(event){

                     event.onComplete = function () {
                         var objectTypeRef = w2ui['gridRef4<?php echo $this->viewId;?>'].objectTypeRef;
                         var parentType = w2ui['gridRef4<?php echo $this->viewId;?>'].parentType;
                         var parentId  =w2ui['gridRef4<?php echo $this->viewId;?>'].parentId;
                         openAddPopup(objectTypeRef, parentType,parentId, 'gridRef4', event.recid,objectTypeRef,"edit");
                     }
                 },

                 onRefresh: function(event) {
                	 event.onComplete = function () {
                         w2ui['gridRef4<?php echo $this->viewId;?>'].select(w2ui['gridRef4<?php echo $this->viewId;?>'].last.click_recid);
                         w2ui['gridRef4<?php echo $this->viewId;?>'].scrollIntoView(w2ui['gridRef4<?php echo $this->viewId;?>'].getSelection(true));
                    }
                 },
                 onSelect: function (event) {
                     //selectedRef2Items.push(event.recid);
                     event.onComplete = function () {
                         var sel = w2ui['gridRef4<?php echo $this->viewId;?>'].getSelection();
                         if( sel.length > 1 ){
                             w2ui['gridRef4<?php echo $this->viewId;?>'].parentId = 0;
                             var sel = w2ui['gridRef4<?php echo $this->viewId;?>'].getSelection();
                         }
                         // 	w2ui['gridRef<?php echo $this->viewId;?>'].unlock();
                     }
                 },
                 onUnselect : function (event) {
                     event.onComplete = function () {
                         var sel = w2ui['gridRef4<?php echo $this->viewId;?>'].getSelection();
                         if( sel.length > 0 ){
                             var sel = w2ui['gridRef4<?php echo $this->viewId;?>'].getSelection();
                         }
                     }
                 },

                 onSearch : function (event) {
                     // console.log(event);
                 },
                 onStateSave : function (event) {
                     // console.log(event);
                     $.ajax({
                         type : 'POST',
                         url: $('#urlAjax').val()+"/savestate",
                         data :  {
                             "view" : "<?php echo $this->viewId;?>",
                             "grid": 'gridRef4',
                             "data" : event.state,
                             "columns" : event.columns
                         },
                         success:$.proxy(function(result){

                         }, this),
                         dataType : 'json'
                     });

                 }
             },
             gridRef5: {
                 name: 'gridRef5<?php echo $this->viewId;?>',
                 show: {
                     toolbar            : true,
                     header : true,
                     selectColumn: true,
                     footer    : true,
                     expandColumn: this.expandChildren
                 },
                 dragRow: true,

                 reorderColumns: true,
                 multiSearch : true,
                 searches: [{ field: 'recid', caption: 'ID ', type: 'int' }],
                 //onExpand: function (event) {
                 //    console.log(event);
                 //    createTempChildGrid(event,this,  this.objectTypeRef , this.expandDefinition);

                 //},
                 toolbar: {
                     items: [
                         {
                             type :  'menu', id:'menu', caption:  '<?php echo $this->translate('Menu'); ?>', icon: 'fa-table'
                         }
                     ],
                     onClick: function (event) {
                         var objectTypeRef = w2ui['gridRef5<?php echo $this->viewId;?>'].objectTypeRef;
                         var parentType = w2ui['gridRef5<?php echo $this->viewId;?>'].parentType;
                         var parentId  =w2ui['gridRef5<?php echo $this->viewId;?>'].parentId;
                         if (event.target == 'menu:add') {
                             //  console.log(parentType );
                             //todo check if parent id - if not then error must select first
                             if( !parentType ){
                                 $('#form').w2overlay(
                                     '<div class="w2ui-centered"><div style="padding: 10px;">'+
                                     '        No selection  '+
                                     '</div></div>'
                                 );
                             }else
                             {
                                 openAddPopup(objectTypeRef,parentType,parentId,'gridRef5', parentId,parentType, "new");
                             }
                         }
                         else if (event.target == 'menu:delete') {
                             w2confirm('<?php echo $this->translate('are_you_sure'); ?>', function btn(answer) {
                                 if(answer=='Yes')
                                 { // Yes or No -- case-sensative
                                     w2ui['gridRef5<?php echo $this->viewId;?>'].lock('Loading...', true);
                                     var objectTypeRef = w2ui['gridRef5<?php echo $this->viewId;?>'].objectTypeRef;
                                     //console.log(objectTypeRef);
                                     $.ajax({
                                         type : 'POST',
                                         url: $('#urlAjax').val()+"/deleteobjects",
                                         data :  {
                                             "objectType" : ""+objectTypeRef,
                                             "data" : w2ui['gridRef5<?php echo $this->viewId;?>'].getSelection(),
                                             "parentId": w2ui['gridRef5<?php echo $this->viewId;?>'].parentId,
                                             "parentType" : ""+w2ui['gridRef5<?php echo $this->viewId;?>'].parentType
                                         },
                                         success:$.proxy(function(result){
                                             w2ui['gridRef5<?php echo $this->viewId;?>'].unlock();
                                             if(result.success) {
                                                 //refresh the page after delete the field
                                                 simpleReloadGridData('gridRef',w2ui['gridRef<?php echo $this->viewId;?>'].parentType, w2ui['gridRef<?php echo $this->viewId;?>'].parentId,w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef, true);
                                                 //refresh the page after delete the field
                                                 simpleReloadGridData('gridRef5',w2ui['gridRef5<?php echo $this->viewId;?>'].parentType, w2ui['gridRef5<?php echo $this->viewId;?>'].parentId,objectTypeRef ,true);

                                             }
                                         }, this),
                                         dataType : 'json'
                                     });
                                 }
                             });
                         }
                         else if (event.target == 'menu:add-field') {
                             openPopup(objectTypeRef);
                         }
                         else if (event.target == 'menu:undo') {  
                          	undoGrid(parentType , parentId, "gridRef5");
                          }
                         else if (event.target == 'menu:export') {
                             var serachString= JSON.stringify(w2ui['gridRef5<?php echo $this->viewId;?>'].searchData);
                             var searchField= JSON.stringify(w2ui['gridRef5<?php echo $this->viewId;?>'].searchField);
                             var sortData= JSON.stringify(w2ui['gridRef5<?php echo $this->viewId;?>'].sortData);
                             window.location = $('#urlAjax').val()+
                                 "/export?object=get"+objectTypeRef+
                                 "&viewId="+"<?php echo $this->viewId?>"+
                                 "&gridId="+'gridRef4'+
                                 "&parentObject="+parentType+
                                 "&parentId="+parentId+
                                 "&searchData="+serachString+
                                 "&searchField="+searchField+
                                 "&sortData="+sortData;
                         } else {
                             //console.log(event);
                             //id = event.recid
                             var idTo = parentId;
                             if( event.subItem != undefined ){
                                 event.menuItem = [];
                              	 event.menuItem = event.subItem;
                                 event.menuItem.parentId = parentType;
                            	 event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                             	 var nameG = 'gridRef5';
                                 executeMenuActivity( event.menuItem, idTo , nameG);
                              }
                           }
                     }
                 },
                 onSearch : function (event) {
                     event.onComplete = function () {
                         // console.log(event);
                         w2ui['gridRef4<?php echo $this->viewId;?>'].searchData =event.searchData ;
                         w2ui['gridRef4<?php echo $this->viewId;?>'].searchField =event.searchField ;
                     }
                 },
                 menu: [
                 ],
                 onMenuClick: function(event) {
                     var objectTypeRef = w2ui['gridRef5<?php echo $this->viewId;?>'].objectTypeRef;
                     var parentType = w2ui['gridRef5<?php echo $this->viewId;?>'].parentType;
                     var parentId  =w2ui['gridRef5<?php echo $this->viewId;?>'].parentId;
                     if (event.menuItem.id == 1) {
                         openAddPopup(objectTypeRef, parentType,parentId, 'gridRef5', event.recid,objectTypeRef,"edit");
                     }  else if (event.menuItem.id != '') {
                         if( event.menuItem.actionExecution == "popup"){
                             //
                             //   console.log('start popup'+event.menuItem.viewId+" -- "+parentId);
                             //popup(""+event.menuItem.viewId, ""+event.menuItem.parentType, ""+event.menuItem.objectType,""+event.menuItem.method,""+parentId);
                             popup(""+event.menuItem.viewId, objectTypeRef, event.recid, ""+event.menuItem.parentType,""+event.menuItem.objectType,""+event.menuItem.method);

                         } else if( event.menuItem.actionExecution == "inputform"){
                             openAddPopup(event.menuItem.method, objectTypeRef,event.recid, 'gridRef5', event.recid,objectTypeRef, 'inputForm');
                         } else if( event.menuItem.actionExecution == "service" ||  event.menuItem.actionExecution == "method"){
                               console.log('start service' );
                               //console.log(this.getSelection() );
                             event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                             executeMenuAction(event, this.getSelection(), parentId);
                         }
                         else{
                             var objectTypeRef = w2ui['gridRef5<?php echo $this->viewId;?>'].objectTypeRef;
                             //  console.log(event );
                             w2ui['layoutMain'].load(
                                 'main',
                                 $('#urlAjax').val()+"/view/"+event.menuItem.text+
                                 "?layout=layoutMain&parentType="+parentType+
                                 "&parentId="+parentId+
                                 "&viewId="+event.menuItem.id+"&objectId="+event.recid
                             );
                         }
                     }
                 },
                 onClick : function (event){
                     w2ui['gridRef5<?php echo $this->viewId;?>'].lock('Loading...', true);
                  	
                     event.onComplete = function () {
                    	 var sel = w2ui['gridRef5<?php echo $this->viewId;?>'].getSelection();
                    	 
                        
                         if(sel.length == 1){
                             var sel = w2ui['gridRef5<?php echo $this->viewId;?>'].getSelection();
                             if(STORAGE["<?php echo $this->viewId;?>"].MAP == true){
                        		 //var row = w2ui['gridRef5<?php echo $this->viewId;?>'].get(sel);
                            	 makeMapSelection(w2ui['gridRef5<?php echo $this->viewId;?>'], sel);
                    		     //makeMapSelection(row);
                        	  }
                             if( sel == oldSelection ) {}
                             else{
                             }

                         }else {
                             oldSelection = 0;
                         }
                         w2ui['gridRef5<?php echo $this->viewId;?>'].unlock();
                     }
                 },

                 onDblClick: function(event){

                     event.onComplete = function () {
                         var objectTypeRef = w2ui['gridRef5<?php echo $this->viewId;?>'].objectTypeRef;
                         var parentType = w2ui['gridRef5<?php echo $this->viewId;?>'].parentType;
                         var parentId  =w2ui['gridRef5<?php echo $this->viewId;?>'].parentId;
                         openAddPopup(objectTypeRef, parentType,parentId, 'gridRef5', event.recid,objectTypeRef,"edit");
                     }
                 },
                 onRefresh: function(event) {
                	 event.onComplete = function () {
                         w2ui['gridRef5<?php echo $this->viewId;?>'].select(w2ui['gridRef5<?php echo $this->viewId;?>'].last.click_recid);
                         w2ui['gridRef5<?php echo $this->viewId;?>'].scrollIntoView(w2ui['gridRef5<?php echo $this->viewId;?>'].getSelection(true));
                    }
                 },
                 onSelect: function (event) {
                     //selectedRef2Items.push(event.recid);
                     event.onComplete = function () {
                         var sel = w2ui['gridRef5<?php echo $this->viewId;?>'].getSelection();
                         if( sel.length > 1 ){
                             //w2ui['gridRef5<?php echo $this->viewId;?>'].parentId = 0;
                             var sel = w2ui['gridRef5<?php echo $this->viewId;?>'].getSelection();
                         }
                         // 	w2ui['gridRef<?php echo $this->viewId;?>'].unlock();
                     }
                 },
                 onUnselect : function (event) {
                     event.onComplete = function () {
                         var sel = w2ui['gridRef5<?php echo $this->viewId;?>'].getSelection();
                         if( sel.length > 0 ){
                             var sel = w2ui['gridRef5<?php echo $this->viewId;?>'].getSelection();
                         }
                     }
                 },

                 onSearch : function (event) {
                     // console.log(event);
                 },
                 onStateSave : function (event) {
                     // console.log(event);
                     $.ajax({
                         type : 'POST',
                         url: $('#urlAjax').val()+"/savestate",
                         data :  {
                             "view" : "<?php echo $this->viewId;?>",
                             "grid": 'gridRef5',
                             "data" : event.state,
                             "columns" : event.columns
                         },
                         success:$.proxy(function(result){

                         }, this),
                         dataType : 'json'
                     });

                 }
             },
            form: {
         	    record : [],
                name: 'form<?php echo $this->viewId;?>',
                fields: [],
                focus: -1,
                actions: {
                    Reset: function () {
                        this.clear();
                    },
                    Save: function () {
                        var errors = this.validate();
                        if (errors.length > 0) return;
                        nameOfRel =  "<?php echo $this->id; ?>";
                        if( nameOfRel.match('^get') || nameOfRel.match('^cg?')){
                        	nameOfRel = nameOfRel.substr(3);
                        }
                        $.ajax({
                            type : 'POST',
                            url: $('#urlAjax').val()+"/saveobject",
                            data :  {
                            	"parentId" : "<?php echo $this->parentId; ?>",
                            	"parentType" : ""+"<?php echo $this->parentType; ?>",
                                "objectType" : nameOfRel,
                                "data" : this.record
                            },
                            success:$.proxy(function(result){
                                if(result.success) {
                                	//w2ui.grid.clear();
                                    //refresh the page after insert the field
                                	simpleReloadGridData('grid','<?php echo $this->parentType; ?>','<?php echo $this->parentId; ?>','<?php echo $this->id; ?>' ,true);
                                    //window.location = window.location;
                                }
                            }, this),
                            dataType : 'json'
                        });

                    }
                }
            },
	        formPopup: {
           	    record : [],
                name: 'formPopup',
                fields: [],
                actions: {
                    Reset: function () {
                        this.clear();
                    },
                    Save: function () {


                    }
                }
            }
 }
	       
//var STORAGE["<?php echo $this->viewId;?>"].DATE_MAPPING = [];	
var keepData = [];
var EVENT_SCHEMA;
var EVENT_NAME;
var STORAGE;
var RESOURCES;
var TOOLTIP_TEMPLATE;
var SLOT_TOOLTIP_TEMPLATE;
var NODE_TEMPLATE;
var RESOURCES_SCHEMA;
var RESOURCES_NAME;
var RESOURCES_DATESOURCE;
var RESOURCES_ORIENTATION;
var RESOURCES_FIELD_NAME;
var RESOURCES_FIELD_ID;
var RESOURCE_DEF;
var RESOURCE_DEF1;
var STARTDATE;
var STARTDATE;	
var SCHEDULER_OPTIONS; // scheduler options
var MAINDATE;
var MAINVIEW;
var STARTFIELD;
var ENDFIELD;
var LISTREF;

var SCHEDULER_AP;
var SCHEDULER_CONTEXT_MENU = [];
var MyCustomTimelistView;
var ZOOM_IN_DYNAMIC_CUSTOM_VIEW = 90;


function makeMapSelection(grid, selList, all = false , route = false){
	console.log("make map selection with::");
	console.log(selList);
	//console.log(selList);
	 if (typeof google === 'object' && typeof google.maps === 'object') {

    	 var locations;
    	 if(all){
    		 console.log("GETTING ALL NODES FOR THE MAP");
             $.ajax({
                 type: 'POST',
                 url:selList,
                  success: $.proxy(function (result) {
                     	
                   		 console.log(result);
                         locations = result.records;
                         drawMap (locations, route);
                        
                    }, this),
                    dataType : 'json'
                });
            
    		 //locations = grid.records;
    	 } else {
 		     locations = grid.get(selList);
  		    drawMap(locations,route);
    	 }
	 }
}

 function drawMap (locations, route )
 {
	 var map;
	 var bounds = new google.maps.LatLngBounds();
	 var mapOptions = {
	        mapTypeId: google.maps.MapTypeId.ROADMAP
	    };
	               
	    // Display a map on the page
	 map = new google.maps.Map(document.getElementById("mapGoogle<?php echo $this->viewId;?>"), mapOptions);
	 map.setTilt(45);
     var infowindow = new google.maps.InfoWindow();
     var flightPlanCoordinates = [];
     var bounds = new google.maps.LatLngBounds();

     for (i = 0; i < locations.length; i++) {
     marker = new google.maps.Marker({
         position: new google.maps.LatLng(locations[i].latitude, locations[i].longitude),
          map: map
     });

      flightPlanCoordinates.push(marker.getPosition());
      bounds.extend(marker.position);
      if(route){
      	      marker.setVisible(false); 
      }
          google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
              //infowindow.setContent(locations[i]['title']);
              infowindow.open(map, marker);
            }
          })(marker, i));
        }

        map.fitBounds(bounds);
        if(route){
            var flightPath = new google.maps.Polyline({
              map: map,
              path: flightPlanCoordinates,
              strokeColor: "#FF0000",
              strokeOpacity: 1.0,
              strokeWeight: 2
            });
        }
            
       
 }


function printDocument(url){
    console.log(" printing "+ url);
    //win = window.open(url, '', 'width=800, height=500');
    //win.print(); 
    printJS(url);
}


function undoGrid(parentType , parentId, grid){
    var inputE = [];
    console.log('undo...ing');
    var link = {
        id: "123",
        text: "text",
        actionExecution: "service",
        actionResponse : "refreshAll()",
        method:"undo",
        parentType: parentType,
        objectType: parentId,
        serviceName:"Service",                         
        serviceMethod:"undo"
    }
    inputE.recid = "123";
    inputE.menuItem = [];
    inputE.menuItem = link;
    inputE.menuItem.id = "123";
    inputE.menuItem.text = "text";
    inputE.menuItem.actionExecution = "service";
    inputE.menuItem.method ="undo";
    inputE.menuItem.parentType = parentType;
    inputE.menuItem.objectType = parentId;
    inputE.menuItem.serviceName ="\\Application\\Service\\Service";                        
    inputE.menuItem.serviceMethod ="undo";
    inputE.target = grid+'<?php echo $this->viewId;?>';
    //menuitem
    executeMenuAction(inputE, "123", parentId);
}

function filterItems(arrayIn, dateArg,  date, query, value) {
      //console.log("fiy"+ " - " +value+ " - " +dateArg+ " - " +date);
	 
	  return arrayIn.filter(function(el) {
		 //console.log(el);
		  valueIn = eval("el."+query)
		  
		  if( (valueIn == value) && ( eval("el."+dateArg) == date) ){
			  //console.log("fiy found"+valueIn );
	       return true ;
		  }
		  return false;
	  })
	}
//getResources();
function createScheduler(){//RESOURCES,STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE, RESOURCES_FIELD_ID, RESOURCES_ORIENTATION, RESOURCES_NAME){
		// create scheduler instance
	var date = new Date();
	var time = date.getFullYear()+'-'+date.getMonth()+'-'+date.getDate();
    console.log("create Sheduler");
   // if( $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler") == undefined){
	var dataScheduler = {
		toolbar: [ "pdf" ],

	//	slotTemplate: "<div style='background:#=getColorBasedOnHour(  $(this), $('\\#scheduler<?php echo $this->viewId;?>').data('kendoScheduler') ,date, data, resources )#; height: 100%;width: 100%;'></div>",
		pdf: {
			fileName: "Calendar"+time+".pdf",
		},
		numberOfDays: STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
		snap : false,
		date: MAINDATE,
		startTime: MAINDATE,
		height: 650,
		//footer: true,
		showWorkHours: true,
		workDayStart: new Date(STORAGE["<?php echo $this->viewId;?>"].STARTTIME),//("2015/1/1 8:00 AM"),
		workDayEnd: new Date(STORAGE["<?php echo $this->viewId;?>"].ENDTIME),//("2015/1/1 10:00 PM"),
		eventTemplate : NODE_TEMPLATE,
		views: STORAGE["<?php echo $this->viewId;?>"].VIEWS,
			//[{type: "day", majorTick:60 , eventHeight: 3, dateHeaderTemplate: kendo.template("<strong>#=kendo.toString(date, 'm')#</strong>")} ,{type: "month"},{ type :"week", selected: true,eventHeight: 3, dateHeaderTemplate: kendo.template("<strong>#=kendo.toString(date, 'm')#</strong>")},"workWeek","agenda",{ type: "timelineMonth", majorTick:1420 , eventHeight: 10},{ type: "timelineWeek", majorTick:360 , eventHeight: 10},{ type: "MyCustomTimelistView"}],
		timezone: "Etc/UTC",
		selectable: true,
		change: function(e) {
	            var start = e.start;
	            var end = e.end;
	            console.log(kendo.format("Selection between {0:g} and {1:g}", start, end));
	          
	    },

        dataBound: function (e) { 
            console.log("data binding");
        	
            if(STORAGE["<?php echo $this->viewId;?>"].SLOTMARK != undefined){
                  var view = this.view();
                  var events = this.dataSource.view();
                  var eventElement;
                  var event;
                  var elements = view.content.find("td");
                  var s = this;
        
                  var v = s.view()
                  var groupsByResource = [];
        
                  if (v.groupedResources) {
                    s._groupsByResource(v.groupedResources, 0, groupsByResource);
                  }
                
                  $.ajax({
            	        type : 'POST',
        
            	        url: $('#urlAjax').val()+"/getMethodResultListReference?objectType=Workspace&methodName="+STORAGE["<?php echo $this->viewId;?>"].SLOTSCHEMA+"&id=<?php echo $this->parentId; ?>"+"&viewId=<?php echo $this->viewId; ?>",
            			success:$.proxy(function(result){
            				var textIn = false;
            				var storedId = 0;
            				for (var i = 0; i < elements.length; i++) {
            					if(STORAGE["<?php echo $this->viewId;?>"].TEXTSLOT != undefined){
                				    textIn = true;
                				}
          		              var slot = scheduler.slotByElement($(elements[i]));
            		           
          		              if( slot) {
           		            	 var groupQuery = new kendo.data.Query(groupsByResource).filter({field: "groupIndex", operator: "eq", value: slot.groupIndex}).toArray();
           		                //here is the resources for current slot:
           		                var groupResources = groupQuery.length ? groupQuery[0] : null;
              		            // console.log(groupResources.Pnaemployee);  
                		            	//console.log(" HEEE " +STORAGE["<?php echo $this->viewId;?>"].STARTTIMEARG);
                		            	//console.log(STORAGE["<?php echo $this->viewId;?>"]);
                		            	//console.log(groupResources);
              		            	  var  dateStartArg = STORAGE["<?php echo $this->viewId;?>"].STARTTIMEARG;//"pnajobtask_starttime";
              		            	  var dateEndArg = STORAGE["<?php echo $this->viewId;?>"].ENDTIMEARG;//"pnajobtask_endtime";
               		            	  var dateArg = STORAGE["<?php echo $this->viewId;?>"].TASKDATEARG;//"pnaplannedjobtask_date";
                 		              var queryArg = STORAGE["<?php echo $this->viewId;?>"].PAQTHARG;//"parent[0].$id";
                  		              
                  		              //console.log(groupResources);
                    		          dateSlotIn = moment(slot.startDate).format('DD-MM-YYYY');
                    		          var resStorage = "groupResources."+STORAGE["<?php echo $this->viewId;?>"].RESSLOTARG;
                		              itemd  = filterItems(result.items, dateArg,  dateSlotIn ,queryArg, eval(resStorage));
                		             // console.log("GET In SLots");
                		              //console.log(dateSlotIn);
                		              //console.log(itemd);
                		              for(var j = 0; j < itemd.length; j++){
                		            	  //console.log(" HEEE" + dateEndArg);
        
                    		              var dayStartIn =  kendo.parseDate(eval("itemd[j]."+dateArg)+" " +eval("itemd[j]."+dateStartArg), "dd-MM-yyyy HH:mm");
                    		              var dayStopIn =  kendo.parseDate(eval("itemd[j]."+dateArg)+ " "+eval("itemd[j]."+dateEndArg), "dd-MM-yyyy HH:mm");
                  		                  var startSlotMilliseconds = kendo.date.getMilliseconds(slot.startDate);
                    		              
                    		              //console.log( slot.endDate);
                  		                  var endSlotMilliseconds = kendo.date.getMilliseconds(slot.endDate);
                    		              //  console.log(dayStopIn );
                    		              var startDayMilliseconds = kendo.date.getMilliseconds(dayStartIn);
                    		              //console.log(endSlotMilliseconds );
                  		                  var endDayMilliseconds = kendo.date.getMilliseconds(dayStopIn);
                    		              
                  		                  var slotSize = slot.endDate-slot.startDate;
                    		               // console.log("doen"+slotSize);
                    		                //console.log(slot.endDate-slot.startDate);
                    		                //console.log(slot.endDate);
                  		                       //check in which hour is current slot
                    		               
                    		              var idItem = eval('itemd[0].recid');
                    		                
                  		                  if (slot.startDate  >= dayStartIn &&
                    		                  slot.endDate <= dayStopIn ) {
                  		                	  //console.log(" HEEEX 2 = " + textIn );
                    		                  if( txtS instanceof Array){
                      		                	    $(slot.element).prop(STORAGE["<?php echo $this->viewId;?>"].TEXTSLOT, txtS[0].text);
                        		              } else {
                        		                	$(slot.element).prop(STORAGE["<?php echo $this->viewId;?>"].TEXTSLOT, txtS);
                        		              }
                    		                  if(idItem != storedId){
                  		                	      var txtS = eval('itemd[0].'+STORAGE["<?php echo $this->viewId;?>"].TEXTSLOT);
                        		                  if( txtS instanceof Array){
                        		                	 //console.log( "hee"+txtS[0].text );
                              		                 //console.log( txtS );
                              		                 $(slot.element).html(txtS[0].text);
                                		              
                        		                   }else {
                        		                	   $(slot.element).html(txtS);
                        		                   }
                      		                	   textIn = false;
                        		                   storedId = idItem;
                    		                  } 
                    		                 
                    		                  $(slot.element).addClass("customSlot");
                  		                	  $(slot.element).css({ background: "gray" }); 
                     		               } else if (startSlotMilliseconds  >= startDayMilliseconds-slotSize+1000000 &&
                    		                  endSlotMilliseconds <= endDayMilliseconds+slotSize-1000000) {
                    		                  //console.log(" outside colorcah" );
                    		                  var txtS = eval('itemd[0].'+STORAGE["<?php echo $this->viewId;?>"].TEXTSLOT);
                    		                  if( txtS instanceof Array){
                  		                	      $(slot.element).prop(STORAGE["<?php echo $this->viewId;?>"].TEXTSLOT, txtS[0].text);
                    		                  } else {
                    		                	  $(slot.element).prop(STORAGE["<?php echo $this->viewId;?>"].TEXTSLOT, txtS);
                    		                  }
                    		                  if(idItem != storedId){
                       		            		  
                        		                  if( txtS instanceof Array){
                        		                     //console.log( "hee"+txtS[0].text );
                            		                 //console.log( txtS );
                            		                 $(slot.element).html(txtS[0].text);
                        		                   } else {
                        		                	   $(slot.element).html(txtS);
                        		                   }
                      		                	   textIn = false;
                        		                   storedId = idItem;
                      		                  }
                      		                  $(slot.element).addClass("customSlot");
                  		                      $(slot.element).css({ background: "gray" }); //apply CSS
                    		                  
                  		                  }
              		                  }
              		              
          		              }
          		          };
            			})
                  });
            }
          
          
        },
      
		editable: {
			    create: false,
			    confirmation: "Are you sure you want to delete this event?"
		        //destroy: false
			  },
		group: STORAGE["<?php echo $this->viewId;?>"].RESOURCES_GROUP,
		resources:  STORAGE["<?php echo $this->viewId;?>"].RESOURCES,
		dataSource: STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE,
		save: function( e) {
	        //console.log("save");
	    },
	    update: function( e){
		    console.log("update");
	    },
	    resize: function(e) {
	        //console.log("Resize in", e.slot.start);
	      },
	    navigate: scheduler_navigate,
	    edit: function( e) {
	    	console.log(" Edit r");
	    	e.preventDefault(); //prevent popup editing
	        var dataSource = this.dataSource;
	        var event = e.event;
	        var pTy = e.event.parents[0].$ref;
	        var parentTypeStr = pTy.charAt(0).toUpperCase() + pTy.slice(1);
	        var parentType = parentTypeStr.substring(0, parentTypeStr.length -1);
	        openAddPopup(EVENT_NAME,parentType,e.event.parents[0].$id, 'scheduler',event.recid,EVENT_NAME, 'edit');   
	        
	        //openAddPopup(objectName, parentType, parentId, gridName, selectedId, type, action);
	        if (event.isNew()) {
	          setTimeout(function() {
	             //dataSource.add(event);
	             // editEvent(event);
	           });
	        } else {
	          // editEvent(event);
	        }
          },
	};
	//console.log( " HEE");
	//console.log(dataScheduler);
	$("#scheduler<?php echo $this->viewId;?>").kendoScheduler(dataScheduler);


	

    if($("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler") == undefined){
   	    console.log(" error - failing to recreate scheulder");
        //console.log(STORAGE["<?php echo $this->viewId;?>"]);
        //console.log(dataScheduler);
    	$("#scheduler<?php echo $this->viewId;?>").kendoScheduler(STORAGE["<?php echo $this->viewId;?>"].SCHEDULERDATA) ;
    }
	 console.log("create Sheduler - after init ");
	 //console.log( $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler"));
       var templateText = '<label> Title: <input data-bind="value: title" readonly="true"/> </label> <label>Start: <input data-role="datetimepicker" data-bind="value: start" /></label><label>End:<input data-role="datetimepicker" data-bind="value: end" /></label> <button id="save">Save</button><button id="cancel">Cancel</button>';
       var editor = $("#editor");
       var template = kendo.template(templateText);
       var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
       console.log("scheduler DATA now"); 
       //console.log(scheduler);    
       function destroyEditor() {
    	   //console.log("DESTROY DATA now"); 
           kendo.destroy(editor);
           editor.find("button").off();
           editor.html("");
        }

        var currentEvent;

        function onClose() {
           // undo.fadeIn();
        }
        function editEvent(e , close = false) {
         	 
      	    //e.preventDefault();
             destroyEditor();
          	 //prevent popup editing
  	        var dataSource = this.dataSource;
  	        var event = e;
  	        var pTy = event.parents[0].$ref;
  	        var parentTypeStr = pTy.charAt(0).toUpperCase() + pTy.slice(1);
  	        var parentType = parentTypeStr.substring(0, parentTypeStr.length -1);
  	        console.log('editing...'+parentType);
  	        openAddPopup(EVENT_NAME,parentType,event.parents[0].$id, 'scheduler',event.recid,EVENT_NAME, 'edit');   
  	        if(close == true){
 	        	 console.log('editing...'+parentType);
  	        }
         
        }
        function deteleEvent(e) {
        	//var event = scheduler.dataSource.at(e);

          	scheduler.removeEvent(e);   
          }
        if(TOOLTIP_TEMPLATE != undefined){
            var templateTooltipString = TOOLTIP_TEMPLATE;
      	    $("#scheduler<?php echo $this->viewId;?>").kendoTooltip({
    	        filter: ".k-event",
    	        position: "top",
    	        width: 250,
    	        content: kendo.template(templateTooltipString)
    	    });
        }

        if(SLOT_TOOLTIP_TEMPLATE != undefined){
            var templateTooltipString = SLOT_TOOLTIP_TEMPLATE;
      	    $("#scheduler<?php echo $this->viewId;?>").kendoTooltip({
    	        filter: ".k-scheduler-content td[role=gridcell]",
    	        position: "top",
    	        width: 250,
    	        content: kendo.template(templateTooltipString)
    	    });
        }
         
	    var contextMenuOpen = function(e) {
	        var menu = e.sender;
	        menu.remove(".mainClass");
	        menu.remove(".methodClass-opt");
	        //console.log("menu"+menu);
	        //console.log(e);
	        if( menu){
		        if($(e.target).hasClass("k-event") ){
		        	   menu.append([{text: "Edit event", cssClass: "mainClass" }]);
		    	       // menu.remove(".myClass");
		        	   menu.append([{text: '<span2 id=123>Remove event</span2>', encoded: false ,cssClass: "mainClass" }]);
		        }
    	        //var text = $(e.target).hasClass("k-event") ? "Edit event" : "Add Event";
    
    	       // menu.remove(".myClass");
    	       // menu.append([{text: text, cssClass: "mainClass" }]);
    	       
    	       // menu.append([{  text: '<span1 id="t22">Test</span1>',  encoded: false }]);
    	        var gridMenu = [];
    	        gridMenu = STORAGE["<?php echo $this->viewId;?>"].SCHEDULER_CONTEXT_MENU;//getSchedulerContextMenu();
    	        //console.log(gridMenu);
    	        $.each(gridMenu, function( index, value){           
    	        	
    	                  
    	                  //console.log( value);
    	             	    var link = {
    	                      id: value._id,
    	                      text: value.link,
    	                      actionExecution: value.actionExecution,
    	                      viewId: value.viewId,
    	                      parentType: value.parentType,
    	                      objectType:value.objectType,
    	                      method:value.method,
    	                      serviceName:value.serviceName,
    	                      params:value.params,
    	                      serviceMethod:value.serviceMethod,
    	                      template:value.template,
    	                      actionResponse: value.actionResponse,
    	                      icon: 'fa-edit'
    	                  }
    	            // SCHEDULER_CONTEXT_MENU.push(link);
    	                   
    		         menu.append([{  text: '<span1 id="'+value['id']['$id']+'">'+value.text+'</span1>',  encoded: false , cssClass: "mainClass"}]);
                    // menu.append([{text: value.link, cssClass: "myClass" }]);
    	        });
	        }
	    };
	    var contextMenuSelect = function (e) {
	    	
		    var target = $(e.target);
		    console.log("execute MEnu");
		    //console.log(e);
			var item = $(e.item);
			xmlDoc = $.parseXML( item[0].innerHTML );
			xmlD = $( xmlDoc );
		    $title = xmlD.find( "span1" );
		    if( target.hasClass("k-event")) {
		        menuElement = item.closest(".k-menu");
    		    if($title[0] != undefined)
        		{
        		    //console.log($title[0].id);
      		        var conextMenuItem = STORAGE["<?php echo $this->viewId;?>"].SCHEDULER_CONTEXT_MENU.filter(function (obj) {
        		        	  return obj.id['$id'] == $title[0].id;
        		        	})[0];
        		        var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
      		          
        	            var uid = $(e.target).attr("data-uid");

        	            var dataItem = scheduler.dataSource.getByUid(uid);
        		        //console.log(dataItem);
        	            console.log("execute MEnu1");
            		       // var conextMenuItem = SCHEDULER_CONTEXT_MENU.find(findSchedulerContextMenuItem, $title[0].id);
        		        //console.log(conextMenuItem);
        		        event = [];
        		        event.menuItem = conextMenuItem;
        		        event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
        		        event.recid = dataItem['_id']['$id'];
        		        //console.log(event);
        		        if( conextMenuItem.actionExecution == 'inputform'){
        		        	console.log("open input form");
        		        	//console.log(conextMenuItem);
        		        	//console.log(conextMenuItem.method);
                            openAddPopup(conextMenuItem.method, conextMenuItem.objectType,event.recid, 'scheduler', event.recid,conextMenuItem.objectType, 'inputForm');         
                        } 
        		        else if( conextMenuItem.actionExecution == "changereference"){
                        	console.log( "changereference");
                        	console.log( event);
                        	var nwgridId = ''+event.menuItem.method+'<?php echo $this->viewId;?>';
                        	console.log( "reg"+nwgridId);
                        	var objTypeUrl= event.menuItem.objectType;
                        	var resNewUrl = objTypeUrl.replace("@id@",  event.menuItem['id']['$id']);
                            w2ui[nwgridId].objectTypeRef = resNewUrl;//event.menuItem.objectType+'[_id-'+ event.menuItem['id']['$id']+ ']';
                            console.log(w2ui[nwgridId] );
                            refreshGrid(event.menuItem.method);
                        } else  {//change reference for grids 
        		            executeMenuAction(event, dataItem['_id']['$id'], dataItem.parents[0]['$id']);
        		        }
    	        	} 
    	        	else {
    	        		console.log("open input form 12");
    	        		console.log(e);
                 		var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
              		   
    	        		var occurrenceByUid = scheduler.occurrenceByUid(target.data("uid"));
    	        	    $title = xmlD.find( "span2" );
    	    		  
    	        		if($title[0] != undefined)
    	        		{
    	        			deteleEvent(occurrenceByUid);
    	        		}else{
    	        		    editEvent(occurrenceByUid);
   	        			}
    	        	} 
    		    } else {
   		    	 if($title[0] != undefined)
	        		{
             		var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
             		console.log("no EVENT");
      	            var uid = $(e.target).attr("data-uid");
      	            var dataItem = scheduler.dataSource.getByUid(uid);
        	        var conextMenuItem = STORAGE["<?php echo $this->viewId;?>"].SCHEDULER_CONTEXT_MENU.filter(function (obj) {
    		        	  return obj.id['$id'] == $title[0].id;
    		        	})[0];
      		        console.log(dataItem);
        		    console.log(STORAGE["<?php echo $this->viewId;?>"].RESOURCES_NAME);
      		        console.log($("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").select().resources[STORAGE["<?php echo $this->viewId;?>"].RESOURCES_NAME]);
      		        event = [];
      		        
      		        event.menuItem = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").select();
      		        event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
      		        event.recid =  $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").select().resources[STORAGE["<?php echo $this->viewId;?>"].RESOURCES_NAME];
      		        //console.log(event);
      		        if( conextMenuItem.actionExecution == 'inputform' ){
      		        	console.log("open input formX "+e.start+" - "+e.end);
      		        	console.log(conextMenuItem);
                        openAddPopup("newobject", STORAGE["<?php echo $this->viewId;?>"].RESOURCES_NAME,event.recid, 'scheduler', event.recid,STORAGE["<?php echo $this->viewId;?>"].RESOURCES_NAME , 'inputForm');         
                      } else{
         		        	console.log("open input form NEW - add event"+e.start+" - "+e.end);
          		        	console.log(conextMenuItem);
                            openAddPopup("newobject", STORAGE["<?php echo $this->viewId;?>"].RESOURCES_NAME,event.recid, 'scheduler', event.recid,STORAGE["<?php echo $this->viewId;?>"].RESOURCES_NAME , 'inputForm');         
                      }
	        		}
        	    }
	        	 
		    
	    };

	    
	    $("#contextMenu").kendoContextMenu({
		      filter: ".k-event, .k-scheduler-table",
		      target: "#scheduler<?php echo $this->viewId;?>",
		    //  showOn: "click",
		      select: contextMenuSelect,
		      open: contextMenuOpen
		    }); 
	    var button = $("<button class='k-button k-my-button'>Hide details</button>");
 		//var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
 		console.log("create Sheduler - after init 1");
 		$("#scheduler<?php echo $this->viewId;?>").on("mousedown", ".k-scheduler-content td", function(e) {
		      console.log("down");
		      console.log(e);
		      destroyEditor();
		      var dataSource = this.dataSource;
	  	        var event = e;
		  	      var pTy = "ref";
		  	        var parentTypeStr = "pp";
		  	        var parentType = "aa";
		    	//e.preventDefault(); //prevent popup editing
		     // kendo.destroy(editor);
		     //  editor.find("button").off();
		     //  editor.html("");
		       console.log("destroyed");
		      
		      //  openAddPopup(EVENT_NAME, "11", 'scheduler', "11",EVENT_NAME, 'edit');   
		        
		
		  });
	    
	    $(scheduler.toolbar).prepend(button);
	    button.click(function() {
		    if( STORAGE["<?php echo $this->viewId;?>"].LISTS == true ){
    			//console.log(' hide panels');
    			w2ui['layout<?php echo $this->viewId;?>'].hide('left');
    			w2ui['layout<?php echo $this->viewId;?>'].hide('main');
    			w2ui['layout<?php echo $this->viewId;?>'].hide('right');
                w2ui['layout<?php echo $this->viewId;?>'].hide('preview');

                w2ui['layout<?php echo $this->viewId;?>'].hide('bottom');
    			
    			var y = $('#main').position().top;
    			 //var layoutHeight = $(window).height() - y - 10;
    			var height = $(window).innerHeight() - y -55;
    			w2ui['layout<?php echo $this->viewId;?>'].sizeTo('top', height);
    			//w2ui['layout<?php echo $this->viewId;?>'].refresh();
		    }
		    fitWidget();
			
		});
	    var button = $("<button class='k-button k-my-button'>Show details</button>");
	    $(scheduler.toolbar).prepend(button);
	    button.click(function() {
		    if( STORAGE["<?php echo $this->viewId;?>"].LISTS == true ){
    			//console.log(' show panels');
    			w2ui['layout<?php echo $this->viewId;?>'].show('left');
    			w2ui['layout<?php echo $this->viewId;?>'].show('main');
                if (w2ui['gridRef3<?php echo $this->viewId;?>'] != undefined) {
                    w2ui['layout<?php echo $this->viewId;?>'].show('right');
                }
                w2ui['layout<?php echo $this->viewId;?>'].show('preview');
                if (w2ui['gridRef5<?php echo $this->viewId;?>'] != undefined) {
                    w2ui['layout<?php echo $this->viewId;?>'].show('bottom');
                }

                var height = '70%';
    			w2ui['layout<?php echo $this->viewId;?>'].sizeTo('top', height);
    			//w2ui['layout<?php echo $this->viewId;?>'].refresh();
		    }
			fitWidget();
		});
	    var button = $("<button class='k-button k-my-button'>Undo</button>");
	    $(scheduler.toolbar).prepend(button);
	    button.click(function() {
	    	var inputE = [];
            var link = {
                id: "123",
                text: "text",
                actionExecution: "service",
                actionResponse : "refreshAll()",
                method:"undo",
                parentType: '<?php echo $this->parentType; ?>',
                objectType: '<?php echo $this->parentId; ?>',
                serviceName:"Service",                         
                serviceMethod:"undo"
            }
            inputE.recid = "123";
            inputE.menuItem = [];
            inputE.menuItem = link;
            inputE.menuItem.id = "123";
            inputE.menuItem.text = "text";
            inputE.menuItem.actionExecution = "service";
            inputE.menuItem.method ="undo";
            inputE.menuItem.parentType = "parentType";
            inputE.menuItem.objectType = "parentId";
            inputE.menuItem.serviceName ="\\Application\\Service\\Service";                        
            inputE.menuItem.serviceMethod ="undo";
            //menuitem
            executeMenuAction(inputE, "123", '<?php echo $this->parentId; ?>');
        
			
		});
	    var button = $("<button class='k-button k-my-button'>ZoomIn</button>");
	    $(scheduler.toolbar).prepend(button);
	    
	    button.click(function() {
	    	var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
	    	 scheduler.options.snap = false;

	    	 if(scheduler.view().name == "month"){  
	    		  ZOOM_IN_DYNAMIC_CUSTOM_VIEW = ZOOM_IN_DYNAMIC_CUSTOM_VIEW / 2;
	    		  if( ZOOM_IN_DYNAMIC_CUSTOM_VIEW < 90 ){
		    		  ZOOM_IN_DYNAMIC_CUSTOM_VIEW = 90;
	    		  }
	    		  $("#scheduler<?php echo $this->viewId;?> .k-scheduler-monthview .k-scheduler-table").find("td").height(ZOOM_IN_DYNAMIC_CUSTOM_VIEW);
		    	  scheduler.view(scheduler.view().name);
	    	 }
	    	if(scheduler.view().name == "MyCustomTimelistView"){
		    	if(STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS > 1){
        	    	  STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS = STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS -1;
        	    	 //change the number of days option of the view
        	    	  scheduler.setOptions({
        	              numberOfDays: STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
        	              majorTick: 35*STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
        	              snap: false
        	            });
        	          //reload the view
        	          scheduler.view(scheduler.view().name);
		    	}
	    	}
	   });
		var button = $("<button class='k-button k-my-button'>ZoomOut</button>");
	    $(scheduler.toolbar).prepend(button);
	    button.click(function() {
	    	var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
	    	 scheduler.options.snap = false;
console.log(scheduler.view() );
	    	 if(scheduler.view().name == "month"){  
	    		  ZOOM_IN_DYNAMIC_CUSTOM_VIEW = ZOOM_IN_DYNAMIC_CUSTOM_VIEW * 2;
	    		  if( ZOOM_IN_DYNAMIC_CUSTOM_VIEW >500 ){
		    		  ZOOM_IN_DYNAMIC_CUSTOM_VIEW = 500;
	    		  }
	    		  $("#scheduler<?php echo $this->viewId;?> .k-scheduler-monthview .k-scheduler-table").find("td").height(ZOOM_IN_DYNAMIC_CUSTOM_VIEW);
		    	  scheduler.view(scheduler.view().name);
	    	 }
	    	  
	    	if(scheduler.view().name == "MyCustomTimelistView"){  	 
	    		if(STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS < 7){   	  
        	    	  STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS = STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS + 1;
        	    	 //change the number of days option of the view
        	    	  scheduler.setOptions({
        	              numberOfDays: STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
        	              majorTick: 35*STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
        	              snap: false
        	            });
        	          //reload the view
        	          scheduler.view(scheduler.view().name);
	    		}
	    	}
	   });
	    
       
		var button = $("<button class='k-button k-my-button'>Today</button>");
	    $(scheduler.toolbar).prepend(button);
	    button.click(function() {
	    	schedulerSelectNow();
	   });
	    
	    fitWidget();	
	  
	    if(STORAGE["<?php echo $this->viewId;?>"].SCHEDULERDATA == undefined){
			  STORAGE["<?php echo $this->viewId;?>"].SCHEDULERDATA = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
		}
	  	
	    
}


function reinitScheduler(){
	var d = new Date(sDate1);
  	d.setHours(15);
  	//console.log(d);
  	$("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").date(d);
  	event = 
    editEvent(event);
}

function findSchedulerContextMenuItem(item){
	//console.log(item);
	//console.log(" b "+ id);
    return item.id['$id'] == id;
}


function schedulerSelectNow(){
	var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
	var sDate1 = moment().format('YYYY/MM/DD');

	 var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler"); 
	 var sDate1 = moment().format('YYYY/MM/DD');
     var sDatex = moment().format("DD-MM-YYYY");
     var sDate = moment(sDatex, "DD-MM-YYYY");
     console.log("schedulerSelectNow");
	 scheStartDate = scheduler.view().startDate() ;
	 scheEndDate = scheduler.view().endDate() ;
	 var timeout = 0;
	 var recId  = "XX";
	 console.log(scheStartDate);
	 console.log(scheEndDate);
	 console.log(sDate);
	 if(sDate <= scheEndDate && sDate >= scheStartDate ){
		   
			
  	
		    //scheduler.date(new Date(sDate1));
			// Fire the mousedown event in order to select this specific event.
  
		    //var el =  $("#scheduler").data("kendoScheduler").filter( { field: "id", operator: "startswith", value: itemO[0].recid });
		    //console.log(el);
			var elements = scheduler.view().content.find("td");
			for (var i = 0; i < elements.length; i++) {

	              var slot = scheduler.slotByElement($(elements[i]));
	           
	              if( slot) {
	            	  dateSlotIn = moment(slot.startDate).format('DD-MM-YYYY');
	            	  //console.log(dateSlotIn);
	            	  var todayDate = moment(dateSlotIn, "DD-MM-YYYY");
	            	  //console.log(todayDate);
	            	  //console.log(sDate);
	            	  if(dateSlotIn == sDatex){
	            		  console.log("in TODAY");
	            		  console.log(slot);
	            		  console.log(elements[i]);
                      	  //var valEval = eval("("+strEval+ ")");
	            		  //console.log(el1.uid);
	            		 // scheduler.element.find("[class='k-today']").trigger("mouse");
	            		  console.log("md2");
	            		  $(elements[i]).trigger("mouseclick");
	            		  console.log("md");
	            		  //elements[i].trigger("mousedown");
	            		  elem1  = scheduler.element.find("[cellIndex='25" + ' ' + "']");
	            		  console.log(elem1);
	            		  elem1.trigger("mousedown");
	            		 
	            	  }
	            	  
	              }
			}
	
	 }
  	
}

function getSchedulerContextMenu(){
	var gridMenu = [];

    $.ajax({
        type : 'POST',
         url: $('#urlAjax').val()+"/getMethodResultListReference?objectType=View&methodName=getComponent[name-scheduler].getContextmenu&id="+"<?php echo $this->viewId; ?>",
       
         success:$.proxy(function(result){
        	if(result.items !== undefined){	
      		   	gridMenu = result.items.slice();    
        		  $.each(gridMenu, function( index, value){           
        	        	
                      
                      //console.log("getContext"+ value);
                 	    var link = {
                          id: value._id,
                          text: value.link,
                          actionExecution: value.actionExecution,
                          viewId: value.viewId,
                          parentType: value.parentType,
                          objectType:value.objectType,
                          method:value.method,
                          serviceName:value.serviceName,
                          params:value.params,
                          serviceMethod:value.serviceMethod,
                          template:value.template,
                          actionResponse: value.actionResponse,
                          icon: 'fa-edit'
                      }
                  	   STORAGE["<?php echo $this->viewId;?>"].SCHEDULER_CONTEXT_MENU.push(link);
                       
    	        // menu.append([{  text: '<spanI id="'+alue._id+'">'+value.link+'</spanI>',  encoded: false }]);
                // menu.append([{text: value.link, cssClass: "myClass" }]);
                 });   		   	
        	 } 
            
        }, this),
        dataType : 'json'
    });
    return gridMenu;
}

function executeMenuAction(event, id, parentId){ 

    var methodExecuted = event.menuItem.method;
    console.log('methodExecuted'+methodExecuted);
   
    var objectExecutionId;
    var remoteObjectType = event.menuItem.objectType;
    if(methodExecuted.startsWith("remote")){
        if(event.menuItem.data == undefined){
            event.menuItem.data = [];
        }
        if(event.menuItem.template == "scheduler"){
        	console.log("SECHEDULER REMOTE - DATE SELECTED" + $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").date());
        	console.log( $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").select());
        	objectExecutionId =  id;
        	var newmethod  = methodExecuted.replace("@date@", "'"+$("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").date()+"'");
        	var newmethod  = methodExecuted.replace("@select@", "'"+JSON.stringify($("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").select())+"'");
             console.log(objectExecutionId);
             methodExecuted = newmethod;
             event.menuItem['id']['$id'] = id;
             if( id instanceof Array){
               //event.menuItem.data.id = [];
           	  event.menuItem.data.id = id;
             }else {
                 event.menuItem.data.id = id;
             }
            console.log(event);
           // event.menuItem.method = newmethod;
            gridName = event.menuItem.template+ '<?php echo $this->viewId;?>';
            remoteObjectType = event.menuItem.objectType;
        }else{
            objectExecutionId =  w2ui[ event.menuItem.template+ '<?php echo $this->viewId;?>' ].getSelection();
        
            event.menuItem['id']['$id'] = id;
            if( id instanceof Array){
              //event.menuItem.data.id = [];
          	  event.menuItem.data.id = id;
            }else {
                event.menuItem.data.id = id;
            }
           console.log(event);
           event.menuItem.method = methodExecuted;
           gridName = event.menuItem.template+ '<?php echo $this->viewId;?>';
           remoteObjectType = w2ui[gridName].objectTypeRef;
        }
    } else {
   	    console.log(" mulrip");
   	    console.log(id);
    	if( id instanceof Array){
   		     objectExecutionId = [];
      		 event.menuItem['id']['$id'] = id;
      		 //event.menuItem['id']['$id'] = id;
       		 objectExecutionId = id;
      	 }else {
      		 event.menuItem['id']['$id'] = id;
      		 objectExecutionId = id;
      	 }  
    }
    console.log(id);
  	 $.ajax({
        type : 'POST',       
                
        url:$('#urlAjax').val()+"/execute",

        data :  {
            "parentId" : parentId,
            "parentType" : ""+event.menuItem.parentType,
            "objectType" : ""+remoteObjectType,
            "id" :  objectExecutionId,
            "actionExecution" :event.menuItem.actionExecution,
            "method" :methodExecuted,
            "data" :event.menuItem
        },
        success:$.proxy(function(result){
			if(result.status == 'success') {
				var showMessage= true;
				var actResp = event.menuItem.actionResponse;
				//execute action
				var arrayOfItems = result.items;
				console.log("context menu action");
				console.log(arrayOfItems);
				if (arrayOfItems.hasOwnProperty("name")) { 
                   	  var retValuesI = result.items.name;
	                  if(retValuesI != undefined && typeof retValuesI === "object") {
	                	  for (var prop in retValuesI) {
	                       	  if(retValuesI[prop] != undefined){
	                         	   var newstr = actResp.replace("%"+prop+"%", retValuesI[prop]);
	                       	       actResp = newstr;
	                       	  }
	                          for (var propRet in retValuesI) {
	                        	 if(propRet.startsWith("error")){
	                        		 alert(retValuesI[propRet]);
	                        		  showMessage = false;
	                        	 }
	                          }
	                	  }
                        
                      }
      		    }
      		    
				for (var prop in arrayOfItems) {
					if (arrayOfItems.hasOwnProperty(prop)) {
						// or if (Object.prototype.hasOwnProperty.call(obj,prop)) for safety...
						console.log("execute prop: " + prop + " value: " + arrayOfItems[prop]);
						console.log(arrayOfItems[prop]);
						var newstr = actResp.replace("%"+prop+"%", arrayOfItems[prop]);
						actResp = newstr;
					}
					
				}
				if(showMessage == true){
                   let actRespList = actResp.split(";");
                   for (var propRet in actRespList) {
                       let toExec = '';
                	   toExec = actRespList[propRet];
                       var fnstring = 'showMessage';
                       if (toExec.includes(fnstring)) {
                           var myMessage = toExec.substring(
                               toExec.indexOf('"') + 1,
                               toExec.lastIndexOf('"')
                           );
                           var fn = window[fnstring];
                           if (typeof fn === "function") {
                               fn.apply(null, [myMessage]);
                           }
                       } else {
                           eval(toExec);
                       }
                   }
                };  
                $().w2popup('close');
				
          
         } else {
            //console.log(result.error);
         }
        }, this),
        dataType : 'json'
    });
   }
function executeMenuActivity(item, id, nameI){
    console.log("action menu");
 	  if( item != undefined){
  		 if( item.actionExecution == "popup"){
               popup(""+item.viewId, item.objectType , id, ""+item.parentType,""+item.objectType,""+item.method);                                  
           }
  		 else if( item.actionExecution == "inputform"){		
               openAddPopup(item.method, item.parentId, id, nameI, id, item.parentType, 'inputForm');
           }
           else if( item.actionExecution == "service" || item.actionExecution == "method"){
          	 console.log("Executing method");
          	 console.log(item);
          	 var event = [];
          	 event.menuItem = item;
               executeMenuAction(event,id , item.parentId);

           } 
 	  }
  }

function scheduler_navigate(e) {
	 MAINDATE =  e.date;
	 //console.log(" navigate to "+ MAINDATE);
	 updateScheduler(e.date, e.view, 0);
}

//Checkboxes click event
function switchView(viewM)
{  
   // var currentView = getSchedulerView();

    // If the current view is not "MUltiView", we can just return
    //if (currentView != viewM)//"multiview")
     //   return;
    var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
   // scheduler.view(currentView);
    scheduler.view(viewM);
    return;
}

function getSchedulerView(){
	// Get current view
    var scheduler = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
  
    return scheduler.viewName();
}

function updateScheduler(dateM, viewM ,selectId ){
	var increment = 30;
    let incrementEnd = 0;
    let incrementStart = 0;
	if( viewM == 'day'){
		increment = 2;
	} else if ( viewM == 'week'){
		incrementStart = 1;
		incrementEnd = 1;
	}
    //console.log( dateM);
	var formattedDate = moment(dateM).add(increment, 'days').format('DD-MM-YYYY');
	//moment(date).format('YYYYMMDD');
	var postArgs = new Object(); 
	//{"field":"name","type":"date","operator":"between","value":["7/26/2016","7/27/2016"]}
	postArgs.field = STORAGE["<?php echo $this->viewId;?>"].STARTFIELD;
	postArgs.type = "date";
	postArgs.operator = "less";
	postArgs.value = formattedDate;
	var formattedDateW = moment(dateM).subtract(incrementEnd, 'days').format('DD-MM-YYYY');
	var postArgsE = new Object(); 
	//{"field":"name","type":"date","operator":"between","value":["7/26/2016","7/27/2016"]}
	postArgsE.field = STORAGE["<?php echo $this->viewId;?>"].ENDFIELD;
	postArgsE.type = "date";
	postArgsE.operator = "more";
	postArgsE.value = formattedDateW;
	var data = new Object();
    data.search = [];
    data.search.push(postArgs);
    data.search.push(postArgsE);
    data.limit = 1000;
    data.offset = 0;
    data.searchLogic = "and";
    //$("#scheduler<?php echo $this->viewId;?> .k-scheduler-monthview .k-scheduler-table").find("td").height(225);
    //console.log("start update out");
    //STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE = [];
    $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").dataSource.transport.options.read.url =getURL(data);
    //console.log("end update out1");
    $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").dataSource.read(data);
    //console.log("end update out2");
    $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").refresh();

    
    //console.log("end update out");
	
}

function getURL(options) {
	var dataToSend = JSON.stringify(options);
	console.log("dataToSend .."+STORAGE["<?php echo $this->viewId;?>"]);
	return $('#urlAjax').val()+"/getMethodResultListReference?objectType="+STORAGE["<?php echo $this->viewId;?>"].OBJECT_TYPE+"&methodName="+STORAGE["<?php echo $this->viewId;?>"].METHOD_NAME+"&id="+"<?php echo $this->parentId; ?>"+"&viewId="+"<?php echo $this->viewId; ?>"+"&gridId=schedulerevents&searchQ="+dataToSend;			
}

function getResourcesSchemaData(param){
    //console.log(param.name+': ',param);
	var resource_str = param.referencelink;
	var resources_def = param.definition;
	var resources_name = param.name;
	var schema_str = param.schema;
	var action_str = param.actionResponse;
	var schema_obj = eval("(" + schema_str + ")");
	var schema_model = schema_obj;
	var resources_schema = kendo.data.Model.define(schema_model);
	return new kendo.data.DataSource({
		transport: {
			read: {
				//This should be a customized list of users, or all users fetched from the datastore
				url: $('#urlAjax').val()+"/getMethodResultListReference?objectType="+resource_str+
		"&methodName="+action_str+
		"&id="+"<?php echo $this->parentId; ?>"+"&viewId="+"<?php echo $this->viewId; ?>"+"&gridId=schedulerresources", 
				dataType: "json"
			},
		},
		schema: {
			data: "items",
			model: resources_schema
		}
	});
}


function setCustomResourcesSchemaData(filter){
	 STORAGE["<?php echo $this->viewId;?>"].METHOD_NAME = filter;
	 refreshAll();
	    setTimeout(function() {
          updateScheduler(MAINDATE, getSchedulerView(), 0);
    }, 200);
}

function resetCustomResourcesSchemaData(){
	 STORAGE["<?php echo $this->viewId;?>"].METHOD_NAME = STORAGE["<?php echo $this->viewId;?>"].ORIGINAL_METHOD_NAME;
	 refreshAll();
	    setTimeout(function() {
        updateScheduler(MAINDATE, getSchedulerView(), 0);
  }, 200);
}

function initiateGrid(shortName, gridName, location , configs, id, parentType, header , load , idParent, searchOnly, layout ){
	var gridMenu = [];
	var gridUi = gridName;
	console.log("initiate grid");
	console.log(id);
	config[shortName].expandChildren = false; 	
	config[shortName].expandDefinition  = false;
    $.ajax({
	        type : 'POST',
	        url: $('#urlAjax').val()+"/getMethodResultListReference?objectType=View&methodName=getComponent[name-"+shortName+"].getParameter&id="+"<?php echo $this->viewId; ?>",
			success:$.proxy(function(result){
				
				var arrayLength = result.items.length;
				for(var i = 0; i < result.items.length; i++) {
				    var resultI = result.items[i];
				    if(resultI['name'] == 'expandChildren'){
				    	console.log(' expand ');
				    	expandChildren = true;
				    	config[shortName].expandChildren = true;
				    	config[shortName].expandDefinition = resultI['definition'];
				        config[shortName].show.expandColumn = true;
				    	
				    }

				    if(resultI['name'] == 'toolbar'){
				    	config[shortName].toolbarExpand = true;
				    }
				}
            $.ajax({
                type : 'POST',
                 url: $('#urlAjax').val()+"/getMethodResultListReference?objectType=View&methodName=getComponent[name-"+shortName+"].getContextmenu&id="+"<?php echo $this->viewId; ?>",
               
                 success:$.proxy(function(result){
                	if(result.items !== undefined){	
              		   	gridMenu = result.items.slice();       		   	
                	 }
                     var edit = { id: 1, text: 'Edit Item', icon: 'fa-edit' };
             	     var menu = [];
              	     var menuTop = [
                                   {
                                       id: 'add',
                                       type: 'button',
                                       caption: '<?php echo $this->translate('common_add_record'); ?>',
                                       icon: 'w2ui-icon-plus'
                                   },
                                   {
                                       id: 'delete',
                                       type: 'button',
                                       caption: '<?php echo $this->translate('common_delete_record'); ?>',
                                       icon: 'w2ui-icon-plus'
                                   },
                                   {
                                       id: 'add-field',
                                       type: 'button',
                                       caption: '<?php echo $this->translate('common_add_field'); ?>',
                                       icon: 'w2ui-icon-plus'
                                   },
                                   {   id: 'export',
                                       type: 'button',
                                       caption: '<?php echo $this->translate('export_field'); ?>',
                                       icon: 'w2ui-icon-info'
                                   },
                                   {   id: 'print',
                                       type: 'button',
                                       caption: '<?php echo $this->translate('print_field'); ?>',
                                       icon: 'w2ui-icon-info'
                                   },
                                   {   id: 'undo',
                                       type: 'button',
                                       caption: '<?php echo $this->translate('undo_record'); ?>',
                                       icon: 'w2ui-icon-info'
                                   }
                               ];
              	     menu.push(edit);
                	   var i=0;
                       $.each(gridMenu, function( index, value){
                           // if there is a item with type remove, remove "Edit item"
                           if(value.type != undefined && value.type == 'noedit' ) {
                               menu.pop();
                           }
                          if(value.type == undefined && value.type != 'list' ){
                         	    var link = {
                                  id: value._id,
                                  text: value.link,
                                  actionExecution: value.actionExecution,
                                  viewId: value.viewId,
                                  parentType: value.parentType,
                                  objectType:value.objectType,
                                  method:value.method,
                                  serviceName:value.serviceName,
                                  params:value.params,
                                  serviceMethod:value.serviceMethod,
                                  template:value.template,
                                  actionResponse: value.actionResponse,
                                  icon: 'fa-edit'
                              }
                         	    menu.push(link);
                          } else {
                              // if there is a item with type remove, remove "Edit item"
                              if(value.type != undefined && value.type == 'noedit' ) {
                                  return true;
                              }
                              if( i ==  0) {
                              	menuTop = [];
                                  i = 1;
                              }
                          	 var link = {
                                       id: value.method,
                                       text: value.link,
                                       actionExecution: value.actionExecution,
                                       viewId: value.viewId,
                                       parentType: value.parentType,
                                       objectType:value.objectType,
                                       method:value.method,
                                       serviceName:value.serviceName,
                                       params:value.params,
                                       serviceMethod:value.serviceMethod,
                                       template:value.template,
                                       actionResponse: value.actionResponse,
                                       icon: value.icon
                                   }
                          	 menuTop.push(link);
                          	//configs.toolbar.get('topmenu').items.push(link);
                          }
                     	});
                      configs.menu = menu;
                      configs.toolbar.items[0].items = menuTop;
                      var objectType = id;
                      console.log("MENU");
                      console.log(menu);
                    if( parentType.match('^get') || parentType.match('^cg?')){
                      	 parentType = parentType.substr(3);          	 
                       }
                   
                   
                     if (!w2ui[gridUi]) {
        //console.log(w2ui[layout + '<?php echo $this->viewId;?>']);
                         w2ui[layout + '<?php echo $this->viewId;?>'].content(location, $().w2grid(configs));
                     }
                   
                     w2ui[gridUi].header = header;    
                     w2ui[gridUi].parentType = parentType.split("[")[0];
                     w2ui[gridUi].parentId = idParent;
                     if( objectType.match('^get') ){
                    	 w2ui[gridUi].prefix = "get";
                    	 objectType = objectType.substr(3);	 
                     }
                     if( objectType.match('^cg?')){
                    	 w2ui[gridUi].prefix = "cgt";
                    	 objectType = objectType.substr(3);	 
                     }
                     w2ui[gridUi].objectTypeRef = objectType;
                     if( w2ui[gridUi].mainObjectTypeRef == undefined)
                  	   w2ui[gridUi].mainObjectTypeRef = objectType;
                     objectTypeList = objectType.split(".");
                     
                     //console.log(w2ui[gridUi].parentType+' -- '+shortName);
                
                     parentType = parentType.split("[")[0];
                     var lastIndex = objectTypeList.length;
                     w2ui[gridUi].objectType = objectTypeList[lastIndex-1];
                     
                     //if( load ){ 
                     reloadGridData(shortName,parentType,idParent, objectType,load, null, searchOnly,  w2ui[gridUi].prefix);
                     //}
                }, this),
                dataType : 'json'
            });
			})
	});
}


function simpleReloadGridData(shortgridName, parentType,parentId, objectType, refresh , searchData, popup , searchOnly ){
    if(popup){
    	var gridName = shortgridName;
    }else {            
        var gridName = shortgridName + '<?php echo $this->viewId;?>';
    }
    if(  w2ui[gridName] != undefined) {
         objectTypeRef = objectType;
         if( objectType.match('^get') || objectType.match('^cg?')){
       	 }else{
       		   objectTypeRef =  w2ui[gridName].prefix +objectType;
         }

         if( parentId == undefined){    
      	    parentId = 0;  
     	    w2ui[gridName].limit = 0;
         } 
         else{
     	    w2ui[gridName].limit = 30;
     	 }
         if( searchOnly == undefined ){
      	      //console.log("simpleReload2" + " - "+ objectType+" -- parent"+parentId);
       	       w2ui[gridName].url= $('#urlAjax').val()+"/getMethodResult?objectType="+parentType+"&methodName="+objectTypeRef+"&id="+parentId+"&viewId="+"<?php echo $this->viewId; ?>"+"&gridId="+shortgridName;
       	 } else {
         	   //console.log("simpleReload3" + " - "+ objectType+" -- parent"+parentId);
        	  w2ui[gridName].url= $('#urlAjax').val()+"/getMethodResult?objectType="+parentType+"&methodName="+objectTypeRef+"&id="+parentId+"&viewId="+"<?php echo $this->viewId; ?>"+"&gridId="+shortgridName+"&searchOnly="+searchOnly;
      	 }
         if( w2ui[gridName].backupUrl == undefined){
              w2ui[gridName].backupUrl = w2ui[gridName].url;
         }
         w2ui[gridName].reload();
    }
    //w2ui[gridName].unlock();
}


function createTempChildGrid(event, grid, parentType,  objectChildList, size = 0, grids = []){
	console.log(event);
	console.log("createTempChildGrid-"+parentType);
    if (w2ui.hasOwnProperty('subgrid-'+grid.name+"-"+event.recid)) w2ui['subgrid-'+grid.name+"-"+event.recid].destroy();
    var shortgridName = 'subgrid-'+grid.name;
    var longgridName = 'subgrid-'+grid.name+"-"+event.recid;
    $('#' + event.box_id).css({ margin: '0px', padding: '0px', width: '100%'  });
    console.log("load" + size);
    if(configGrid == undefined){
    	configGrid = [];
    }
    if(configGrid[shortgridName] == undefined){
        configGrid[shortgridName] = [];
        configGrid[shortgridName].columns = [];
        configGrid[shortgridName].init = true;
        configGrid[shortgridName].expandChildren = false;
    }
    objectChildren = objectChildList.split(".");
    objectChild = objectChildren[0];
    console.log(objectChildren);
    if(objectChildren.length > 1){
    	configGrid[shortgridName].expandChildren = true;
    	objectChildList = objectChildList.substr(objectChildList.indexOf(".",objectChildList)+1);
    } else{
    	configGrid[shortgridName].expandChildren = false;
    	objectChildList = "";
    }
    configGrid[shortgridName].pType = objectChild;
    grids.push(grid);
    configGrid[shortgridName].config = {
            name: 'subgrid-'+grid.name+"-"+event.recid,
            style : 'border: 1px solid black; background-color: rgba(0, 0, 243, 0.5);;',
            show: { 
                columnHeaders: true,
          	  toolbar   :  grid.toolbarExpand ,
          	  expandColumn: configGrid[shortgridName].expandChildren,
          	 // footer    : true
        	  },
            fixedBody: false,
            columns: configGrid[shortgridName].columns,
           
            multiSearch : true,
            searches: [{ field: 'recid', caption: 'ID ', type: 'int' }],
            reorderColumns: true,
            //onExpand: function (event) {
            //    console.log('objectChild'+ configGrid[shortgridName].pType+ " -- "+ objectChild);
            //    console.log( w2ui[longgridName] );
            //    createTempChildGrid(event, this, configGrid[shortgridName].pType , objectChildList, w2ui[longgridName].height, grids);

            //},
            toolbar: {
              items: [
                  {
                      type :  'menu', id:'menu', caption:  '<?php echo $this->translate('Menu'); ?>', icon: 'fa-table'
                  }
              ],
             
              style : 'background-color: white',
              onClick: function (eventClick) {
                 console.log(eventClick);
                  if (eventClick.target == 'menu:add') {
                      //w2ui.grid.add({ recid: '' });
                  	openAddPopup(objectChild,parentType,event.recid, shortgridName,eventClick.recid,parentType,"new");
                  
                  }
                  else if (eventClick.target == 'menu:delete') {
                  	w2confirm('<?php echo $this->translate('are_you_sure'); ?>', function btn(answer) { 
                      	if(answer=='Yes')
                          { // Yes or No -- case-sensative
							w2ui[longgridName].lock('Loading...', true);
                          $.ajax({
                              type : 'POST',
                              url: $('#urlAjax').val()+"/deleteobjects",
                              data :  {
                                 	"parentId" : event.recid,
                              	"parentType" : ""+parentType,
                                  "objectType" : objectChild,
                                  "data" : w2ui[longgridName].getSelection()
                              },
                              success:$.proxy(function(result){
									w2ui[longgridName].unlock();
                                  if(result.success) {
                                      selectedItems = [];
                                      reloadChildGridData(w2ui['subgrid-'+grid.name+"-"+event.recid].url ,grid, longgridName,event.fbox_id);
                                      
                                  }
                              }, this),
                              dataType : 'json'
                          });
                          }
                  	});
                                      
                  }
                  else if (eventClick.target == 'menu:add-field') {
                      openPopup(objectChild);
                  }
                  else if (eventClick.target == 'menu:undo') {  
                  	undoGrid(parentType ,event.recid, longgridName);
                  }
                  else if (eventClick.target == 'menu:print') {
                  	var searchString= JSON.stringify(w2ui[longgridName].searchData);
                 	    var searchField= JSON.stringify(w2ui[longgridName].searchField);
                      var sortData = JSON.stringify(w2ui[longgridName].sortData);
                      window.location = $('#urlAjax').val()+
                      "/export?object=get"+objectChild+
                      "&viewId="+"<?php echo $this->viewId?>"+
                      "&gridId="+longgridName+ 
                      "&parentObject="+parentType+
                      "&parentId="+event.recid+
                      "&searchData="+searchString+
                      "&searchField="+searchField+
                      "&sortData="+sortData;
                  }
                  else {
                    console.log(eventClick);
                    //id = event.recid
                    var idTo = eventClick.recid;
                     if( event.subItem != undefined ){
                        event.menuItem = [];
                     	  event.menuItem = event.subItem;
                        event.menuItem.parentId = event.recid;
                   	  event.menuItem.objectType = parentType;
                   	  event.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                    	  var nameG = longgridName;
                        executeMenuActivity( eventClick.menuItem, idTo , nameG);
                     }
                  }
                }
              },
              onSearch : function (eventClick) {               
              	eventClick.onComplete = function () {
                     console.log(eventClick);
                     w2ui[longgridName].searchData =eventClick.searchData ;
                     w2ui[longgridName].searchField =eventClick.searchField ;
                  }
              },
              onMenuClick: function(eventIn ) {
              	console.log(eventIn);
              	if (eventIn.menuItem.id == 1) {
                  	openAddPopup(objectChild,parentType,event.recid, longgridName,eventIn.recid,objectChild, 'edit');               
                  	     
                  }  else if (eventIn.menuItem.id != '') {
                      if( eventIn.menuItem.actionExecution == "popup"){
                      	//console.log('start popup'+event.menuItem.viewId);
                          //popup(""+event.menuItem.viewId, ""+event.menuItem.parentType, ""+event.menuItem.objectType,""+event.menuItem.method,""+parentId);    
                          popup(""+eventIn.menuItem.viewId, objectChild, eventIn.recid, ""+eventIn.menuItem.parentType,""+eventIn.menuItem.objectType,""+eventIn.menuItem.method);     
                                                    
                      } else if( eventIn.menuItem.actionExecution == "inputform"){
                          var objectTypeRef = w2ui[longgridName].objectTypeRef;
                          openAddPopup(eventIn.menuItem.method, objectChild,eventIn.recid, longgridName, eventIn.recid,objectChild, 'inputForm');
                      }
                      else if( eventIn.menuItem.actionExecution == "service" || eventIn.menuItem.actionExecution == "method"){
                      	console.log(eventIn);
                      	eventIn.menuItem.workspaceId= "<?php echo $this->sessionHelper()->getWorkspaceId();?>";
                          executeMenuAction(eventIn, eventIn.recid, event.recid);

                      }else if (eventIn.menuItem.id != '') {
                   	   var objectTypeRef = w2ui[longgridName].objectTypeRef;
                  	    //console.log("menu load= "+event );
                  	    w2ui['layoutMain'].load(
                  	    	    'main',
                  	    	      $('#urlAjax').val()+"/view/"+result.items[0].link+
                  	    	      "?layout=layoutMain&parentType="+parentType+
                  	    	      "\\"+objectTypeRef+"&parentId="+objectChild+
                  	    	      "&viewId="+eventIn.menuItem.id+"&objectId="+eventIn.recid
                  	    	      );
                  	    }
                  }
              },
              onDblClick: function (eventClick){ 
              	console.log('dblclick'); 
              	eventClick.onComplete = function () {     
              	 openAddPopup(objectChild, parentType,event.recid, shortgridName,eventClick.recid,objectChild, 'edit');   
              	}
              },
              onSelect: function (eventClick) {
               console.log('select');
              // w2ui['gridRef<?php echo $this->viewId;?>'].lock('Loading...', true); 
               eventClick.onComplete = function () {
             	     var sel = w2ui[longgridName].getSelection();
              	 console.log('select '+sel.length);
                	 if( sel.length > 1 ){
                   	console.log('select');
             		    var sel = w2ui[longgridName].getSelection();                
             	     }

             	  }
              },
              onUnselect : function (eventClick) {
              	eventClick.onComplete = function () {
               	 var sel = w2ui[longgridName].getSelection();
                 	 if( sel.length > 0 ){
              	    console.log('unselect...');
              	    var sel = w2ui[longgridName].getSelection();      
                     }
                 	}
              },
              onStateSave : function (eventClick) {
                //console.log(event);
                $.ajax({
                    type : 'POST',
                    url: $('#urlAjax').val()+"/savestate",
                    data :  {
                        "view" : "<?php echo $this->viewId;?>",
                        "grid": shortgridName,
                        "data" : eventClick.state,
                        "columns" : eventClick.columns
                    },
                    success:$.proxy(function(result){

                    }, this),
                    dataType : 'json'
                });

            }
           };
    
    if(  configGrid[shortgridName].init == true)
    {
    	configGrid[shortgridName].init = false;
    var url =$('#urlAjax').val()+"/getMethodResult?objectType="+parentType+"&methodName="+"get"+objectChild+"&id="+event.recid +"&viewId="+"<?php echo $this->viewId;?>"+"&gridId="+shortgridName;
    $.ajax({
            type : 'POST',
            url: url,
            success:$.proxy(function(result){
            	configGrid[shortgridName].records = result.records;
            	configGrid[shortgridName].columns = result.columns;
         	    console.log(configGrid[shortgridName].columns);
         	    //data  = loadGrid('subgrid-' + event.recid ,'<?php echo $this->id; ?>' , event.recid, "getOrder");
          	    //$('#' + event.box_id).w2grid(
          	   
            	
                  $.ajax({
                      type : 'POST',
                       url: $('#urlAjax').val()+"/getMethodResultListReference?objectType=View&methodName=getComponent[name-"+shortgridName+"].getContextmenu&id="+"<?php echo $this->viewId; ?>",
                     
                       success:$.proxy(function(resultNew){
                           configGrid[shortgridName]['contexMenu'] = resultNew;
                      	   initGridMenu( resultNew, configGrid[shortgridName].config );
                           if( objectChild.match('^get') || objectChild.match('^cg?')){
                        	   objectChild = objectChild.substr(3);
                        	   objectChild1 = objectChild.split("[")[0];
                           }
                         
                           $('#' + event.box_id).w2grid(configGrid[shortgridName].config);
                           w2ui[longgridName].parentType = parentType;
                           w2ui[longgridName].objectTypeRef = objectChild;
                           reloadGridDataFull(shortgridName, longgridName,parentType,event.recid, objectChild,false);
                           console.log("load2");
                      	 $.each(w2ui, function (index, value) {
                              if (index.indexOf("_toolbar") === -1 && index !== "grid") {
                                  value.resize();
                              }
                          });
                       	
                         w2ui['subgrid-'+grid.name+"-"+event.recid].url = $('#urlAjax').val()+"/getMethodResult?objectType="+parentType+"&methodName="+"get"+objectChild+"&id="+event.recid +"&viewId="+"<?php echo $this->viewId;?>"+"&gridId="+shortgridName;
                        
                         reloadChildGridData(w2ui['subgrid-'+grid.name+"-"+event.recid].url ,grid, longgridName,event.fbox_id, size, grids);
                       	 
                           //}
                      }, this),
                      dataType : 'json'
                  });
                 	
            	
           	         
            }, this),
            dataType : 'json'
    });
    }
    else{
           	 initGridMenu(  configGrid[shortgridName]['contexMenu'], configGrid[shortgridName].config );
             if( objectChild.match('^get') || objectChild.match('^cg?')){
          	   objectChild = objectChild.substr(3);
          	   objectChild1 = objectChild.split("[")[0];
             }
           
             $('#' + event.box_id).w2grid(configGrid[shortgridName].config);
             w2ui[longgridName].parentType = parentType;
             w2ui[longgridName].objectTypeRef = objectChild;
             reloadGridDataFull(shortgridName, longgridName,parentType,event.recid, objectChild,false);
             console.log("load2");
        	    $.each(w2ui, function (index, value) {
                if (index.indexOf("_toolbar") === -1 && index !== "grid") {
                    value.resize();
                }
            });
         	
           w2ui['subgrid-'+grid.name+"-"+event.recid].url = $('#urlAjax').val()+"/getMethodResult?objectType="+parentType+"&methodName="+"get"+objectChild+"&id="+event.recid +"&viewId="+"<?php echo $this->viewId;?>"+"&gridId="+shortgridName;
          
           reloadChildGridData(w2ui['subgrid-'+grid.name+"-"+event.recid].url ,grid, longgridName,event.fbox_id, size, grids);
    }
       
}


function  initGridMenu( result, configs ){
	gridMenu = [];
	if(result.items !== undefined){	
		   	gridMenu = result.items.slice();       		   	
	 }
     var edit = { id: 1, text: 'Edit Item', icon: 'fa-edit' };
	     var menu = [];
	     var menuTop = [
                    {
                        id: 'add',
                        type: 'button',
                        caption: '<?php echo $this->translate('common_add_record'); ?>',
                        icon: 'w2ui-icon-plus'
                    },
                    {
                        id: 'delete',
                        type: 'button',
                        caption: '<?php echo $this->translate('common_delete_record'); ?>',
                        icon: 'w2ui-icon-plus'
                    },
                    {
                        id: 'add-field',
                        type: 'button',
                        caption: '<?php echo $this->translate('common_add_field'); ?>',
                        icon: 'w2ui-icon-plus'
                    },
                    {   id: 'export',
                        type: 'button',
                        caption: '<?php echo $this->translate('export_field'); ?>',
                        icon: 'w2ui-icon-info'
                    },
                    {   id: 'print',
                        type: 'button',
                        caption: '<?php echo $this->translate('print_field'); ?>',
                        icon: 'w2ui-icon-info'
                    },
                    {   id: 'undo',
                        type: 'button',
                        caption: '<?php echo $this->translate('undo_record'); ?>',
                        icon: 'w2ui-icon-info'
                    }
                ];
	     
	     menu.push(edit);
     var i=0;
     $.each(gridMenu, function( index, value){
         // if there is a item with type remove, remove "Edit item"
         if(value.type != undefined && value.type == 'noedit' ) {
             menu.pop();
         }
        if(value.type == undefined && value.type != 'list' ){
       	    var link = {
                id: value._id,
                text: value.link,
                actionExecution: value.actionExecution,
                viewId: value.viewId,
                parentType: value.parentType,
                objectType:value.objectType,
                method:value.method,
                serviceName:value.serviceName,
                params:value.params,
                serviceMethod:value.serviceMethod,
                template:value.template,
                actionResponse: value.actionResponse,
                icon: 'fa-edit'
            }
       	    menu.push(link);
        } else {
            // if there is a item with type remove, remove "Edit item"
            if(value.type != undefined && value.type == 'noedit' ) {
                return true;
            }
            if( i ==  0) {
            	menuTop = [];
                i = 1;
            }
        	 var link = {
                     id: value._id,
                     text: value.link,
                     actionExecution: value.actionExecution,
                     viewId: value.viewId,
                     parentType: value.parentType,
                     objectType:value.objectType,
                     method:value.method,
                     serviceName:value.serviceName,
                     params:value.params,
                     serviceMethod:value.serviceMethod,
                     template:value.template,
                     actionResponse: value.actionResponse,
                     icon: value.icon
                 }
        	 menuTop.push(link);
        	//configs.toolbar.get('topmenu').items.push(link);
        }
   	});
    configs.menu = menu;
    configs.toolbar.items[0].items = menuTop;
}

function reloadChildGridData(url, grid, gridName,fbox_id, size = 0, grids =[]){

	    $.ajax({
           type : 'POST',
           url: url,
           success:$.proxy(function(result){
        	   w2ui[gridName].records = result.records;
        	   w2ui[gridName].columns = result.columns;
        	   w2ui[gridName].resize();
        	   w2ui[gridName].reload();
               var sum = 0;
               if(result.summary.length > 0){
                 	 sum = 25;
               }
               var heightTot= size + result.records.length*25 + 28+sum;
               if(grid.toolbarExpand == true) {
              	 heightTot= heightTot+39;
               }
               var heightGr = ''+ heightTot+'px';
               w2ui[gridName].heightCells = heightGr;
               w2ui[gridName].fboxid = fbox_id;
               
               $('#' + fbox_id).css({ margin: '0px', padding: '0px', width: '100%' , height: heightGr });
               $.each(grids, function( index, value){
                   console.log(value);
            	   $('#' + w2ui[value.name].fboxid).css({ margin: '0px', padding: '0px', width: '100%' , height: heightGr});
                  // value.resize();
               });
               $.each(grids, function( index, value){
            	   console.log(value);
                   console.log("resize"+ heightGr);
            	   //$('#' + w2ui[value.name].fboxid).css({ margin: '0px', padding: '0px', width: '100%' , height: size });
                   value.resize();
  
               });
               grid.resize();
    })
   });

}


function reloadGridData(shortgridName, parentType,parentId, objectType, refresh, searchData , prefix = 'get' ){
	selectedItems = [];
	selectedRefItems = [];
	selectedRef2Items = [];
	var gridName = shortgridName + '<?php echo $this->viewId;?>';
	console.log("reload" + " - "+ gridName+" - "+objectType);
	reloadGridDataFull(shortgridName, gridName, parentType,parentId, objectType, refresh, searchData, prefix)

}

function reloadGridDataFull(shortgridName, gridName, parentType,parentId, objectType, refresh, searchData,prefix = 'get'){
	if( refresh == true ){
		w2ui[gridName].clear();
	}
	objectTypeRef = objectType;
	if( objectType.match('^get') || objectType.match('^cg?')){

	}else{
		objectTypeRef = w2ui[gridName].prefix +objectType;
	}
	console.log("reloadGridDataFull" + " - "+ w2ui[gridName]);
	w2ui[gridName].lock('Loading...', true);
	$.ajax({
		type : 'POST',
		//url: $('#urlAjax').val()+"/getlist?objectType="+"<?php echo $this->id; ?>"+"&objectId="+"<?php echo $this->objectId; ?>",
		url: $('#urlAjax').val()+"/getMethodResult?objectType="+parentType+"&methodName="+objectTypeRef+"&id="+parentId+"&viewId="+"<?php echo $this->viewId; ?>"+"&gridId="+shortgridName+"&column=true",
		data :  {
			"searchData" : searchData
		},
		success:$.proxy(function(result){

			//$('#main').w2layout(config.layout);
			//w2ui[gridName].records = result.records;
			var columnsN = [];
			$.each(result.columns, function( index, value){

				var link = {
					field: value.field,
					caption: value.caption,
					size: value.size,
					sortable: value.sortable,
					hidden :value.hidden,
					resizeable: value.resizeable,
					render: function (record, index, col_index) {
						//console.log(record);
						if(record == undefined){
							  return '<div></div>' ;
						}
						var vals = Object.keys(record)[0];
						//console.log("rec"+Object.keys(record)[0]);
						var valueFirst = '';
						valueFirst =  record[vals];

						if(valueFirst == undefined){valueFirst = '';}
						//else{
						var tooltipLine  = '';
						var tooltiptext  = '';
						if(record.tooltip !=undefined){
							tooltipLine = record.tooltip;
						}
						if(record.conflict_tooltip !=undefined){

							$.each(record.conflict_tooltip, function( indexT, valueT){
								tooltipLine = tooltipLine+ '   <tr><td style="padding: 6px;"><i class="fa fa-ban text-danger" aria-hidden="true"></i></td><td style="padding: 3px;">'+valueT+'</td></tr>';
							});
						};
						var html = '';

						if( valueFirst.toString().lastIndexOf('-',0) !== 0){
							valueFirst  = this.getCellValue(index, col_index);
							if(value.render != undefined){

								valueFirst = w2utils.formatters['conditionformatter'](valueFirst);
							}
							if(tooltipLine.length > 1 || tooltiptext.length > 1){

								var html = '<div style="padding: 10px">'+
									tooltiptext +
									' <table border="0">'+
									tooltipLine +
									' </table>'+
									'</div>';
								return '<div onmouseover="$(this).w2tag( w2utils.base64decode(\''+ w2utils.base64encode(html) +'\'), { left: -15 });" '+
									' onmouseout="$(this).w2tag(\'\');">' + valueFirst+ '</div>' ;
								//return '<div onmouseover="$(this).w2overlay( w2utils.base64decode(\''+ w2utils.base64encode(html) +'\'), { left: -15 });" '+
								//' onmouseout="$(this).w2overlay(\'\');">' + valueFirst+ '</div>';
							}
						} else{
							var vals = Object.keys(record)[col_index];
							valueFirst = record[vals];
						}
						if(valueFirst != undefined){
							//this.getCellValue(index, col_index)
							return '<div>'+ valueFirst+ '</div>' ;
						}

						return '<div>'+ '-'+ '</div>' ;
						//}
					}
				}
				columnsN.push(link);
			});
			w2ui[gridName].columns = columnsN;
			//if(result.searches){
			console.log(result);

			w2ui[gridName].searches = result.searches;
			w2ui[gridName].multiSearch = true;
			w2ui[gridName].clear();
			//}
			if(refresh == true ){
				simpleReloadGridData(shortgridName, parentType,parentId, objectType, refresh, searchData );
				//   w2ui[gridName].reload();

			} else {
				w2ui[gridName].refresh();
			}
			w2ui[gridName].unlock();

		}, this),
		dataType : 'json'
	});


}

function initFormatters() {
	w2utils.formatters['conditionformatter'] = function (value, params) {
		if (value == null || value === '') return '';
		if(value === 'true'){
			   return '<i class="fa fa-ban text-danger" aria-hidden="true"></i>';
		} else if(value === 'false'){
			   return '<i class="fa fa-check-square-o" aria-hidden="true"></i>';
		}
		return value;
	}
}


function cleanGrid(compShortName){
	gridName = compShortName + '<?php echo $this->viewId;?>'
	    w2ui[gridName].records = [];
	//w2ui[gridName].columns = [];
	    //w2ui[gridName].searches = [];
	    w2ui[gridName].clear();    	
	    w2ui[gridName].refresh();
}

function getEventsSchemaData(params){
		
	var event_str = params.referencelink;
	var title_str = params.definition;
	var events_schema_str = params.schema;
	var action_str = params.actionResponse;
	var schema_obj = eval("(" + events_schema_str + ")");
	var schema_model = schema_obj.model;
	var event_schema = kendo.data.SchedulerEvent.define(schema_model);

	
	EVENT_NAME = title_str;
	var formattedDate = moment().add(10, 'days').format('DD-MM-YYYY');
	postArgs1 = new Object(); 
	postArgs1.field = STORAGE["<?php echo $this->viewId;?>"].STARTFIELD;
	postArgs1.type = "date";
	postArgs1.operator = "less";
	postArgs1.value = formattedDate;
	var formattedDateW = moment().subtract(10, 'days').format('DD-MM-YYYY');
	postArgsE1 = new Object(); 
	//{"field":"name","type":"date","operator":"between","value":["7/26/2016","7/27/2016"]}
	postArgsE1.field = STORAGE["<?php echo $this->viewId;?>"].ENDFIELD;
	postArgsE1.type = "date";
	postArgsE1.operator = "more";
	postArgsE1.value = formattedDateW;
	data1 = new Object();
    data1.search = [];
    data1.search.push(postArgs1);
    data1.search.push(postArgsE1);
    data1.searchLogic = "and";
    
	postArgs = new Object(); 
	postArgs.field = STORAGE["<?php echo $this->viewId;?>"].STARTFIELD;
	postArgs.type = "date";
	postArgs.operator = "less";
	postArgs.value = formattedDate;
	var formattedDateW = moment().subtract(10, 'days').format('DD-MM-YYYY');
	postArgsE = new Object(); 
	//{"field":"name","type":"date","operator":"between","value":["7/26/2016","7/27/2016"]}
	postArgsE.field = STORAGE["<?php echo $this->viewId;?>"].ENDFIELD;
	postArgsE.type = "date";
	postArgsE.operator = "more";
	postArgsE.value = formattedDateW;
	data2 = new Object();
    data2.search = [];
    data2.search.push(postArgs);
    data2.search.push(postArgsE);
    data2.searchLogic = "and";
    
	data = new Object();
    data.search = [];
    data.search.push(data1);
    data.search.push(data2);
    data.limit = 1000;
    data.offset = 0;
    data.searchLogic = "or";
    //console.log(JSON.stringify(data));
    STORAGE["<?php echo $this->viewId;?>"].OBJECT_TYPE = event_str;
    STORAGE["<?php echo $this->viewId;?>"].METHOD_NAME = action_str;
    STORAGE["<?php echo $this->viewId;?>"].ORIGINAL_METHOD_NAME = action_str;
	return new kendo.data.SchedulerDataSource({
		batch: true,
		transport: {
		    sync: function() {
		        this.read();
		        console.log(' sync');
		      }, 
			read: {
				url: function (options) {
					if(options != undefined){
					var dataToSend = JSON.stringify(options);
					//console.log("dataToSend"+dataToSend);
					return $('#urlAjax').val()+"/getMethodResultListReference?objectType="+event_str+"&methodName="+action_str+"&id="+"<?php echo $this->parentId; ?>"+"&viewId="+"<?php echo $this->viewId; ?>"+"&gridId=schedulerevents&searchQ="+dataToSend;
					}
				},
				type: 'POST',
				dataType: 'json',
				data :  {
					search:data.search,
					limit:1000,
					offset:0,
					searchLogic:"and",
					
	             }
			},
			create: {
				url: $('#urlAjax').val()+"/execute",
				dataType: 'json',
				type: 'POST',
				data:{trans_type:'create'}
			},
			update: {
				url: $('#urlAjax').val()+"/execute",
				dataType: 'json',
				type: 'POST',
				data:{trans_type:'update'}
			},
			destroy: {
				url: $('#urlAjax').val()+"/deleteobjects",
				dataType: 'json',
				type: 'POST',
				data:{trans_type:'destroy'}
			},
			
			parameterMap: function(options, operation) {
				console.log( "parameterMap");
			    var d = new Date(MAINDATE).getTime();
				if (operation == "destroy"){
					console.log( options);
					console.log( operation);
					var lengthAr = options.models.length -1;
					var returnArray = {};
					returnArray.parentId = options.models[lengthAr].parents[0].$id;
					var relationRef = options.models[lengthAr].parents[0].$ref;
					relationRef = relationRef.capitalizeFirstLetter();
					var lgth = relationRef.length;
					relationRef = relationRef.substring(0,  lgth-1);
					returnArray.parentType = ""+relationRef;
					returnArray.objectType = ""+title_str;
					returnArray.id = options.models[lengthAr].recid;
					returnArray.actionExecution = "saveObject";
					returnArray.data = {};
					returnArray.data = [options.models[lengthAr].recid];
					return returnArray;
				}
				else if (operation !== "read") {	
					console.log("readingX..." );
					var returnArray = {};
					//console.log(options);

					if( STORAGE["<?php echo $this->viewId;?>"].PRIMARY_KEY != undefined ){
					   console.log("primary key");
					   parentIdNew = eval("("+"options.models[0]."+STORAGE["<?php echo $this->viewId;?>"].PRIMARY_KEY+")");
					}
					else {
						console.log("default key");
						parentIdNew = options.models[0].parents[0].$id;
					}
					returnArray.parentId = parentIdNew;
					var relationRef = options.models[0].parents[0].$ref;
					relationRef = relationRef.capitalizeFirstLetter();
					var lgth = relationRef.length;
					//returnArray = options.models[0];
					relationRef = relationRef.substring(0,  lgth-1);
					returnArray.parentType = ""+relationRef;
					returnArray.objectType = ""+title_str;
					returnArray.id = options.models[0].recid;
					returnArray.actionExecution = "saveObject";
					returnArray.data = {};
					//returnArray.data.Klant = options.models[0].Klant;
					keepData  = {};
					keepData = options.models[0];
					//console.log("KEY " + STORAGE["<?php echo $this->viewId;?>"].RELATION["key"]);
					if( STORAGE["<?php echo $this->viewId;?>"].RELATION["key"] != undefined ){
						   eval("("+"returnArray.data."+STORAGE["<?php echo $this->viewId;?>"].RELATION["key"] +'= {})');
						   eval("("+"returnArray.data."+STORAGE["<?php echo $this->viewId;?>"].RELATION["key"]+'.recid = options.models[0].'+STORAGE["<?php echo $this->viewId;?>"].RELATION["keyid"]+")");
					       eval("("+"returnArray.data."+STORAGE["<?php echo $this->viewId;?>"].RELATION["key"]+'.id = options.models[0].'+STORAGE["<?php echo $this->viewId;?>"].RELATION["keyid"]+")");
					}
				    returnArray.data.parent = options.models[0].parents;
				    returnArray.data.parent[0].$id = parentIdNew;
					returnArray.data.number = options.models[0].number;
					returnArray.data.recid = options.models[0].recid;
					//returnArray.data.parent = options.models[0].parents;
				    d = new Date(options.models[0].startdateu).getTime();
					//returnArray.data.startdateu = d;// options.models[0].startdateu;
	
					startdateA = eval("(" + STORAGE["<?php echo $this->viewId;?>"].DATE_MAPPING['startdateu'] + ")");
					//console.log("startdateu is"+startdateA['date']);
					if(startdateA['time']){
						   eval("("+"returnArray.data."+startdateA['date']+' = kendo.toString(new Date(d), "dd-MM-yyyy"))');
						   eval("("+"returnArray.data."+startdateA['time']+' = kendo.toString(new Date(d), "HH:mm"))');
					} else{
						 eval("("+"returnArray.data."+startdateA['date']+' = kendo.toString(new Date(d), "dd-MM-yyyy HH:mm"))');
					}
					
					//console.log(returnArray.data);
					//console.log("enddateu is"+STORAGE["<?php echo $this->viewId;?>"].DATE_MAPPING['enddateu']);
		            var d = new Date(options.models[0].enddateu).getTime();;
		            //returnArray.data.enddateu = d;//options.models[0].enddateu;
		        	enddateA = eval("(" + STORAGE["<?php echo $this->viewId;?>"].DATE_MAPPING['enddateu'] + ")");
		        	if(enddateA['time']){
		        		   eval("("+"returnArray.data."+enddateA['date']+' = kendo.toString(new Date(d), "dd-MM-yyyy"))');
		        		   eval("("+"returnArray.data."+enddateA['time']+' = kendo.toString(new Date(d), "HH:mm"))');
		        	} else{
		        		   //eval("("+"returnArray.data."+enddateA['date']+' = kendo.toString(new Date(d), "dd-MM-yyyy HH:mm"))');
		        	}
		            //console.log("end update out2");
		            //force refresh data after update
		            setTimeout(function() {
			            console.log('timer read.."');
			            //updateScheduler( d ,getSchedulerView(), 0);
		            	 //$("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").refresh();
		              }, 200);
		           
		            return returnArray; 	
					//return {models: kendo.stringify(options.models)};
					//return $.extend({}, options, {foo: "bar"}); 
				}
			}
		},
		requestEnd: function(e) {
		    var response = e.response;
		    var type = e.type;
			if ( (e.type == "destroy" || e.type == "create" ||  e.type == "update")  && e.response) {
				console.log("requestEnd");
			    console.log(e.response);
			    refreshAll();
			    setTimeout(function() {
		            updateScheduler(MAINDATE, getSchedulerView(), 0);
	              }, 200);
            }
		    
		  },
		batch: true,
		schema:{
			data: "items",
			model: event_schema,
			parse: function(data) {
				data_new = data.items;
				//console.log(event_schema);
				//console.log(data);
				if( keepData != null ){
					
					data = keepData ;
					keepData = null;
					return data;
				} else if( data_new != null ){
				  for (var i = 0; i < data_new.length; i++) {
					  //console.log("datareading...parsing");
					 // console.log(data_new);
					//console.log(data_new[i]);

					data_new[i].parents = [];
					data_new[i].parents = data_new[i].parent;
					delete(data_new[i].parent);
					
					if(data_new[i].startdateu){
						var da = ""+data_new[i].startdateu;
						if(da.length < 12 ){
							  data_new[i].startdateu = convertDateToUTC(new Date(data_new[i].startdateu*1000));
							  //console.log( data_new[i].startdateu);
						}else{
							data_new[i].startdateu = new Date(data_new[i].startdateu);
						}
					}
					if(data_new[i].enddateu){
						var da = ""+data_new[i].enddateu;
						  if(da.length < 12){
						      data_new[i].enddateu = convertDateToUTC(new Date(data_new[i].enddateu*1000));
						  } else {
						      data_new[i].enddateu = new Date(data_new[i].enddateu);
						  };
					}
				  }
				  
				}
				//console.log(data);
				return data;
			}
		}
	});	
}

function convertDateToUTC(date) { 
    return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()); 
}

function fitWidget() {
	console.log(" fit wdget");
	 var widget = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
	 console.log(widget);
     if (widget != undefined) {
         if (widget.view() != undefined) {
             if (widget.view().name == "MyCustomTimelistView") {
                 //console.log("custome view days: ", STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS);
                 widget.setOptions({
                     numberOfDays: STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
                     majorTick: 35 * STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
                     snap: false
                 });
             } else {
                 widget.setOptions({
                     numberOfDays: STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
                     //majorTick: 60*STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
                     snap: false
                 });
             }
         }
             var y = $('#main').position().top;
             //var layoutHeight = $(window).height() - y - 10;
             var height = $(window).innerHeight() - y - 50;
             
             console.log("fit widget" + height);
             //size widget to take the whole view
             widget.element.height(height);
             widget.resize(true);
             widget.refresh();
             //console.log("fit widget - out");
             setTimeout(function () {

                 var widget = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler");
                 if (widget.view().name == "MyCustomTimelistView") {
                     widget.setOptions({
                         numberOfDays: STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
                         majorTick: 35 * STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
                         snap: false
                     });
                 } else {
                     widget.setOptions({
                         numberOfDays: STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
                         //majorTick: 60*STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
                         snap: false
                     });
                 }
                 console.log("fit widget - in");
                 var height = $(window).innerHeight() - y - 140;
                 console.log("fit widget - in"+height);
                 //size widget to take the whole view
                 widget.element.height(height);
                 widget.resize(true);
                 widget.refresh();
                 console.log("fit widget - end");
             }, 4000);
         
     }
  }

  $(window).resize(function() {
    clearTimeout(window._resizeId);
    //console.log("fit widget - resize");
    window._resizeId = setTimeout(function() {
      //console.log("resize");
      fitWidget();
    }, 700);
  });

function getDateSchema(param) {
    //console.log('GET DATE SCEHMA ', param.schema);  
    return param.schema;
}

//1,977,828 operations/sec
String.prototype.capitalizeFirstLetter = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
};

function openDocument(url){
	window.open(url, "_blank").focus();
 }



function showMessage(text) {
    console.log('show', text);
    alert(text);
}

function getEventCountForRange(startSlot, endSlot, rowsCount) {
    var scheduler = $(startSlot.element).closest("[data-role=scheduler]").getKendoScheduler();

    var currentTimezoneOffset = kendo.date.MS_PER_MINUTE * new Date().getTimezoneOffset();
    var rangeStart = new Date(startSlot.start + currentTimezoneOffset);
    var rangeEnd = new Date(endSlot.end + currentTimezoneOffset);

    return scheduler.occurrencesInRange(rangeStart, rangeEnd).length - rowsCount + 1;
}
 
// resources will be returned from single api call alongwith data and schema (can be manipulated to desired key /value)
function getResources() {
	keepData = null;
	var viewId = "<?php echo $this->viewId;?>";
	
	//console.log(STORAGE);
	
	if( STORAGE == undefined){
	
		STORAGE = [];
		STORAGE['grid<?php echo $this->viewId;?>'] = [];
		STORAGE['gridRef<?php echo $this->viewId;?>'] = [];
		STORAGE['gridRef2<?php echo $this->viewId;?>'] = [];
		
	}

	if(STORAGE['grid<?php echo $this->viewId;?>'] == undefined){
		   STORAGE['grid<?php echo $this->viewId;?>'] = [];
		   STORAGE['gridRef<?php echo $this->viewId;?>'] = [];
		   STORAGE['gridRef2<?php echo $this->viewId;?>'] = [];
	
	}
	if( STORAGE[viewId] == undefined){
		var MORE_BUTTON_TEMPLATE = kendo.template(
        '<div style="width:#=width#px;left:#=left#px;top:#=top#px" class="k-more-events k-button"><span style="font-size:8pt; margin-top: 0;"> #=getEventCountForRange(startSlot, endSlot, rowsCount)# more events..</span></div>');
		STORAGE[viewId] = [];
		//STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE = [];
		STORAGE["<?php echo $this->viewId;?>"].DATE_MAPPING = [];
		STORAGE["<?php echo $this->viewId;?>"].SCHEDULER_CONTEXT_MENU = [];
		STORAGE["<?php echo $this->viewId;?>"].STARTTIME = "2015/1/1 8:00 AM";
		STORAGE["<?php echo $this->viewId;?>"].ENDTIME = "2015/1/1 10:00 PM";
		STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS = 7;
		STORAGE["<?php echo $this->viewId;?>"].VIEWS = [{type: "day", majorTick:60 , eventHeight: 3, dateHeaderTemplate: kendo.template("<strong>#=kendo.toString(date, 'm')#</strong>")},{type: "Month_"},{ type :"week", selected: true,eventHeight: 2, dateHeaderTemplate: kendo.template("<strong>#=kendo.toString(date, 'm')#</strong>")},"workWeek","agenda",{ type: "timelineMonth", majorTick:1420 , eventHeight: 10},{ type: "timelineWeek", majorTick: 180 , eventHeight: 10}];
		STORAGE["<?php echo $this->viewId;?>"].RELATION = [];
		STORAGE["<?php echo $this->viewId;?>"].LISTS = false;
		STORAGE["<?php echo $this->viewId;?>"].MAP = false;



		
	    MyCustomTimelistView = kendo.ui.TimelineMonthView.extend({
	    options: {
	      name: "MyCustomTimelistView",
	      title: "Timeline Week",
	      selectedDateFormat: "{0:D} - {1:D}",
	      selectedShortDateFormat: "{0:d} - {1:d}",
	      majorTick: 240,
	      numberOfDays: STORAGE["<?php echo $this->viewId;?>"].INITIALNUMBEROFDAYS,
	      snap : false
	    },
	    name: "MyCustomTimelistView",
	    calculateDateRange: function() {
	      //create the required number of days
	    	 var targetDate = new Date();
	    	 
	         var  selectedDate = this.options.date, 
	             start = kendo.date.dayOfWeek(selectedDate, selectedDate.getDay(), -1), //this.options.date,
	          //  start = kendo.date.dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),
	          idx, length,
	          dates = [];
	         console.log("in MyCustomTimelistView");
	         console.log(start);
	      for (idx = 0, length = this.options.numberOfDays; idx < length; idx++) {
	        dates.push(start);
	        start = kendo.date.nextDay(start);
	      }
	      this._render(dates);
	    },
	    previousDate: function() {
	      var date = new Date(this.startDate());

	      date.setDate(date.getDate() - this.options.numberOfDays);

	      return date;
	    }
	  });

	    Month_ = kendo.ui.MonthView.extend({
		    options: {
		      name: "Month",
		      title: "Timeline Month",
		      selectedDateFormat: "{0:D} - {1:D}",
		      selectedShortDateFormat: "{0:d} - {1:d}",
		      snap : false
		    },
		    name: "Month",
		    
		    _positionEvent: function(slotRange, element, group) {
                var eventHeight = this.options.eventHeight;
                var startSlot = slotRange.start;

                if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {
                    startSlot = slotRange.end;
                }

                var startIndex = slotRange.start.index;
                var endIndex = slotRange.end.index;
               // console.log("startSlot");
                console.log("in month"+startSlot);
                var eventCount = startSlot.eventCount;
                var events = kendo.ui.SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);
                var rightOffset = startIndex !== endIndex ? 5 : 4;

                events.push({
                    element: element,
                    start: startIndex,
                    end: endIndex
                });

                var rows = kendo.ui.SchedulerView.createRows(events);

                for (var idx = 0, length = Math.min(rows.length, eventCount); idx < length; idx++) {
                    var rowEvents = rows[idx].events;
                    var eventTop = startSlot.offsetTop + startSlot.firstChildHeight + idx * eventHeight + 3 * idx + "px";

                    for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {
                        rowEvents[j].element[0].style.top = eventTop;
                    }
                }


                if (rows.length > eventCount) {
                    for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {
                        var collection = slotRange.collection;

                        var slot = collection.at(slotIndex);

                        if (slot.more) {
                            return;
                        }

                        slot.more = $(MORE_BUTTON_TEMPLATE({
                            startSlot: slotRange.start,
                            endSlot: slotRange.end,
                            rowsCount: rows.length,
                            ns: kendo.ns,
                            start: slotIndex,
                            end: slotIndex,
                            width: slot.clientWidth - 2,
                            left: slot.offsetLeft + 2,
                            top: slot.offsetTop + slot.firstChildHeight + eventCount * eventHeight + 3 * eventCount
                        }));


                        this.content[0].appendChild(slot.more[0]);
                    }

                } else {
                    slotRange.addEvent({
                        element: element,
                        start: startIndex,
                        end: endIndex,
                        groupIndex: startSlot.groupIndex
                    });

                    element[0].style.width = slotRange.innerWidth() - rightOffset + "px";
                    element[0].style.left = startSlot.offsetLeft + 2 + "px";
                    element[0].style.height = eventHeight + "px";

                    group._continuousEvents.push({
                        element: element,
                        uid: element.attr(kendo.attr("uid")),
                        start: slotRange.start,
                        end: slotRange.end
                    });

                    element.appendTo(this.content);
                }
            },
		  });
	}
	$.ajax({
        type : 'POST',
        url: $('#urlAjax').val()+"/getMethodResultListReference?objectType=View&methodName=getComponent[name-schedulerevents].getParameter&id="+"<?php echo $this->viewId; ?>",
		success:$.proxy(function(result){
			
            SCHEDULER_AP = true;
            SCHEDULER_AP1 = true;
			var arrayLength = result.items.length;
			for(var i = 0; i < result.items.length; i++) {
			    var resultI = result.items[i];
			    if(resultI['schema'] == 'key'){
			    	//console.log("KEY " + resultI['definition']);
			    	STORAGE["<?php echo $this->viewId;?>"].RELATION['key'] = resultI['definition'];
			    	STORAGE["<?php echo $this->viewId;?>"].RELATION['keyid'] = resultI['name'];
			    }
			    if(resultI['name'] == 'schedulerschema'){
			    	var resources_info = resultI;
			    	var get_res_info = getResourcesSchemaData(resultI);
			    	RESOURCE_DEF = resultI.definition;
                    SCHEDULER_AP = false;
			    } else if(resultI['name'] == 'schedulerschema1'){
			    	var resources_info1 = resultI;
			    	var get_res_info1 = getResourcesSchemaData(resultI);
			    	RESOURCE_DEF1 = resultI.definition;
                    SCHEDULER_AP1 = false;
			    }else  if(resultI['name'] == 'eventschema'){
				    var resultA;
			    	resultA = getObjectFromArray(result.items, 'startdateu');
			    	STORAGE["<?php echo $this->viewId;?>"].STARTFIELD = resultA['referencelink'];
			    	resultA = getObjectFromArray(result.items, 'enddateu');
			    	STORAGE["<?php echo $this->viewId;?>"].ENDFIELD = resultA['referencelink'];
			    	//console.log("here " + STARTFIELD);
			    	var get_events_info = getEventsSchemaData(resultI);
			    }  else  if(resultI['name'] == 'slotmarkig'){
			    	STORAGE["<?php echo $this->viewId;?>"].SLOTMARK = true;
			    	 var resA = resultI.definition.split("/");
			    	STORAGE["<?php echo $this->viewId;?>"].STARTTIMEARG = resA[0];
			    	STORAGE["<?php echo $this->viewId;?>"].ENDTIMEARG = resA[1];
			       	STORAGE["<?php echo $this->viewId;?>"].TEXTSLOT = resA[2];
			    	STORAGE["<?php echo $this->viewId;?>"].TASKDATEARG =resultI.actionResponse;
			    	STORAGE["<?php echo $this->viewId;?>"].PAQTHARG = resultI.referencelink;
			    	STORAGE["<?php echo $this->viewId;?>"].SLOTSCHEMA = resultI.schema;
			    	STORAGE["<?php echo $this->viewId;?>"].RESSLOTARG =resultI.resource;
			    } if(resultI['definition'] == 'primary_key'){			    	
			    	STORAGE["<?php echo $this->viewId;?>"].PRIMARY_KEY =  resultI['name'];
			    	console.log("primary_key " + STORAGE["<?php echo $this->viewId;?>"].PRIMARY_KEY);
			    }
			    if(resultI['name'] == 'views'){
			    	var views = resultI;			    	
			    	STORAGE["<?php echo $this->viewId;?>"].VIEWS =  JSON.parse(getDateSchema(resultI));
			    	//console.log("here " + STORAGE["<?php echo $this->viewId;?>"].VIEWS);
			    }else  if(resultI['name'] == 'startdateu'){
			    	STORAGE["<?php echo $this->viewId;?>"].DATE_MAPPING['startdateu']= getDateSchema(resultI);
			    	STORAGE["<?php echo $this->viewId;?>"].STARTFIELD = resultI['referencelink'];
			    }else  if(resultI['name'] == 'enddateu'){
			    	STORAGE["<?php echo $this->viewId;?>"].DATE_MAPPING['enddateu']= getDateSchema(resultI);
			    	STORAGE["<?php echo $this->viewId;?>"].ENDFIELD = resultI['referencelink'];
			    }else  if(resultI['name'] == 'starttime'){
			    	STORAGE["<?php echo $this->viewId;?>"].STARTTIME = resultI['referencelink'];//"2015/1/1 0:00 AM";//resultI['referencelink'];
			    }else  if(resultI['name'] == 'endtime'){
			    	STORAGE["<?php echo $this->viewId;?>"].ENDTIME = resultI['referencelink'];//"2015/1/1 0:00 PM";//resultI['referencelink'];
			    }else  if(resultI['name'] == 'defaultView'){
			    	STORAGE["<?php echo $this->viewId;?>"].DEFAULTVIEW = resultI['referencelink'];		
			    }else  if(resultI['name'] == 'tooltiptemplate'){
			    	    TOOLTIP_TEMPLATE = getDateSchema(resultI);
			    }else  if(resultI['name'] == 'slottooltiptemplate'){
			    	    SLOT_TOOLTIP_TEMPLATE = getDateSchema(resultI);
			    }else  if(resultI['name'] == 'nodetemplate'){
				        NODE_TEMPLATE = getDateSchema(resultI);
			    }else  if(resultI['name'] == 'listReference'){
				        var strRef = resultI.schema;
				        console.log("GGGG"+strRef);
				       if(strRef.length < 2){
				    	   console.log("GGGG1"+strRef);
	                    	initiateGrid("grid", 'grid<?php echo $this->viewId;?>', 'left' , config.grid,resultI.referencelink,'<?php echo $this->parentType; ?>', resultI.header, true,  '<?php echo $this->parentId; ?>', true, 'layout');
	                    	  w2ui['layout<?php echo $this->viewId;?>'].sizeTo('left', "100%");
			            	w2ui['layout<?php echo $this->viewId;?>'].hide('bottom');  
		            	    w2ui['layout<?php echo $this->viewId;?>'].sizeTo('bottom', 0); //gridRef5 not exist for moment 
		            	    
		            	    w2ui['layout<?php echo $this->viewId;?>'].hide('main');
		            	    w2ui['layout<?php echo $this->viewId;?>'].sizeTo('main', 0); //gridRef5 not exist for moment 
		                    w2ui['layout<?php echo $this->viewId;?>'].hide('preview');
		                    w2ui['layout<?php echo $this->viewId;?>'].sizeTo('preview', 0); //gridRef5 not exist for moment 
		                    w2ui['layout<?php echo $this->viewId;?>'].hide('right');
		                    w2ui['layout<?php echo $this->viewId;?>'].sizeTo('right', 0); //gridRef5 not exist for moment 
		                    STORAGE["<?php echo $this->viewId;?>"].LISTS = true;
	       
				       }
				       else
				        if(w2ui['grid<?php echo $this->viewId;?>'] == undefined)  {		
					        	
      				        if(strRef.indexOf('&') > 0){

       				        	    var res = strRef.split("&");
       				        	   // $resource1 = res[0].split("[")[0];
        		                    initiateGrid("gridRef",'gridRef<?php echo $this->viewId;?>', 'main' , config.gridRef, res[0], resultI.definition, resultI.schemaTrans[0], false, 0 , false, 'layout');
        		                    //console.log("GGGG"+res[1]);
        		                    //console.log(res);
        		                    
                                    if(res[1].indexOf('+') > 0){
                                        var str1 = res[1].split("+");
                                        //console.log(str1);
                                         if(str1[1] != undefined)
                                         {
                                         
                                     	   initiateGrid("gridRef3",'gridRef3<?php echo $this->viewId;?>', 'top' , config.gridRef3,
                                       		    str1[1], res[0].substr(3), resultI.schemaTrans[2], false, 0 ,  false, 'layoutRight');
                                      	   if(str1[2] != undefined)
                                           {
                                              initiateGrid("gridRef4",'gridRef4<?php echo $this->viewId;?>', 'bottom' , config.gridRef4,
                                            		    str1[2], str1[0].substr(3), resultI.schemaTrans[3], false, 0 ,  false, 'layoutRight');
                                           }
                                        }

                                        initiateGrid("gridRef2",'gridRef2<?php echo $this->viewId;?>', 'preview' , config.gridRef2,  str1[0], resultI.definition, resultI.schemaTrans[1], false, 0 , false, 'layout');
                                      
                                    } else {
                                    	w2ui['layout<?php echo $this->viewId;?>'].hide('right');
                                        //console.log("HERE1");
                                        initiateGrid("gridRef2", 'gridRef2<?php echo $this->viewId;?>', 'preview', config.gridRef2, res[1], resultI.definition, resultI.schemaTrans[1], false, 0, false, 'layout');
                                    }
                                    
                                    var parRef  = resultI.referencelink;
        				            STORAGE["<?php echo $this->viewId;?>"].LISTS = true;
        				            if(parRef.indexOf('&') > 0){
        				            	STORAGE["<?php echo $this->viewId;?>"].LISTPARENT  =true;
        				            	var resX = parRef.split("&");
        				                initiateGrid("grid", 'grid<?php echo $this->viewId;?>', 'left' , config.grid,resX[0],'<?php echo $this->parentType; ?>', resX[0], true,  '<?php echo $this->parentId; ?>', true, 'layout');
      				        	        initiateGrid("gridRef5", 'gridRef5<?php echo $this->viewId;?>', 'bottom' , config.gridRef5,resX[1],'<?php echo $this->parentType; ?>', resX[1], true,  '<?php echo $this->parentId; ?>', true, 'layout');
        				        	
        				            	if(resultI['resource'] == 'map'){
     				            		   STORAGE["<?php echo $this->viewId;?>"].MAP = true;
     				            		    
     				            		    w2ui['layout<?php echo $this->viewId;?>'].content('right', htmlEditor());
      				            		    openMap();
        				            	}
								   //   linkDragDrop("grid_"+'gridRef5<?php echo $this->viewId;?>'+"_body", "grid_"+'grid<?php echo $this->viewId;?>'+"_body");
        				            }else {
       				            	    //w2ui['layout<?php echo $this->viewId;?>'].hide('right');
        				            	w2ui['layout<?php echo $this->viewId;?>'].hide('bottom');  
       				            	    w2ui['layout<?php echo $this->viewId;?>'].sizeTo('bottom', 0); //gridRef5 not exist for moment 
        			                    initiateGrid("grid", 'grid<?php echo $this->viewId;?>', 'left' , config.grid,resultI.referencelink,'<?php echo $this->parentType; ?>', resultI.header, true,  '<?php echo $this->parentId; ?>', true, 'layout');
        				            }
                                    //w2ui['grid<?php echo $this->viewId;?>'].link = '2';
        		                    //w2ui['gridRef<?php echo $this->viewId;?>'].link = '0';


        		                    setTimeout(function() {
        		                    	STORAGE['grid<?php echo $this->viewId;?>'].link = '2';
        		                    	STORAGE['gridRef<?php echo $this->viewId;?>'].link = '3';
        		                    	STORAGE['gridRef2<?php echo $this->viewId;?>'].link = '4';
        					        
        
        			               	      }, 4000);
        					     } else{
                                //console.log('tttt5555t');
        				        	var res = strRef.split("+");
        				        	
        				        	//console.log(' show _ '+res[0].substr(3));
        				        	var parRef  = resultI.referencelink;
        				            STORAGE["<?php echo $this->viewId;?>"].LISTS = true;
        				            if(parRef.indexOf('&') > 0){
        				            	STORAGE["<?php echo $this->viewId;?>"].LISTPARENT  =true;
        				            	var resX = parRef.split("&");
        				                initiateGrid("grid", 'grid<?php echo $this->viewId;?>', 'left' , config.grid,resX[0],'<?php echo $this->parentType; ?>', resX[0], true,  '<?php echo $this->parentId; ?>', true, 'layout');
      				        	        initiateGrid("gridRef5", 'gridRef5<?php echo $this->viewId;?>', 'bottom' , config.gridRef5,resX[1],'<?php echo $this->parentType; ?>', resX[1], true,  '<?php echo $this->parentId; ?>', true, 'layout');
        				        	
        				            	if(resultI['resource'] == 'map'){
       				            		   STORAGE["<?php echo $this->viewId;?>"].MAP = true;
          				            		
              				            	w2ui['layout<?php echo $this->viewId;?>'].content('right', htmlEditor());
              				            	openMap();
          				            	}
       				            	    
      				        	       
            				        	   //   linkDragDrop("grid_"+'gridRef5<?php echo $this->viewId;?>'+"_body", "grid_"+'grid<?php echo $this->viewId;?>'+"_body");
        				            }else {
       				            	    w2ui['layout<?php echo $this->viewId;?>'].hide('right');
          				                w2ui['layout<?php echo $this->viewId;?>'].hide('bottom');
       				            	    w2ui['layout<?php echo $this->viewId;?>'].sizeTo('bottom', 0); //gridRef5 not exist for moment
        			                    initiateGrid("grid", 'grid<?php echo $this->viewId;?>', 'left' , config.grid,resultI.referencelink,'<?php echo $this->parentType; ?>', resultI.header, true,  '<?php echo $this->parentId; ?>', true, 'layout');
        				            }
        				           // initiateGrid("grid", 'grid<?php echo $this->viewId;?>', 'left' , config.grid,resultI.referencelink,'<?php echo $this->parentType; ?>', resultI.referencelink,true,  '<?php echo $this->parentId; ?>', true, 'layout');
        		                    initiateGrid("gridRef",'gridRef<?php echo $this->viewId;?>', 'main' , config.gridRef, res[0], resultI.definition, resultI.schemaTrans[0], false, 0 , false, 'layout');
        		                    initiateGrid("gridRef2",'gridRef2<?php echo $this->viewId;?>', 'preview' , config.gridRef2,  res[1], res[0].substr(3), resultI.schemaTrans[1], false, 0 , false, 'layout');

        		                    setTimeout(function() {
        		                    	STORAGE['grid<?php echo $this->viewId;?>'].link = '0';
        		                    	STORAGE['gridRef<?php echo $this->viewId;?>'].link = '2';
        
        
        			               	      }, 3000);
        				        }
					          
			 			    } else {
			 			    	STORAGE["<?php echo $this->viewId;?>"].LISTS = true;
			 			    }
			    }
			}
            if( STORAGE["<?php echo $this->viewId;?>"].LISTS == true ){
            	//console.log(" in lists redraw");
            	//console.log(STORAGE["<?php echo $this->viewId;?>"]);
            	if(STORAGE["<?php echo $this->viewId;?>"].MAP == true){
         		   //console.log(" in map redraw");
	            	w2ui['layout<?php echo $this->viewId;?>'].content('right', htmlEditor());
	             }
            }else{
                //console.log(' hide panels');
                w2ui['layout<?php echo $this->viewId;?>'].hide('left');
                w2ui['layout<?php echo $this->viewId;?>'].hide('main');
                w2ui['layout<?php echo $this->viewId;?>'].hide('preview');
                w2ui['layout<?php echo $this->viewId;?>'].hide('right');
                w2ui['layout<?php echo $this->viewId;?>'].hide('bottom');
                var y = $('#main').position().top;
                //var layoutHeight = $(window).height() - y - 10;
                var height = $(window).innerHeight() - y ;
                w2ui['layout<?php echo $this->viewId;?>'].sizeTo('top', height);
            }
            if(SCHEDULER_AP == true){
                w2ui['layout<?php echo $this->viewId;?>'].hide('top');
                // var y = $('#main').position().top;
                //  var height = $(window).innerHeight() - y;
                //w2ui['layout<?php echo $this->viewId;?>'].sizeTo('top', height);
            }
            else {
                w2ui['layout<?php echo $this->viewId;?>'].hide('right');
            }
			//console.log("AAAAA");
			//console.log(STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE);
			if(SCHEDULER_AP1 == true){
				var get_res_info1 = ["empty"];
			}
            if(resources_info != undefined){
    			if(STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE == 'undefined' || STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE == undefined){
    				console.log("qq13");
    				MAINDATE = new Date();
        			$.when(get_res_info , get_res_info1 , get_events_info)
        			.done(function (response_resource, response_resource1, response_events) {
    
        				console.log("RESOURCES_DATASOURCE: ",response_resource1);
        				//console.log("STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE: ",response_events);
        				//console.log("TEXTE: ",resources_info.schema);
        				//console.log("TTILE: ", RESOURCE_DEF);
        				// resources schema field.id requires to be same as mapped in event schema to display resources i.e. customerId
        			   
            				STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_ID = resources_info.definition;
            				STORAGE["<?php echo $this->viewId;?>"].RESOURCES_NAME =  resources_info.resource;
            				STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_NAME = resources_info.definition;

            				var RESOURCES_TEXT = "text";//
            				var RESOURCES_VALUE = "value";
            				var RESOURCES_COLOR = "color";//
            				var RESOURCES_ORIENTATION = "vertical";
            				
            			    if(resources_info1 != undefined){
            			    	console.log("RESOURCES_DATASOURCE1:");
            			    	console.log(resources_info1);
            			    	STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_ID1 = resources_info1.definition;
                				STORAGE["<?php echo $this->viewId;?>"].RESOURCES_NAME1 =  resources_info1.resource;
                				STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_NAME1 = resources_info1.definition;
                				
            			    	var resource_val = [{
            						field: STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_ID,//title_str,
            						name: STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_NAME,
            						title:  RESOURCE_DEF1,
            						dataTextField: RESOURCES_TEXT,
            						dataValueField: RESOURCES_VALUE, // value field is also required to be mapped in resources schema i.e value : {from : Customer_value}
            						dataSource: response_resource
            				},
            				{
        						field: STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_ID1,//title_str,
        						name: STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_NAME1,
        						title:  RESOURCE_DEF,
        						dataTextField: RESOURCES_TEXT,
        						dataValueField: RESOURCES_VALUE, // value field is also required to be mapped in resources schema i.e value : {from : Customer_value}
       						    multiple: true,
        						dataSource: response_resource1
        					  }];
           			    	   STORAGE["<?php echo $this->viewId;?>"].RESOURCES_GROUP = {
                    		            resources: [ STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_NAME ],
                    		            orientation: RESOURCES_ORIENTATION
                    		   };
            			    }else {
            			    	var resource_val = [{
                						field: STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_ID,//title_str,
                						name: STORAGE["<?php echo $this->viewId;?>"].RESOURCES_FIELD_NAME,
                						title:  RESOURCE_DEF,
                						dataTextField: RESOURCES_TEXT,
                						dataValueField: RESOURCES_VALUE, // value field is also required to be mapped in resources schema i.e value : {from : Customer_value}
                						dataSource: response_resource
            					    }];
                			    	STORAGE["<?php echo $this->viewId;?>"].RESOURCES_GROUP = {
                						resources: [STORAGE["<?php echo $this->viewId;?>"].RESOURCES_NAME],
                						orientation: RESOURCES_ORIENTATION
                					};
            			    }
            				STORAGE["<?php echo $this->viewId;?>"].RESOURCES = resource_val;
            				STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE = response_events;
            				STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE.viewId  = "<?php echo $this->viewId;?>";
            				//console.log(STORAGE);
            				
            				getSchedulerContextMenu();
            				createScheduler();//RESOURCES,STORAGE["<?php echo $this->viewId;?>"].EVENT_DATASOURCE, RESOURCES_FIELD_NAME, RESOURCES_ORIENTATION,RESOURCES_NAME);
        				
        			    
        			});
    			}else{
    				console.log("create initialized scheduler");
    				//console.log(STORAGE);
    				createScheduler();
    			}
            }
        }, this),
        dataType : 'json'
    });
	
	
}

function linkDragDrop(fromGrid, toGrid){
 	 $('#main').on( 'drag dragstart dragend dragover dragenter dragleave drop', 'div[name="'+toGrid+'"]', function( e ){
	        // preventing the unwanted behaviours
	        e.preventDefault();
	        e.stopPropagation();
	        //console.log('stopping from dragging here');
	    }).on( 'dragover dragenter', 'div[name="'+toGrid+'"]', function(e) {
	    	// preventing the unwanted behaviours
	        e.preventDefault();
	        e.stopPropagation();
	        //console.log('dragging here');
	        $('div[name="'+toGrid+'"]').addClass( 'is-dragover' );
	    }).on( 'dragleave dragend drop', 'div[name="'+toGrid+'"]', function() {
	        $('div[name="'+toGrid+'"]').removeClass( 'is-dragover' );
	    }).on( 'drop', 'div[name="'+toGrid+'"]', function( e ) {
	        e.preventDefault();
	        e.stopPropagation();
	        var sel = w2ui[fromGrid].getSelection();
	        //console.log('transfer selected ids : ' + sel);
	        if($.isArray(sel)) {
	            for(var i in sel) {
	            	w2ui[toGrid].add( $.extend({}, w2ui[fromGrid].get(sel[i]), { selected : false }) );
	                w2ui[fromGrid].remove(sel[i]);
	            }
	        } else {
	        	w2ui[toGrid].add( $.extend({}, w2ui[fromGrid].get(sel), { selected : false }) );
	        	w2ui[fromGrid].remove(sel);
	        }
	        w2ui[fromGrid].selectNone();
	    });
}

function getObjectFromArray(items, name){
	var arrayLength = items.length;
	for(var i = 0; i < items.length; i++) {
	    var resultI = items[i];
	    if(resultI['name'] == name){
	    	return resultI;
	    }
	}
}

function openMap() {
    var lat = 51.730928;
    var lng = 5.33134;

    var mapOptions = {
        center: { lat: lat, lng: lng},
        zoom: 5
    };
    if (typeof google === 'object' && typeof google.maps === 'object') {
        var map = new google.maps.Map(document.getElementById('mapGoogle<?php echo $this->viewId;?>'),
            mapOptions);
        // position: new google.maps.LatLng(locations[i][1], locations[i][2]),
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(lat, lng),
            animation: google.maps.Animation.DROP
        });
        marker.setMap(map);
    }
}



function loadList(){

    kendo.culture().calendar.firstDay = 1;
   // console.log('loading list');
    if(typeof w2ui['layout<?php echo $this->viewId;?>'] === 'undefined')
    {
    	initFormatters();
        console.log("load list");
        $('#layout').w2layout(config.layout);
 	    w2ui['layoutMain'].content('main',w2ui['layout<?php echo $this->viewId;?>'] );
        w2ui['layout<?php echo $this->viewId;?>'].content('top','<div id="example" class="k-content" style="padding-top:10px;"><div id="editor"></div><div id="scheduler<?php echo $this->viewId;?>"></div> <ul id="contextMenu"></ul></div>');
        w2ui['layout<?php echo $this->viewId;?>'].content('right', w2ui['layoutRight<?php echo $this->viewId;?>'])

    }else {
        //console.log('loading sched'+RESOURCES_FIELD_NAME);
        //console.log("dede22");
        //console.log(w2ui['layoutRight<?php echo $this->viewId;?>']);
   	    w2ui['layoutMain'].content('main',w2ui['layout<?php echo $this->viewId;?>'] );
    	//w2ui['layout<?php echo $this->viewId;?>'].content('top','<div id="example" class="k-content" style="padding-top:10px;"><div id="editor"></div><div id="scheduler<?php echo $this->viewId;?>"></div> <ul id="contextMenu"></ul></div>');
        w2ui['layout<?php echo $this->viewId;?>'].content('right', w2ui['layoutRight<?php echo $this->viewId;?>']);
    }

};

function htmlEditor()
{
    return '<div id="mapGoogle<?php echo $this->viewId;?>" style="width:100%;height:100%"></div>';
}


function openAddPopup(objectName, parentType, parentId, gridName, selectedId, type, action)
{

    $().w2destroy('formPopup'); 
  	var records = [];
  	records['object'] = objectName;
  	records['recid'] = selectedId;
  	config.formPopup.record = $.extend(true, {},records);
    console.log(selectedId);
    console.log('openAddPopup', parentType);
    console.log('type', type);
    initForm(gridName, config.formPopup , objectName,'layout', "main",parentType,parentId,true,selectedId, type, action, "<?php echo $this->viewId;?>");
}

function initForm(gridName, forms, formName, layoutIn, place, parentType, parentId, popup, selectedId, type, action, viewId){
	console.log("initForm...." + type);
	//console.log(formName);
    if( formName.match('^get') || formName.match('^cg?')){
    	console.log("formName...");
        formName = formName.substr(3);
     
    }
    console.log(formName);
    formName = formName.split("[")[0];
    parentType = parentType.split("[")[0];
  

    console.log(type);
    if( parentType.match('^get') || parentType.match('^cg?')){
        parentType = parentType.substr(3);
    }

    // split items in order to get formName and parenty type if there is list with references like 'Customer.getRegister.getTicket'
    if (type.indexOf('.') > 0) {
        const elements = type.split('.');
        const results = elements.map(item => {
                if( item.match('^get') || item.match('^cg?')) {
                    return item.substr(3);
                }
                return item;
            });
        formName = results[results.length -1 ].split("[")[0];
        parentType = results[results.length - 2].split("[")[0];
    } else {
  	  type = type.split("[")[0];
       parentType = type;
    }
    console.log("NAME");    
    console.log(parentType);
    defaultWidth  = 500;
    defaultHeight = 300;
    $.ajax({
        type : 'POST',
        // url: $('#urlAjax').val()+"/getdefinition?objectType="+"<?php echo $this->id; ?>"+"&viewId="+
        url:$('#urlAjax').val()+"/getMethodResultList?objectType=View&methodName=getField&id="+viewId+"&objectId="+parentId+"&criteria=object-"+formName+"&type="+parentType+"&action="+action+"&workspaceId=" + "<?php echo $this->sessionHelper()->getWorkspaceId();?>",//+"55fafd8d8f7b68cb190041a9",//&criteria=object-Customer"
        success:$.proxy(function(result){
            //  $('#main').w2layout(config.layout);
            var buttons = [];
            var fields = [];


            $.each(result.items, function(index, value) {
                if(value.type == "form")
                {

                    defaultWidth  = value.options.maxWidth;
                    defaultHeight = value.options.maxHeight;
                }
                else if(value.type == "list" || value.type == "enum"){
                    value.options.urlBackup = value.options.url;
                    value.options.maxWidth = 100;
                    var actionG  = value.group;
                    
                    if(actionG.length > 0){
                        // backup the string!
                        value.options.urlBackup = value.options.url;
                        value.options.group =  actionG;
                        var nameTo = '#'+actionG;
						console.log(nameTo);
						var found = false;
						$.each(result.items, function(index, value) {
						  console.log(value);
						  if(value.name == actionG) {
							  found = true;
							  var urlStr = value.options.url;
							  var res = urlStr.replace("@id@", value.recid);
							  value.options.url = res;
						  }
						  // get .name = "actionG'
						  // get Recid and add 
						});
						if(found == false){
						  var urlStr = value.options.url;
						  var res = urlStr.replace("@id@", 0);
						  value.options.url = res;
						}

                        value.options.onChange = function (event) {
                              console.log('list chnage', event);
                        };
                        value.onChange = function (event) {
                            console.log('list chnage', event);
                      };
                    }
                    fields.push(value);

                }else if (value.type == "button") {
                    var button = {};
                    console.log("button");
                    console.log(value);
                    var typeTo  = value.object;
                    typeTo = typeTo.split("[")[0];
                    console.log(type);
                    if( type.match('^get') || type.match('^cg?')){
                        type = type.substr(3);
                    }
                    console.log( "VVVVVVVVVVV = ", value);
                    console.log( "VVVVVVVVVVV = ", parentType);
                    console.log( "VVVVVVVVVVV = ", typeTo);
                    forms.record['object']= formName;
                    if( action == "inputForm" ){
                        typeTo = type;
                        forms.record['recid']=  selectedId;
                        forms.record['object']= type;
                        forms.record['parentType']= parentType;
                        forms.record['parentId']= parentId;
                        forms.record['actionExecution']= action;
                        forms.record['viewId']= viewId;
                        forms.record['componentId']= gridName;
                    }
                    if( typeTo.match('^get') || typeTo.match('^cg?')){
                        typeTo = typeTo.substr(3);
                    }
                    button[value.html.caption] = function(e){
                        var formData = new FormData();
                        var record = jQuery.extend(true, {}, this.record);
                        //var record = this.record;
                        var errorV  = false;
					    var errText = '';
						$.each(result.items, function(index1, value1) {
							if(value1.required == "true"){
								 var name = value1.name;
                                 var fileRecord = record[name];
                                 if( value1.type == "button" || value1.type == "checkbox" ||  value1.type == "form"){}
                                 else {
	                                 if(fileRecord == undefined || fileRecord === '' || fileRecord === ' ')
		                              {
	                                	 errText = errText + value1.label +","
			                             errorV = true;
			                          }
                                 }
							}
							if(value1.type == "file"){
								 var name = value1.name;
                                 var fileRecord = record[name];
								 if(fileRecord == undefined || fileRecord[0] == undefined){} else {
                                        var content = fileRecord[0].content;
                                        var fileName = fileRecord[0].name;
                                        delete record[name];
                                        record[name] = {};
                                        record[name]['name'] = fileName;
                                        record[name]['content'] = content;
                                    }
							}
						});
					    if( errorV  == true) {
					    	 alert("Error: Field(s) "+ errText + " empty.");
						    console.log(" Validation = false");
						    return false;
					    }
                        w2ui[forms.name].lock('Loading...', true);
                        console.log('button');
                        console.log(value);
                    	if( value.method != undefined)
                    	{
                    		console.log('button1');
                            var methodExecuted = value.method;
                            console.log('methodExecuted'.methodExecuted);
                            var objectExecutionId = this.record['recid'];
                            if(methodExecuted.startsWith("remote")){
    
                           	   if(record.data == undefined){
                            		record.data = [];
                               }
                               record.data.id = id;   
                               console.log('REMOTE methodExecuted'.methodExecuted);
                               gridName = value.template+ '<?php echo $this->viewId;?>';
                           	   var objectExecutionId =  w2ui[gridName].getSelection();
                               console.log('REMOTE methodExecuted ID '.objectExecutionId);
                            }
                    	}
                    	console.log('button2');
                    	if( gridName == 'scheduler'){
                        	console.log("scheduler");
                      	    record['selectstart']=   "'"+$("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").select().start+ "'";
                        	record['selectend']=   "'"+$("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").select().end+ "'";
                        	console.log($("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").select());
                            datN = $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").date();
                 		    record['select']=   "'"+datN+ "'";
                    	}
                        $.ajax({
                            type : 'POST',
                            cache: false,
                            url:$('#urlAjax').val()+"/execute",
                            data :  {
                                "parentId" : parentId,//"<?php echo $this->parentId; ?>",
                                "parentType" : ""+parentType,//""+"<?php echo $this->parentType; ?>",
                                "objectType" : ""+typeTo,//"<?php echo $this->id; ?>",
                                "id" : objectExecutionId,
                                "actionExecution" :value.actionExecution,
                                "method" :methodExecuted,
                                "data" : record
                            },
                            success:$.proxy(function(result){
                                //console.log(result);
                                w2ui[forms.name].unlock();
                                if(result.status == 'success') {
                                    if( popup == true ) {
                                        $().w2popup('min');
                                    }
                                    if( value.actionExecution == 'saveObject'){
                                      	 //execute action
                                          var arrayOfItems = result.items;
                                          if (arrayOfItems.hasOwnProperty("name")) { 
                                             	  var retValuesI = result.items.name;
                                             	  if(retValuesI!= null){
                                                 	
                                                 	  var typeXX = typeof retValuesI;
                                                 	  console.log(" qerror XXXXXX"+typeXX);
                                                    if( typeof retValuesI === "object") {
                                                  	  console.log(retValuesI);
                                                        for (var propRet in retValuesI) {
                                                      	 if(propRet.startsWith("error")){
                                                      		 alert(retValuesI[propRet]);
                                                       		return;
                                                      	 }
                                                        }
                                                        $().w2popup('close');
                                                    }
                                                    console.log(" error XXXXXX end");
                                             	  }
                                              }
                                              
                                      }
                                    //refresh the page after insert the field
                                    if(value.actionExecution == 'method'){
                                        //console.log(value);
                                        if(value.actionResponse){
                                            var actResp = value.actionResponse;
                                            //execute action
                                            var arrayOfItems = result.items;
                                            for (var prop in arrayOfItems) {
                                                if (arrayOfItems.hasOwnProperty(prop)) {
                                                    // or if (Object.prototype.hasOwnProperty.call(obj,prop)) for safety...
                                                    console.log("execute prop: " + prop + " value: " + arrayOfItems[prop]);
                                                    var newstr = actResp.replace("@"+prop+"@", arrayOfItems[prop]);
                                                    actResp = newstr;
                                                }
                                            } 
                                            console.log(" qerror XXXXXX0"+actResp);
                                            if (arrayOfItems.hasOwnProperty("name")) { 
                                           	  var retValuesI = result.items.name;
                                           	  if(retValuesI!= null){
                                               	  var showMessageX = false;
                                                  console.log(" qerror XXXXXXe");
                                               	  var typeXX = typeof retValuesI;
                                               	  console.log(" qerror XXXXXX"+typeXX);
                                               	 
                                                  if(typeXX != 'string' && typeof retValuesI === "object") {
                                                	  console.log(retValuesI);
                                                   	  if(retValuesI[0] != undefined){
                                                     	   var newstr = actResp.replace("%"+prop+"%", arrayOfItems[prop]);
                                                   	       actResp = newstr;
                                                      	   showMessageX = true;
                                                   	  }
                                                      for (var propRet in retValuesI) {
                                                    	 if(propRet.startsWith("error")){
                                                    		 alert(retValuesI[propRet]);
                                                    		 return;
                                                    	 }
                                                      }
                                                      if(showMessageX == true){
                                                    	 console.log(actResp);
                                                  	     eval(actResp);
                                                    	   return;
                                                      };  
                                                      $().w2popup('close');
                                                  }
                                                  console.log(" error XXXXXX end");
                                           	  }
                                            }
                                            eval(actResp);
                                        }
                                        //refresh the page after insert the field
                                        // reloadGridData(gridName, event.menuItem.parentType ,parentId, event.menuItem.objectType, true);
                                        $().w2popup('close');
                                    }
                                    else {
                                        simpleReloadGridData(gridName, parentType,parentId, value.object, false , false);
                                    }
                                    //refresh the page after delete the field
                                    refreshAll();  //commented because it reloads again a grid and generates an error
                                    if( popup == true) {

                                        $().w2popup('close');
                                    }
                                } else {
                                    //console.log(result.error);
                                }
                            }, this),
                            dataType : 'json'
                        });
                    }
                    buttons = $.extend(buttons, button);
                    //result.items.splice(index, 1);
                }else if (value.type == "filterbutton") {
                    var button = {};
                    var typeF  = value.object;
                    var methodExecuted = value.method;
                    console.log( "type Filterbutton = "+ typeF +  ' methodExecuted: ' +methodExecuted);
                    forms.record['object']= formName;
                    if( action == "inputForm" ){
                        typeTo = typeF;
                        forms.record['recid']=  selectedId;
                        forms.record['object']= type;
                        forms.record['parentType']= parentType;
                        forms.record['parentId']= parentId;
                        forms.record['actionExecution']= action;
                        forms.record['viewId']= viewId;
                        forms.record['componentId']= gridName;
                    }
                    if( typeTo.match('^get') || typeTo.match('^cg?')){
                        typeTo = typeTo.substr(3);
                    }
                    button[value.html.caption] = function(){
                    	console.log( "execute Filterbutton = ");
                        var formData = new FormData();
                        var record = jQuery.extend(true, {}, this.record);
                        console.log(record);
                        $.each(result.items, function(index1, value1) {                         
                           	 console.log("--"+index1+" - " );
                           	 console.log(value1);
                            
                        });
                        var res = methodExecuted;
                        $.each(record, function(indexR, valueR) {
                        	console.log(indexR+" - " +valueR);
                        	if(valueR.length == 0 ){
                         	     res = methodExecuted.replace("@"+indexR+"@", 0);
                            }else {
                         	    res = methodExecuted.replace("@"+indexR+"@", valueR);
                            }
                        });
                        setCustomResourcesSchemaData(res);
                        //searchData = [];
                        //searchItem = [];
                        //searchItem['field'] = "pnaplannedjobtask_date";
                        //searchItem['operator'] = "is";
                        ///searchItem['type'] = "date";
                        //searchItem['value'] = "7/16/2017";
                        //searchData.push(searchItem);
                        //w2ui['gridRef3<?php echo $this->viewId;?>'].searchData = searchData ;
                        //w2ui['gridRef3<?php echo $this->viewId;?>'].searchField ="multi" ;
                       
                        //reloadGridData('gridRef3',w2ui['gridRef3<?php echo $this->viewId;?>'].parentType, w2ui['gridRef3<?php echo $this->viewId;?>'].parentId,w2ui['gridRef3<?php echo $this->viewId;?>'].objectTypeRef, false,searchData);
                        //reloadGridData(shortgridName, parentType,parentId, objectType, refresh, searchData , prefix = 'get' ){
                        //
                       // w2ui['gridRef3<?php echo $this->viewId;?>'].search([{"field": searchItem['field'],"type": searchItem['type'],"operator": searchItem['operator'],"value": searchItem['value'] }]);
                        $().w2popup('close');
                       
                        //{"cmd":"get","selected":[],"limit":100,"offset":0,"search":[{"field":"pnajobtask_date","type":"date","operator":"is","value":"7/16/2017"}],"searchLogic":"AND"}
                    }
                    buttons = $.extend(buttons, button);
                    button["Reset filter"] = function(){
                    	console.log( "execute resetFilterbutton = ");
                    	resetCustomResourcesSchemaData();
                    }
                    buttons = $.extend(buttons, button);
                } else {
                    //console.log(value);
                    fields.push(value);
                }
            });
            console.log(fields, fields);
            forms.header = '<?php echo $this->translate(""); ?>';
            //console.log(fields);
            forms.fields = fields;//result.items;
            forms.actions = buttons;//$.extend([], buttons);
            forms.onChange = function (event) {
          	    console.log("on change");
                console.log(event);
                $.each(this.fields, function(index, value) {
                    if (value.type == "list" || value.type == "enum") {
                    	console.log("on change list");
                        console.log(value);
                        var action  = value.group;
                        var actionTo  = value.field;

                        if(action.length >= 0){
                        	console.log("HEE"+action);
                            if (event.target == action) {
                                var nameTo = '#'+actionTo;
                                console.log(nameTo);
                                var $field2 = $(nameTo);
                                var fld = $field2.data('w2field');  //
                                var field = w2ui[forms.name].get(actionTo);
                                var urlStr = field.options.urlBackup;
                                if ( value.type == "enum"){
                                    if(event.value_new.length == 0 ){
                                 	    var res = urlStr.replace("@id@", 0);
                                    }else {
                                 	   var res = urlStr.replace("@id@", event.value_new[0]._id['$id']);
                                    }
                                } else {
                                	res = '';
                                    if(event.value_new._id == undefined){
                                       	 if( event.value_new[0] == undefined){}
                                       	 else{
                                             var res = urlStr.replace("@id@", event.value_new[0]._id['$id']);
                                       	 }
                                    }else {
                                         var res = urlStr.replace("@id@", event.value_new._id['$id']);
                                    }
                                }
                                $field2.data('url', res);
                                fld.options.url = res;

                                field.options.selected = {};
                                w2ui[forms.name].record[actionTo] = null;
                                // w2ui['form'].refresh();
                                //w2ui[forms.name].refresh(actionTo);
                                console.log("matching1"+res);
                                $field2.attr('placeholder', '');
                                $field2.data('selected', []);
                                $field2.data('url', res);
                                fld.options.url = res;
                                fld.clearCache();
                                fld.refresh();
                                fld.request();
                            }
                        }
                    }
                });
            };
            if (action == 'edit' || action == 'inputForm'|| action == 'new') {
                $.ajax({
                    type: 'POST',
                    url: $('#urlAjax').val() + "/getform?objectType=" + formName + "&viewId=" + viewId + "&workspaceId=" + "<?php echo $this->sessionHelper()->getWorkspaceId();?>" + "&objectId=" + selectedId+"&type="+type+"&actionId="+action,
                        success: $.proxy(function (result) {
                        //console.log(fields);
                        $.each(fields, function(index, value) {
                        	console.log(value);
                            if (value.type == "list"|| value.type == "enum") {
                                var actionN  = value.group;
                                if(actionN.length > 0 && action != 'new'){
                                    var nameField = value.name;
                                    console.log("INGROUP");
                                    console.log(result);
                                    var group = value.options.group ;
                                    console.log(group);
                                    if(group != undefined){
                                       	var urlStr = value.options.urlBackup;
                                       	console.log(urlStr);
                                        var pos = urlStr.indexOf("@id@");
                                        console.log(pos);
                                        if( pos > 0 && result[group] != undefined  ) {
                                            var res = "";
                                            if ( value.type == "enum"){
                                                //TODO iterate
                                           	  var idRef = result[group][0]['recid'];
                                           	  res = urlStr.replace("@id@", idRef);
                                            } else {
                                                if(result[group][0] == undefined){
                                               	  var idRef = result[group]['recid'];
                                               	  res = urlStr.replace("@id@", idRef);
                                                } else{
                                                  var idRef = result[group][0]['recid'];
                                               	  res = urlStr.replace("@id@", idRef);
                                                }
                                            }
                                            value.options.url = res;
                                        } else {
                                            value.options.url = urlStr;
                                        }
                                    }

                                }
                            }
                            
                            if(value.type == 'file') {
                                value.options = {};
                                console.log(value.options);
                                value.options.onClick = function (event) {
                                    var file = event.item.content;
                                    var url = 'data:'+event.item.type+';filename='+event.item.name+';base64,' + encodeURI(file);
                                    window.open(url, 'newwindow', 'width=500, height=500');
                                };
                            }
                        });
                        //console.log( "EDIT FORM");
                        forms.record = $.extend(true, {}, result);
                        if (action == 'edit' || action == 'inputForm'){
						    forms.record['recid']=  selectedId;
						}
                        if( ! popup){
                            //console.log(" FORM initinig ");
                            //console.log(" FORM init ");
                            w2ui[layoutIn].content(place, $().w2form(forms));

                        }else{
                            $().w2popup('open', {
                                title   : '....',
                                body    : '<div id="form" style="width: 100%; height: 100%;"></div>',
                                style   : 'padding: 15px 0px 0px 0px',
                                width   : defaultWidth,
                                height  : defaultHeight,
                                showMax : true,
                                onToggle: function (event) {
                                    //$().w2form(forms).hide();
                                    event.onComplete = function () {
                                        $().w2form(forms).show();
                                        $().w2form(forms).resize();
                                    }
                                },
                                onOpen: function (event) {
                                    event.onComplete = function () {
                                        // specifying an onOpen handler instead is equivalent to specifying an onBeforeOpen handler, which would make this code execute too early and hence not deliver.
                                        $('#w2ui-popup #form').w2render($().w2form(forms).name);

                                    }
                                }
                            });
                        }
                        //w2ui[forms.name].refresh();
                    }, this),
                    dataType: 'json'
                });
            } else {

                if( ! popup){
                    //console.log(" FORM initinig ");

                    //console.log(" FORM init ");
                    w2ui[layoutIn].content(place, $().w2form(forms));

                }else{
                    $().w2popup('open', {
                        title   : '....',
                        body    : '<div id="form" style="width: 100%; height: 100%;"></div>',
                        style   : 'padding: 15px 0px 0px 0px',
                        width   : defaultWidth,
                        height  : defaultHeight,
                        showMax : true,
                        onToggle: function (event) {
                            //$().w2form(forms).hide();
                            event.onComplete = function () {
                                $().w2form(forms).show();
                                $().w2form(forms).resize();
                            }
                        },
                        onOpen: function (event) {
                            event.onComplete = function () {
                                // specifying an onOpen handler instead is equivalent to specifying an onBeforeOpen handler, which would make this code execute too early and hence not deliver.
                                $('#w2ui-popup #form').w2render($().w2form(forms).name);

                            }
                        }
                    });
                }
            }
        }, this),
        dataType : 'json'
    });

}

  function updateGridReference(shortGridName, newRef){
	  w2ui[shortGridName+'<?php echo $this->viewId;?>'].objectTypeRef = newRef;
  }

  function refreshGrid(gridName){
	   simpleReloadGridData(gridName,w2ui[gridName+'<?php echo $this->viewId; ?>'].parentType, '<?php echo $this->parentId; ?>',w2ui[gridName+'<?php echo $this->viewId; ?>'].objectTypeRef, false);
  }
  
  function refreshAll(){
	  if(SCHEDULER_AP == false){
          updateScheduler(MAINDATE, getSchedulerView(), 0);
          $("#scheduler<?php echo $this->viewId;?>").data("kendoScheduler").refresh();
      }
        if(STORAGE["<?php echo $this->viewId;?>"].LISTS == true){
            simpleReloadGridData('grid',w2ui['grid<?php echo $this->viewId; ?>'].parentType, '<?php echo $this->parentId; ?>',w2ui['grid<?php echo $this->viewId; ?>'].objectTypeRef, false);
            simpleReloadGridData('gridRef',w2ui['gridRef<?php echo $this->viewId;?>'].parentType, w2ui['gridRef<?php echo $this->viewId;?>'].parentId,w2ui['gridRef<?php echo $this->viewId;?>'].objectTypeRef, false);
            simpleReloadGridData('gridRef2',w2ui['gridRef2<?php echo $this->viewId;?>'].parentType, w2ui['gridRef2<?php echo $this->viewId;?>'].parentId,w2ui['gridRef2<?php echo $this->viewId;?>'].objectTypeRef, false);
            if( w2ui['gridRef3<?php echo $this->viewId;?>'] != undefined  )
                simpleReloadGridData('gridRef3',w2ui['gridRef3<?php echo $this->viewId;?>'].parentType, w2ui['gridRef3<?php echo $this->viewId;?>'].parentId,w2ui['gridRef3<?php echo $this->viewId;?>'].objectTypeRef, false);
            if( w2ui['gridRef4<?php echo $this->viewId;?>'] != undefined  )
                simpleReloadGridData('gridRef4',w2ui['gridRef4<?php echo $this->viewId;?>'].parentType, w2ui['gridRef4<?php echo $this->viewId;?>'].parentId,w2ui['gridRef4<?php echo $this->viewId;?>'].objectTypeRef, false);
            if( w2ui['gridRef5<?php echo $this->viewId;?>'] != undefined  ){
                console.log("refrsh"+w2ui['gridRef5<?php echo $this->viewId;?>'].parentId);
                //console.log(w2ui['gridRef5<?php echo $this->viewId;?>']);
                simpleReloadGridData('gridRef5',w2ui['gridRef5<?php echo $this->viewId;?>'].parentType, w2ui['gridRef5<?php echo $this->viewId;?>'].parentId,w2ui['gridRef5<?php echo $this->viewId;?>'].objectTypeRef, false);
            }
        }

        
  }

function script(url) {
    var s = document.createElement('script');
    s.type = 'text/javascript';
    s.async = true;
    s.src = url;
    var x = document.getElementsByTagName('head')[0];
    x.appendChild(s);
}

$(function () {
	loadScript();
    // initialization
	$.getScript("<?php echo $this->basePath();?>"+'/js/kendo.messages.'+"<?php echo $this->schedulerLanguage;?>"+'.min.js', function(){

		});
	$.getScript("<?php echo $this->basePath();?>"+'/js/kendo.culture.'+"<?php echo $this->schedulerLanguage;?>"+'.js', function(){

	});
	 setTimeout(function() {
		 kendo.culture("<?php echo $this->schedulerLanguage;?>");
		 //console.log(w2ui['layout<?php echo $this->viewId;?>']);
		 if(typeof w2ui['layout<?php echo $this->viewId;?>'] === 'undefined')
         {
			   getResources();
			   loadList();

		   }else {

			   //getResources()
			   //console.log('loading sched1'+RESOURCES_FIELD_NAME);
			   //createScheduler();
			   getResources();
			   loadList();
		   }

	      }, 1000);



});
</script>





<div id="main" style="width: 100%; height: 400px;">





	<!--  div id="example" class="k-content" style="padding-top:10px;">
  <div id="scheduler"></div>
</div -->

</div>
<input type="hidden" name="urlAjax" id="urlAjax"
	value="<?php echo $this->url('home');?>" />
<input type="hidden" name="parentId" id="parentId"
	value="<?php echo $this->parentId; ?>" />
<input type="hidden" name="idObject" id="idObject"
	value="<?php echo $this->id; ?>" />
<input type="hidden" name="parentType" id="parentType"
	value="<?php echo $this->parentType; ?>" />
