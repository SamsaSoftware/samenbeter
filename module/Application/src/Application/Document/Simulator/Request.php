<?php
namespace Application\Document\Simulator;

use Application\Document\Model;
use Application\Document\Indexer;
use Application\Document\UserTemplate;

class Request extends Model
{

    // public $sfriends = array();
    // public $susers = array();
    public $group_name;

    public $group_tags;

    public $from_user_profile;

    public $message;

    public $user_id;

    public $group_id;
     
    public $request_date;

    public $modelprofile_id;

    public $requeststatus;

    public $is_notaccepted;

    public $modelprofiles = array();

    public $groups = array();

    public $requesttype;

    const INVITATION = "Invitation";

    const REQUEST = "Request";

    const ACCEPTED = "Accepted";

    const REFUSED = "Refused";

    const NEW_REQEUST = "New";

    // "name" => "REQUESTSTATUS",
    // "items" => "[
    // {\"recid\":\"0\",\"type\":\"new\", \"select\":\"0\"},
    // {\"recid\":\"1\",\"type\":\"accepted\", \"select\":\"1\"},
    // {\"recid\":\"2\",\"type\":\"refused\", \"select\":\"2\"},
    // {\"recid\":\"3\",\"type\":\"canceled\", \"select\":\"3\"},
    // {\"recid\":\"4\",\"type\":\"error\", \"select\":\"4\"}]",
    public function accept()
    {
        $type = $this->getMasterStateValue("requesttype");
        \Application\Controller\Log::getInstance()->AddRow(' Masterdatas >>>>>>>>>>>> ' . json_encode($type) . " - ". $this::REQUEST);
        if (strcmp($type, $this::REQUEST) !== 0) {
            return ("This is not a request...");
        } else {
            $modelprofileIn = $this->getInstances('Modelprofile');
            $groupIn = $this->getInstances('Group');
            \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup2 >>>>>>>>>>>> ' . json_encode($modelprofileIn));
            \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup2 >>>>>>>>>>>> ' . json_encode($groupIn));
            
            if (isset($modelprofileIn) && count($modelprofileIn) > 0) {
                if (isset($groupIn) && count($groupIn) > 0) {
                    $modelprofileInO = $modelprofileIn[0];
                    $groupInO = $groupIn[0];
                    $groupInO->addProfileToGroup($modelprofileInO);
                    $this->is_notaccepted  = false;
                    $this->setMasterState("requeststatus", 0, $this::ACCEPTED);
                    $this->update();
                    return "Accepted";
                }
            }
            
        }
        return "Error";
    }

    public function refuse()
    {
        $this->is_notaccepted  = false;
        $this->setMasterState("requeststatus", 0, $this::REFUSED);
        return "Refused";
    }

    public function acceptInviteForGroup($modelprofile)
    {
        $stateR = $this->getMasterStateValue("requesttype");
        if ($stateR === $this::INVITATION) {
            $modelprofileO = json_decode($modelprofile, true);
            \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup1 >>>>>>>>>>>> ' . json_encode($modelprofileO));
            
            if (isset($modelprofileO[0])) {
                $modelprofileIn = $this->getInstance("Modelprofile", (string) $modelprofileO[0]['_id']['$id']);
                $groupIn = $this->getInstances('Group');
                \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup2 >>>>>>>>>>>> ' . json_encode($modelprofileIn));
                \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup2 >>>>>>>>>>>> ' . json_encode($groupIn));
                
                if (isset($modelprofileIn)) {
                    if (isset($groupIn) && count($groupIn) > 0) {
                        $modelprofileInO = $modelprofileIn;
                        $groupInO = $groupIn[0];
                        $groupInO->addProfileToGroup($modelprofileIn);
                        $this->is_notaccepted  = false;
                        $this->setMasterState("requeststatus", 0, $this::ACCEPTED);
                        return "Accepted";
                    }
                }
            }
        }
        return "Not an invite... only invites can be accepted";
    }

    public static function getRelationType($name)
    {
        $relations = array();
        $relations['modelprofiles'] = Model::ONE_TO_ONE;
        $relations['groups'] = Model::ONE_TO_ONE;
        return self::getRelationFromArray($name, $relations);
    }

    public function getRelationDetails($name)
    {
        $simplerelations = array();
        return parent::getRelationRefFromArray($name, $simplerelations); // TODO: Change the autogenerated stub
    }

    public function openPV()
    {
        // return strng
    }
}