<?php
namespace Application\Document\Simulator;

use Application\Document\Model;
use Application\Document\Indexer;
use Application\Document\UserTemplate;

class Suser extends UserTemplate
{

    public $sfriends = array();

    public $stypes = array();

    public $modelprofiles = array();

    public $groupmodelprofiles = array();

    public $profileattributes = array();

    public $requests = array();

    public $groups = array();

    public $is_not_active = true;

    public static function getRelationType($name)
    {
        $relations = array();
        $relations['sfriends'] = Model::ONE_TO_MANY;
        $relations['groups'] = Model::ONE_TO_MANY;
        $relations['stypes'] = Model::ONE_TO_MANY;
        $relations['modelprofiles'] = Model::OWNING_ONE_TO_MANY;
        $relations['groupmodelprofiles'] = Model::OWNING_ONE_TO_MANY;
        $relations['requests'] = Model::OWNING_ONE_TO_MANY;
        $relations['profileattributes'] = Model::OWNING_ONE_TO_MANY;
        return self::getRelationTypeArray($name, $relations);
    }

    public function getRelationDetails($name)
    {
        $simplerelations = array();
        
        return parent::getRelationRefFromArray($name, $simplerelations); // TODO: Change the autogenerated stub
    }

    public function openPVTest()
    {
        // return strng
        $ret = array();
        $ret['message'] = 'test return text';
        return $ret;
    }

    public function createSimulatorUser()
    {
        $laf = new \Application\Controller\MongoObjectFactory();
        $this->is_not_active = 'false';
        $this->samsarole = 'extern';
        $this->update();
        $userObject = $laf->findObject('Suser', $this->getIdAsString());
        $userObject->validateUser(false);
        return "ok";
    }

    public function add($typeC, $json)
    {
        $laf = new \Application\Controller\MongoObjectFactory();
        $typeRelClass = new \ReflectionClass($laf->getClassPath($typeC) . $typeC);
        $nameRel = \strtolower($typeRelClass->getShortName());
        // $id = 0;
        \Application\Controller\Log::getInstance()->AddRow(' createProfile inside USER 1 >>>>>>>>>>>> ' . $typeC);
        $id = parent::add($typeC, $json);
        if ($nameRel == 'modelprofile') {
            \Application\Controller\Log::getInstance()->AddRow(' createProfile inside Workspace 1 >>>>>>>>>>>> ' . $nameRel);
            $oMP = $this->getInstance('Modelprofile', (string) $id);
            $oMP->copyAttributes();
        }
        
        return $id;
    }

    public function copyAttributes()
    {
        \Application\Controller\Log::getInstance()->AddRow(' createProfile USer inside Usr 1 >>>>>>>>>>>> ' . json_encode($this));
        
        $this->copyset('getParent.getProfileattributetemplate', 'Profileattribute');
        
        \Application\Controller\Log::getInstance()->AddRow(' createProfile USer inside Usr 2 >>>>>>>>>>>> ' . json_encode($this));
        
        $this->update();
    }

    public function test2()
    {
        // return strng
        return "ok very good";
    }

    function createGroupModelProfile($modObj)
    {
        \Application\Controller\Log::getInstance()->AddRow(' GroupModelProfile USer inside Usr 2 >>>>>>>>>>>> ' . json_encode($modObj));
        
        $typeGroupModelProfile = "Groupmodelprofile";
        $data = array(
            "name" => $modObj->name,
            "owner" => $this->email
        );
        $returnReqId = $this->add($typeGroupModelProfile, $data);
        \Application\Controller\Log::getInstance()->AddRow(' GroupModelProfile USer inside Usr 2 >>>>>>>>>>>> ' . json_encode($returnReqId));
          
        $groupModelProfile = $this->getInstance($typeGroupModelProfile, (string) $returnReqId);
        \Application\Controller\Log::getInstance()->AddRow(' GroupModelProfile USer inside Usr 2 >>>>>>>>>>>> ' . json_encode($groupModelProfile));
        
        $groupModelProfile->copyAttributes($modObj);
        return $returnReqId;
        // $groupModelProfile->update();
    }

    
    public function makeInvitation($profile,$message, $group)
    {
        $date = new \DateTime();
        \Application\Controller\Log::getInstance()->AddRow(' makeRequest USer inside Usr 1 >>>>>>>>>>>> ' . json_encode($profile));
        //     \Application\Controller\Log::getInstance()->AddRow(' makeRequest USer inside Usr 2 >>>>>>>>>>>> ' . json_encode($group));
        $typeRequest = 'Request';
        $data = array(
            "group_id" => $group->getIdAsString(),
            "group_name" => $group->name,
            "group_tags" => $group->tags,
            "from_user_profile" => $profile->name,
            "message" => $message,
            "is_notaccepted" => true,
            "requestdate" => $date->format('d-m-Y H:i')
        );
        $returnReqId = $this->add($typeRequest, $data);
        $req = $this->getInstance($typeRequest, (string) $returnReqId);
        $req->setMasterState("requeststatus", 2 , Request::NEW_REQEUST);
        $req->setMasterState("requesttype", 2 , Request::INVITATION);
        $req->update();
        $req = $this->getInstance($typeRequest, (string) $returnReqId);
        $req->addRemoteReferenceObject($profile);
        $req = $this->getInstance($typeRequest, (string) $returnReqId);
        $req->addRemoteReferenceObject($group);
        return "ok";
    }
    public function makeRequest($profile,$message, $group)
    {
       $date = new \DateTime();
        \Application\Controller\Log::getInstance()->AddRow(' makeRequest USer inside Usr 1 >>>>>>>>>>>> ' . json_encode($profile));
   //     \Application\Controller\Log::getInstance()->AddRow(' makeRequest USer inside Usr 2 >>>>>>>>>>>> ' . json_encode($group));
        $typeRequest = 'Request';
        $data = array(
            "group_id" => $group->getIdAsString(),
            "group_name" => $group->name,
            "group_tags" => $group->tags,
            "from_user_profile" => $profile->name,
            "message" => $message,
            "is_notaccepted" => true,
            "requestdate" => $date->format('d-m-Y H:i')
        );
        $returnReqId = $this->add($typeRequest, $data);
        $req = $this->getInstance($typeRequest, (string) $returnReqId);
        $req->setMasterState("requeststatus", 2 , Request::NEW_REQEUST);
        $req->setMasterState("requesttype", 2 , Request::REQUEST);
        $req->update();
        $req = $this->getInstance($typeRequest, (string) $returnReqId);
        $req->addRemoteReferenceObject($profile);
        $req = $this->getInstance($typeRequest, (string) $returnReqId);
        $req->addRemoteReferenceObject($group);
        return "ok";
    }


    /* used if you want to deledete the profile from "Default" menu */
    public function remove($object, $softRemove = true, $noPropagation = false)
    {

        if($object instanceof Profileattribute){
            if($object->prottectedattribute == true){
                return 'Protected attribute can\'t be deleted';
            }
        }
        parent::remove($object, $softRemove, $noPropagation);
    }
}