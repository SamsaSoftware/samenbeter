<?php
namespace Application\Document\Simulator;

use Application\Document\Model;
use Application\Document\Indexer;
use Application\Document\UserTemplate;

class Group extends Model
{

    const PRIVATE_GROUP = 2;

    const PROTECTED_GROUP = 1;

    const PUBLIC_GROUP = 0;

    // public $sfriends = array();
    public $modelprofiles = array();

    public $groupmodelprofiles = array();

    public $susers = array();

    public $requests = array();

    public $name;

    public $topic;

    public $tags;

    public $publicgroup = true;

    public $grouptype;

    public $owner;

    public static function getRelationType($name)
    {
        $relations = array();
        $relations['modelprofiles'] = Model::MANY_TO_ONE;
        $relations['susers'] = Model::MANY_TO_ONE;
        $relations['groupmodelprofiles'] = Model::MANY_TO_ONE;
        $relations['requests'] = Model::ONE_TO_MANY;
        return self::getRelationFromArray($name, $relations);
    }

    public function getRelationDetails($name)
    {
        $simplerelations = array();
        return parent::getRelationRefFromArray($name, $simplerelations); // TODO: Change the autogenerated stub
    }

    public function cgtOwner()
    {
        $ncriteria = [];
        \Application\Controller\Log::getInstance()->AddRow(' cgtOwner >>>>>>>>>>>> ' . json_encode($this));
        $ncriteria = array(
            'email',
            $this->owner
        );
        \Application\Controller\Log::getInstance()->AddRow(' cgtOwner >>>>>>>>>>>> ' . json_encode($ncriteria));
        $groupI = $this->getParent()->getQuickInstancesCriteria('Suser', $ncriteria);
        \Application\Controller\Log::getInstance()->AddRow(' cgtOwner >>>>>>>>>>>> ' . json_encode($groupI));
        if (isset($groupI) && count($groupI) > 0) {
            return $groupI[0];
        } else
            throw new \Exception("No owner found for group: " . $this->name);
    }

    public function checkModelInGroup($modelprofileObject)
    {
        
        // $modelprofileO = json_decode($modelprofile, true);
        
        // $ncriteria = [];
        // $ncriteria['_id'] = (string) $modelprofileO[0]['_id']['$id'];
        $laf = new \Application\Controller\MongoObjectFactory();
        // $modelprofileObject = $laf->findObject("Modelprofile", (string) $modelprofileO[0]['_id']['$id']);
        
        $ncriteria = array(
            'parent.$id',
            $modelprofileObject->getParent()->getIdAsString()
        );
        $groupModelProfileInstances = $this->getInstances("Groupmodelprofile");
        \Application\Controller\Log::getInstance()->AddRow(' checkModelInGroup >>>>>>>>>>>> ' . json_encode($groupModelProfileInstances) . " ---" . json_encode($ncriteria));
        foreach ($groupModelProfileInstances as $groupModelProfileInstance) {
            $groupModelProfileI = $groupModelProfileInstance->getQuickInstancesCriteria("Modelprofile", $ncriteria);
            \Application\Controller\Log::getInstance()->AddRow(' checkModelInGroup1 >>>>>>>>>>>> ' . json_encode($groupModelProfileI));
            
            if (isset($groupModelProfileI) && count($groupModelProfileI) > 0) {
                $id = $groupModelProfileI[0]->getIdAsString();
                if (isset($id) && strlen($id) > 1) {
                    return $id;
                }
            }
        }
        // $this->getQuickInstancesCriteria($typeC, $criteria);
        return false;
    }

    public function makeARequestForGroup($modelprofile, $message)
    {
        $typeGroup = $this->grouptype[0]['id'];
        $modelprofileO = json_decode($modelprofile, true);
        
        if (isset($modelprofileO[0])) {
            $laf = new \Application\Controller\MongoObjectFactory();
            $modelprofileObject = $laf->findObject("Modelprofile", (string) $modelprofileO[0]['_id']['$id']);
            if ($this->checkModelInGroup($modelprofileObject) !== false) {} else {
                \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup1 >>>>>>>>>>>> ' . json_encode($typeGroup));
                if (isset($typeGroup) && $typeGroup == $this::PUBLIC_GROUP) {
                    $this->addProfileToGroup($modelprofileObject);
                    return "Public group";
                } else if (isset($typeGroup) && $typeGroup == $this::PROTECTED_GROUP) {
                    \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup1 >>>>>>>>>>>> ' . json_encode($modelprofile));
                    $groupowner = $this->cgtOwner();
                    $groupowner->makeRequest($modelprofileObject, $message, $this);
                    return "Request sent";
                } else if (isset($typeGroup) && $typeGroup == $this::PRIVATE_GROUP) {
                    return "On invite only";
                }
            }
        }
        return "Already in group";
    }

    public function makeAnInvitationForUser($userId, $message)
    {
        
        // only the owner can invite
        $owner = $this->getParent()->getActiveExternUser();
        $criteria = array();
        $criteria[0] = 'owner';
        $criteria[0] = $owner->email;
        // get his profile on this group
        $gmodelprofiles = $this->getQuickInstancesCriteria("Groupmodelprofile", $criteria);
        $typeGroup = $this->grouptype[0]['id'];
        \Application\Controller\Log::getInstance()->AddRow(' makeAnInvitationForGroup >>>>>>>>>>>> ' . json_encode($gmodelprofiles[0]));
        \Application\Controller\Log::getInstance()->AddRow(' makeAnInvitationForGroup >>>>>>>>>>>> ' . json_encode($typeGroup));
        if (isset($typeGroup) && $typeGroup == $this::PUBLIC_GROUP) {
            return "Public groups do not allow invites";
        } else {
            \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup1.4 >>>>>>>>>>>> ' . json_encode($gmodelprofiles));
            $criteria = array();
            $criteria[0] = 'email';
            $criteria[1] = $userId;
            $destinationUsers = $this->getParent()->getQuickInstancesCriteria("Suser", $criteria);
            \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup1.5 >>>>>>>>>>>> ' . json_encode($destinationUsers));
            $destmodelprofiles = $destinationUsers[0]->getInstances("Modelprofile");
            foreach ($destmodelprofiles as $modelprofiledest) {
                if ($this->checkModelInGroup($modelprofiledest) !== false) {
                    return "Already in group";
                } else {
                    $modelprofiles = $gmodelprofiles[0]->getInstances("Modelprofile");
                    \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup2xx >>>>>>>>>>>> ' . json_encode($modelprofiles));
                    foreach ($destinationUsers as $destinationUser) {
                        \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup2xx >>>>>>>>>>>> ' . json_encode($destinationUser));
                        $destinationUser->makeInvitation($modelprofiles[0], $message, $this);
                    }
                    return "Invitation sent";
                }
            }
        }
    }

    public function addProfileToGroup($modObj)
    {
        $suser = $modObj->getParent();
        $exId = $this->checkModelInGroup($modObj);
        if ($exId != false) {
            return $exId;
        } else {
            $idGP = $suser->createGroupModelProfile($modObj);
            
            $groupmodObj = $suser->getInstance("Groupmodelprofile", $idGP);
            $groupmod = $this->getParent()->getInstance("Group", $this->getIdAsString());
            \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup33 >>>>>>>>>>>> ' . json_encode($groupmod));
            $groupmodObj->addRemoteReferenceObject($groupmod);
            $groupmod->update();
            $groupmod = $this->getParent()->getInstance("Group", $this->getIdAsString());
            \Application\Controller\Log::getInstance()->AddRow(' makeARequestForGroup33 >>>>>>>>>>>> ' . json_encode($groupmod));
            
            $suser->addRemoteReferenceObject($groupmod);
            $groupmod->update();
            $groupmodObj = $suser->getInstance("Groupmodelprofile", $idGP);
            $groupmodObj->addRemoteReferenceObject($modObj);
            
            $this->reload();
            return $idGP;
        }
    }
}